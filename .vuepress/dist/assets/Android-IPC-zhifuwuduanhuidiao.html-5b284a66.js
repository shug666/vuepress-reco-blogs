import{_ as e,r as t,o as p,c,b as n,d as s,e as o,a as i}from"./app-ee4ba21e.js";const l={},u=i(`<h2 id="_1、跨进程传输接口" tabindex="-1"><a class="header-anchor" href="#_1、跨进程传输接口" aria-hidden="true">#</a> 1、跨进程传输接口</h2><h3 id="跨进程传递对象" tabindex="-1"><a class="header-anchor" href="#跨进程传递对象" aria-hidden="true">#</a> 跨进程传递对象</h3><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-8b633c2a8d2d3677.png" alt=""></p><p>基本数据类型，如int、short 、String 等不用做任何处理可通过Binder直接传送。而复杂数据类型，如自定义的类，需要实现Parcelable 接口才能通过Binder传送。</p><p>以之前的获取学生信息为例：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-27180e98220c9543.png" alt=""></p><p>如上图所示，客户端通过IPC 从服务端获取学生信息，学生信息封装在Student类里：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">float</span> score<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>学生信息包括姓名、年龄、分数三个字段。<br> 我们定义AIDL接口如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">IStudentInfo</span> <span class="token punctuation">{</span>
    <span class="token comment">//主动获取</span>
    <span class="token class-name">Student</span> <span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端通过调用 getStudentInfo() 方法即可获取从服务端返回的学生信息。</p><h3 id="跨进程传递接口" tabindex="-1"><a class="header-anchor" href="#跨进程传递接口" aria-hidden="true">#</a> 跨进程传递接口</h3><p>客户端想要获取学生信息，需要主动调用 getStudentInfo() 方法。考虑一种场景：</p><blockquote><p>1、学生每一门考试，分数都在变化，客户端需要一直轮询去调用getStudentInfo() 方法才能获取最新的成绩。我们知道轮询是效率比较低的做法，要尽量避免。<br> 2、我们就会想到学生成绩发生变化了，服务端就主动通知我们就好啦。</p></blockquote><p>如下图所示：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-e4af4229848884f5.png" alt=""></p><p><strong>现在的问题重点是：服务端如何主动通知客户端。</strong><br> 依据以往的经验，有两种方式可以实现：</p><blockquote><p>1、客户端通过绑定服务端的Service，进而与服务端通信，那么可以换种思路，客户端也可以定义Service，而后服务端通过绑定客户端，进而调用客户端的接口，主动给客户端传递消息。<br> 2、客户端绑定了服务端的Service，两者之间就能够通信。实际上服务端传递了Binder给客户端，客户端拿到Binder之后就可以进行通信了，这就说明了Binder对象本身能够跨进程传输。<br> 于是改造之前的接口：<br> 客户端调用服务端接口的时候将自己生成的Binder传递给服务端，那么服务端发生变化的时候就可以通过这个Binder来通知客户端了。</p></blockquote><p>通过比对1、2两种方式：<br> 第一种方式过于复杂，对于客户端、服务端的角色容易搞混。<br> 第二种方式符合我们认知的&quot;回调&quot;，也就是说跨进程的回调和同一个进程里的回调理解上是一致的。</p><h2 id="_2、aidl-回调的使用" tabindex="-1"><a class="header-anchor" href="#_2、aidl-回调的使用" aria-hidden="true">#</a> 2、AIDL 回调的使用</h2><h3 id="服务端声明回调接口" tabindex="-1"><a class="header-anchor" href="#服务端声明回调接口" aria-hidden="true">#</a> 服务端声明回调接口</h3><p>定义AIDL 回调接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>ipcserver<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">RemoteCallback</span> <span class="token punctuation">{</span>
    <span class="token comment">//回调</span>
    oneway <span class="token keyword">void</span> <span class="token function">onCallback</span><span class="token punctuation">(</span>in <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Student 为学生信息类，该对象支持跨进程传输。<br> in 表示数据流方向，表示该Student 对象传递给客户端。<br> oneway 表示调用onCallback(xx) 方法的线程立即返回，不阻塞等待方法调用结果。</p><h3 id="服务端暴露注册回调接口方法" tabindex="-1"><a class="header-anchor" href="#服务端暴露注册回调接口方法" aria-hidden="true">#</a> 服务端暴露注册回调接口方法</h3><p>服务端定义了回调接口，客户端需要给服务端传递接口的实现。因此服务端还需要将注册回调的接口暴露给客户端。<br> 定义AIDL 文件如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>ipcserver<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>ipcserver<span class="token punctuation">.</span></span><span class="token class-name">RemoteCallback</span></span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">IStudentInfo</span> <span class="token punctuation">{</span>
    <span class="token comment">//主动获取</span>
    <span class="token class-name">Student</span> <span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//注册回调</span>
    oneway <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>in <span class="token class-name">RemoteCallback</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，服务端提供了两个方法：</p><blockquote><p>1、getStudentInfo() 客户端调用此方法主动获取学生信息。<br> 2、register(xx) 客户端调用此方法注册回调实例。</p></blockquote><h3 id="服务端编写回调逻辑" tabindex="-1"><a class="header-anchor" href="#服务端编写回调逻辑" aria-hidden="true">#</a> 服务端编写回调逻辑</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Student</span> student<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">RemoteCallback</span> remoteCallback<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">MyStudent</span> myStudent<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        myStudent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">class</span> <span class="token class-name">MyStudent</span> <span class="token keyword">extends</span> <span class="token class-name">IStudentInfo<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> student<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">RemoteCallback</span> callback<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token comment">//客户端注册的回调实例保存到成员变量 remoteCallback</span>
            remoteCallback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//学生成绩发生改变</span>
            student<span class="token punctuation">.</span><span class="token function">setScore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>remoteCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token comment">//调用回调实例方法，将变化后的学生信息传递给客户端</span>
                    remoteCallback<span class="token punctuation">.</span><span class="token function">onCallback</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//将Stub 返回给客户端</span>
        <span class="token keyword">return</span> myStudent<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，声明了IStudentInfo 实例。<br> 小结上面的逻辑：</p><blockquote><p>1、服务端声明了Stub(桩，实际上是Binder实例)，并将Stub返回给客户端。<br> 2、客户端收到Stub(实际上是BinderProxy)，然后转换为IStudentInfo 接口。而该接口里声明了两个方法，分别是getStudentInfo()和register(xx)。<br> 3、客户端调用register(RemoteCallback) 将回调注册(传递)给服务端。<br> 4、服务端发生变化的时候通过RemoteCallback 通知客户端数据已经发生改变。</p></blockquote><h3 id="客户端编写调用逻辑" tabindex="-1"><a class="header-anchor" href="#客户端编写调用逻辑" aria-hidden="true">#</a> 客户端编写调用逻辑</h3><p>分三步：<br> (1)、客户端绑定服务端Service。<br> (2)、建立连接后客户端将IBinder 转化为IStudentInfo 接口，并注册回调。<br> (3)、客户端处理回调内容。</p><p>来看看代码实现：</p><h4 id="_1-绑定服务" tabindex="-1"><a class="header-anchor" href="#_1-绑定服务" aria-hidden="true">#</a> (1)绑定服务</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token comment">//参数1：运行远程服务的包名</span>
        <span class="token comment">//参数2：远程服务全限定类名</span>
        <span class="token class-name">ComponentName</span> componentName <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentName</span><span class="token punctuation">(</span><span class="token string">&quot;com.fish.ipcserver&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;com.fish.ipcserver.StudentService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        intent<span class="token punctuation">.</span><span class="token function">setComponent</span><span class="token punctuation">(</span>componentName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//绑定远程服务</span>
        v<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> serviceConnection<span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">BIND_AUTO_CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-ibinder-转换为istudentinfo-接口" tabindex="-1"><a class="header-anchor" href="#_2-ibinder-转换为istudentinfo-接口" aria-hidden="true">#</a> (2)IBinder 转换为IStudentInfo 接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">ServiceConnection</span> serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isConnected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token comment">//转为对应接口</span>
            iStudentInfo <span class="token operator">=</span> <span class="token class-name">IStudentInfo<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//注册回调</span>
                iStudentInfo<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>remoteCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isConnected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-客户端处理回调" tabindex="-1"><a class="header-anchor" href="#_3-客户端处理回调" aria-hidden="true">#</a> (3)客户端处理回调</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//声明回调</span>
    <span class="token class-name">RemoteCallback</span> remoteCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteCallback<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCallback</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;fish&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;call back student:&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span><span class="token class-name">IPCActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&quot;client receive change:&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Toast</span><span class="token punctuation">.</span><span class="token constant">LENGTH_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此处收到服务端的回调后，仅仅Toast 学生信息。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><p>1、自定义类型Student.java 与Student.aidl 需要在同一个包名下。<br> 2、客户端与服务端定义的aidl 文件需要在同一个包名下。通常来说，一般先定义服务端aidl 接口，最后将这些aidl文件拷贝到客户端相同包名下。<br> 3、bindService Intent 需要指定ComponentName。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-6bc416d9ed12dfc3.png" alt=""></p><h2 id="_3、回调在四大组件里的应用" tabindex="-1"><a class="header-anchor" href="#_3、回调在四大组件里的应用" aria-hidden="true">#</a> 3、回调在四大组件里的应用</h2><p>以ContentProvider 为例：<br> 想要获取相册数据，可以通过ContentProvider获取，而相册是公共的存储图片区域，其它App都可以往里面插入数据或者删除数据。<br> 而系统也提供了监听相册变化的回调：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ContentObserver</span> contentObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentObserver</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onChange</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> selfChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//数据变化回调</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>selfChange<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerContentObserver</span><span class="token punctuation">(</span><span class="token class-name">MediaStore<span class="token punctuation">.</span>Images<span class="token punctuation">.</span>Media</span><span class="token punctuation">.</span><span class="token constant">EXTERNAL_CONTENT_URI</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> contentObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上，通过registerContentObserver(xx)向系统(服务端)注册了回调接口，当有数据变化的时候服务端会调用onChange(xx)通知客户端。</p><p>不仅ContentProvider 运用到了回调，Service、Activity、Broadcast也用到了。</p><p><strong>理解了进程间的回调原理及其使用，对理解四大组件的通信帮助很大。</strong></p>`,52),d={href:"https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Ffishforest%2FAndroidDemo%2Fblob%2Fmain%2Fapp%2Fsrc%2Fmain%2Fjava%2Fcom%2Fexample%2Fandroiddemo%2Fipc%2FIPCActivity.java",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const a=t("ExternalLinkIcon");return p(),c("div",null,[u,n("p",null,[s("下篇将重点分析四大组件的框架。 "),n("a",d,[s("完整代码演示"),o(a)])])])}const b=e(l,[["render",r],["__file","Android-IPC-zhifuwuduanhuidiao.html.vue"]]);export{b as default};
