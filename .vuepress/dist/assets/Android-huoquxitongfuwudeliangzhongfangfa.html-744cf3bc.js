import{_ as a,o as n,c as e,a as s}from"./app-f541e591.js";const t={},c=s(`<h2 id="_1-通过context获取代理对象" tabindex="-1"><a class="header-anchor" href="#_1-通过context获取代理对象" aria-hidden="true">#</a> 1.通过Context获取代理对象</h2><p>获取DreamManager对象的这两种方式有以下区别:1. 通过Context获取的是DreamManager的代理对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DreamManager</span> dreamManager <span class="token operator">=</span> mApplication<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">DreamManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种方式是通过Context的getSystemService()获取DreamManager。由于DreamManager本身是一个接口,Context返回的是其代理对象StubDreamManager,用于跨进程调用真正的DreamManager服务。</p><h2 id="_2-通过servicemanager获取的是aidl接口对象" tabindex="-1"><a class="header-anchor" href="#_2-通过servicemanager获取的是aidl接口对象" aria-hidden="true">#</a> 2. 通过ServiceManager获取的是AIDL接口对象</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">IDreamManager</span> iDreamManager <span class="token operator">=</span> <span class="token class-name">IDreamManager<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span><span class="token class-name">ServiceManager</span><span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token class-name">DreamService</span><span class="token punctuation">.</span><span class="token constant">DREAM_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种方式是通过ServiceManager直接获取DreamService的Binder接口对象。IDreamManager.Stub是DreamService的AIDL接口,asInterface()可以将Binder对象转成接口对象。</p><h2 id="_3-两种方式的区别" tabindex="-1"><a class="header-anchor" href="#_3-两种方式的区别" aria-hidden="true">#</a> 3.两种方式的区别</h2><p>第一种方式获取的是本地代理,可以直接调用接口方法。第二种方式获取的是远程接口,需要跨进程调用。</p><p>第一种方式依赖Context,需要先获取Context。第二种方式直接通过ServiceManager获取Binder接口。</p><p>一般来说,在客户端通过Context获取DreamManager较为常见。在服务端获取DreamService接口则更灵活。所以这两种方式获取的对象不同,适合的使用场景也不同,一般取决于是否需要跨进程和是否有Context。</p>`,11),r=[c];function o(p,i){return n(),e("div",null,r)}const u=a(t,[["render",o],["__file","Android-huoquxitongfuwudeliangzhongfangfa.html.vue"]]);export{u as default};
