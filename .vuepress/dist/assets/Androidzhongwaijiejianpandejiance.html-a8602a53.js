import{_ as n,o as s,c as a,a as e}from"./app-e8f85126.js";const t={},p=e(`<p>今天来了一个问题：软键盘无法弹出。分析后是因为系统判断当前有外接硬键盘，就会隐藏软键盘。但实际情况并不是这么简单，该问题只有在特定条件下偶现，具体分析过程就不说了，就是软硬键盘支持上的逻辑问题。借着这个机会整理一下键盘检测的过程。</p><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><p>Android系统中通过读取Configuration中keyboard的值来判断是否存在外接键盘。Configuration中关于键盘类型的定义如下，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEYBOARD_UNDEFINED</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 未定义的键盘</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEYBOARD_NOKEYS</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 无键键盘，没有外接键盘时为该类型</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEYBOARD_QWERTY</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 标准外接键盘</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEYBOARD_12KEY</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 12键小键盘</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在最常见的情况下，外接键盘未连接时keyboard的值为<code>KEYBOARD_NOKEYS</code>，当检测到键盘连接后会将keyboard的值更新为<code>KEYBOARD_QWERTY</code> 。应用就可以根据keyboard的值来判断是否存在外接键盘，InputMethodService.java中有类似的判断代码。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 软件盘是否可以显示</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onEvaluateInputViewShown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Configuration</span> config <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> config<span class="token punctuation">.</span>keyboard <span class="token operator">==</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">KEYBOARD_NOKEYS</span>
                <span class="token operator">||</span> config<span class="token punctuation">.</span>hardKeyboardHidden <span class="token operator">==</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">HARDKEYBOARDHIDDEN_YES</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在的问题就转向Configuration的keyboard是如何更新的。在WindowManagerService.java中，应用启动时会更新Configuration，相关代码如下。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">boolean</span> <span class="token function">computeScreenConfigurationLocked</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>config <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Update the configuration based on available input devices, lid switch,</span>
            <span class="token comment">// and platform configuration.</span>
            config<span class="token punctuation">.</span>touchscreen <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">TOUCHSCREEN_NOTOUCH</span><span class="token punctuation">;</span>
            <span class="token comment">// 默认值为KEYBOARD_NOKEYS</span>
            config<span class="token punctuation">.</span>keyboard <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">KEYBOARD_NOKEYS</span><span class="token punctuation">;</span>
            config<span class="token punctuation">.</span>navigation <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">NAVIGATION_NONAV</span><span class="token punctuation">;</span>
            
            <span class="token keyword">int</span> keyboardPresence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> navigationPresence <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">InputDevice</span><span class="token punctuation">[</span><span class="token punctuation">]</span> devices <span class="token operator">=</span> mInputManager<span class="token punctuation">.</span><span class="token function">getInputDevices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> len <span class="token operator">=</span> devices<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token comment">// 遍历输入设备</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">InputDevice</span> device <span class="token operator">=</span> devices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果不是虚拟输入设备，会根据输入设备的flags来更新Configuration</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>device<span class="token punctuation">.</span><span class="token function">isVirtual</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                    <span class="token comment">// 如果输入设备的键盘类型为KEYBOARD_TYPE_ALPHABETIC，则将keyboard设置为KEYBOARD_QWERTY</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>device<span class="token punctuation">.</span><span class="token function">getKeyboardType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">InputDevice</span><span class="token punctuation">.</span><span class="token constant">KEYBOARD_TYPE_ALPHABETIC</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        config<span class="token punctuation">.</span>keyboard <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">KEYBOARD_QWERTY</span><span class="token punctuation">;</span>
                        keyboardPresence <span class="token operator">|=</span> presenceFlag<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token comment">// Determine whether a hard keyboard is available and enabled.</span>
            <span class="token keyword">boolean</span> hardKeyboardAvailable <span class="token operator">=</span> config<span class="token punctuation">.</span>keyboard <span class="token operator">!=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">KEYBOARD_NOKEYS</span><span class="token punctuation">;</span>
            <span class="token comment">// 更新硬件键盘状态</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>hardKeyboardAvailable <span class="token operator">!=</span> mHardKeyboardAvailable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mHardKeyboardAvailable <span class="token operator">=</span> hardKeyboardAvailable<span class="token punctuation">;</span>
                mH<span class="token punctuation">.</span><span class="token function">removeMessages</span><span class="token punctuation">(</span><span class="token class-name">H</span><span class="token punctuation">.</span><span class="token constant">REPORT_HARD_KEYBOARD_STATUS_CHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                mH<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span><span class="token class-name">H</span><span class="token punctuation">.</span><span class="token constant">REPORT_HARD_KEYBOARD_STATUS_CHANGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 如果Setting中SHOW_IME_WITH_HARD_KEYBOARD被设置，将keyboard设置为KEYBOARD_NOKEYS，让软件盘可以显示</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mShowImeWithHardKeyboard<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                config<span class="token punctuation">.</span>keyboard <span class="token operator">=</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token constant">KEYBOARD_NOKEYS</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>影响Configuration中keyboard的值有，</p><ul><li>默认值为<code>KEYBOARD_NOKEYS</code>，表示没有外接键盘。</li><li>当输入设备为<code>KEYBOARD_TYPE_ALPHABETIC</code>时，更新为<code>KEYBOARD_QWERTY</code>，一个标准键盘。</li><li>当<code>Settings.Secure.SHOW_IME_WITH_HARD_KEYBOARD</code>为1时，设置为<code>KEYBOARD_NOKEYS</code>，目的是让软键盘可以显示。</li></ul><h2 id="inputflinger" tabindex="-1"><a class="header-anchor" href="#inputflinger" aria-hidden="true">#</a> inputflinger</h2><p>接下来需要关注输入设备时何时被设置KEYBOARD_TYPE_ALPHABETIC的。搜索代码可以看到，这个flag实在native代码中设置的，代码在<code>inputflinger/InputReader.cpp</code>中。native和java使用了同一定义值，如果修改定义时需要注意同时修改。native中的名字为<code>AINPUT_KEYBOARD_TYPE_ALPHABETIC</code>。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>InputDevice* InputReader::createDeviceLocked(int32_t deviceId, int32_t controllerNumber,
        const InputDeviceIdentifier&amp; identifier, uint32_t classes) {
    InputDevice* device = new InputDevice(&amp;mContext, deviceId, bumpGenerationLocked(),
            controllerNumber, identifier, classes);
    ......
    if (classes &amp; INPUT_DEVICE_CLASS_ALPHAKEY) {
        keyboardType = AINPUT_KEYBOARD_TYPE_ALPHABETIC;
    }
    ......
    return device;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>InputReader在增加设备时，根据classes的flag来设置键盘类型。这个flag又是在EventHub.cpp中设置的。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>status_t EventHub::openDeviceLocked(const char *devicePath) {
    ......
    // Configure the keyboard, gamepad or virtual keyboard.
    if (device-&gt;classes &amp; INPUT_DEVICE_CLASS_KEYBOARD) { 
        // &#39;Q&#39; key support = cheap test of whether this is an alpha-capable kbd
        if (hasKeycodeLocked(device, AKEYCODE_Q)) {
            device-&gt;classes |= INPUT_DEVICE_CLASS_ALPHAKEY;
        }
    ......
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这里就比较明确了，在EventHub加载设备时，如果输入设备为键盘，并且带有&#39;Q&#39;键，就认为这是一个标准的外接键盘。但为何判断&#39;Q&#39;键还不是很清楚。</p><h2 id="keylayout" tabindex="-1"><a class="header-anchor" href="#keylayout" aria-hidden="true">#</a> keylayout</h2><p>上面说道通过&#39;Q&#39;键来判断是否为外接键盘，这个&#39;Q&#39;键是Android的键值，键值是否存在是通过一个keylayout文件决定的。kl文件存储在目标系统的<code>/system/usr/keylayout/</code>下，系统可以有多个kl文件，根据设备的ID来命名。当系统加载键盘设备时，就会根据设备的Vendor ID和Product ID在<code>/system/usr/keylayout/</code>下寻找kl文件。例如一个kl文件名为<code>Vendor_0c45_Product_1109.kl，</code>表明设备的Vendor ID为0c45，Product ID为1109。一个kl的内容示例如下，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>key <span class="token number">1</span>     <span class="token constant">BACK</span>
key <span class="token number">28</span>    <span class="token constant">DPAD_CENTER</span>
key <span class="token number">102</span>   <span class="token constant">HOME</span>

key <span class="token number">103</span>   <span class="token constant">DPAD_UP</span>
key <span class="token number">105</span>   <span class="token constant">DPAD_LEFT</span>
key <span class="token number">106</span>   <span class="token constant">DPAD_RIGHT</span>
key <span class="token number">108</span>   <span class="token constant">DPAD_DOWN</span>

key <span class="token number">113</span>   <span class="token constant">VOLUME_MUTE</span>
key <span class="token number">114</span>   <span class="token constant">VOLUME_DOWN</span>
key <span class="token number">115</span>   <span class="token constant">VOLUME_UP</span>

key <span class="token number">142</span>   <span class="token constant">POWER</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>键值映射需要使用关键之”key“进行声明，之后跟着的数字为Linux驱动中的键值定义，再后面的字符串是Android中按键的名称。&#39;Q&#39;键是否存在完全取决于kl文件中是否有映射，而不是实际物理键是否存在。kl文件的查找也是有一个规则的，其查找顺序如下，</p><blockquote><p>/system/usr/keylayout/Vendor_XXXX_Product_XXXX_Version_XXXX.kl</p><p>/system/usr/keylayout/Vendor_XXXX_Product_XXXX.kl</p><p>/system/usr/keylayout/DEVICE_NAME.kl</p><p>/data/system/devices/keylayout/Vendor_XXXX_Product_XXXX_Version_XXXX.kl</p><p>/data/system/devices/keylayout/Vendor_XXXX_Product_XXXX.kl</p><p>/data/system/devices/keylayout/DEVICE_NAME.kl</p><p>/system/usr/keylayout/Generic.kl</p><p>/data/system/devices/keylayout/Generic.kl</p></blockquote><h2 id="同时支持软硬键盘" tabindex="-1"><a class="header-anchor" href="#同时支持软硬键盘" aria-hidden="true">#</a> 同时支持软硬键盘</h2><p>有了上面的知识，就可以给出同时支持软硬键盘的方案。</p><ul><li>修改源码逻辑，设置Configuration中keyboard的值为<code>KEYBOARD_NOKEYS</code>。这种Hack其实不好，破坏原生逻辑，缺乏移植性。非要这样改的话，可以增加对设备的判断，只有特定的键盘设备设置为<code>KEYBOARD_NOKEYS</code>，减少副作用。</li><li>修改keylayout，去掉&#39;Q&#39;键映射。有时kl文件写的不标准，为了通用把所有键的映射都写上了，实际硬件键却很少，我们就是这种情况。应该按照真实硬件来编写kl文件。</li><li>设置<code>Settings.Secure.SHOW_IME_WITH_HARD_KEYBOARD</code>为1。我认为这是最标准的修改方式，也非常方便。</li></ul><p>关于第三个方案的修改方式有两种，一种是修改缺省的setting值，在文件<code>frameworks/base/packages/SettingsProvider/res/values/defaults.xml</code>中增加，</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>integer</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>def_show_ime_with_hard_keyboard<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>integer</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另一种方式是在系统启动时在代码中通过接口进行设置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Settings<span class="token punctuation">.</span>Secure</span><span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Settings<span class="token punctuation">.</span>Secure</span><span class="token punctuation">.</span><span class="token constant">SHOW_IME_WITH_HARD_KEYBOARD</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>参考链接https://segmentfault.com/a/1190000021080958</p>`,29),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Androidzhongwaijiejianpandejiance.html.vue"]]);export{d as default};
