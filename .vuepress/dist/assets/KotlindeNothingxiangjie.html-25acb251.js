import{_ as e,r as o,o as t,c as p,b as s,d as n,e as l,a as c}from"./app-e8f85126.js";const i={},r=c(`<h2 id="文案原稿" tabindex="-1"><a class="header-anchor" href="#文案原稿" aria-hidden="true">#</a> 文案原稿</h2><p>Kotlin 的 <code>Nothing</code> 类，无法创建出任何实例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">class</span> Nothing <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以所有 <code>Nothing</code> 类型的变量或者函数，都找不到可用的值：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> nothing<span class="token operator">:</span> Nothing <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>
<span class="token keyword">fun</span> <span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Nothing <span class="token punctuation">{</span>
  <span class="token operator">..</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就这么简单。但——它有啥用啊？</p><h2 id="nothing-的本质" tabindex="-1"><a class="header-anchor" href="#nothing-的本质" aria-hidden="true">#</a> <code>Nothing</code> 的本质</h2><p><code>Nothing</code> 的源码很简单：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">class</span> Nothing <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以看到它本身虽然是 <code>public</code> 的，但它的构造函数是 <code>private</code> 的，这就导致我们没法创建它的实例；而且它不像 <code>Unit</code> 那样是个 <code>object</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">object</span> Unit <span class="token punctuation">{</span>
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;kotlin.Unit&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而是个普通的 <code>class</code>；并且在源码里 Kotlin 也没有帮我们创建它的实例。</p><p>这些条件加起来，结果就是：<code>Nothing</code> 这个类既没有、也不会有任何的实例对象。</p><p>基于这样的前提，当我们写出这个函数声明的时候：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Nothing <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们不可能找到一个合适的值来返回。你必须返回一个值，但却永远找不到合适的返回值。悖论了。</p><h2 id="作用一-作为函数「永不返回」的提示" tabindex="-1"><a class="header-anchor" href="#作用一-作为函数「永不返回」的提示" aria-hidden="true">#</a> 作用一：作为函数「永不返回」的提示</h2><p>怎么办？</p><p>不怎么办。这个悖论，就是 <code>Nothing</code> 存在的意义：它找不到任何可用的值，所以，以它为返回值类型的一定是个不会返回的函数，比如——它可以总是抛异常。<br> 什么意思？就是说，我这么写是可以的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Nothing <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token function">RuntimeException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Nothing!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个写法并没有返回任何结果，而是抛异常了，所以是合法的。</p><p>可能有的人会觉得有问题：抛异常就可以为所欲为吗？抛异常就可以忽略返回值了吗？——啊对，抛异常就是可以忽略返回值，而且这不是 <code>Nothing</code> 的特性，而是本来就是这样，而且你本来就知道，只是到这里的时候，你可能会忘了。</p><p>例如这个写法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> String <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nameValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nameValue
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;nameValue 不能为空！&quot;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>——其实这个函数可以有更加简洁的写法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> nameValue <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;nameValue 不能为空！&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过我们为了方便讲解，就不简化了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> String <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nameValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> nameValue
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;nameValue 不能为空！&quot;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个函数里，一个 <code>if</code> 判断，<code>true</code> 就返回，<code>false</code> 就抛异常，这个写法很常见吧？它在 <code>else</code> 的这个分支，是不是就只抛异常而不返回值了？实际上 Java 和 Kotlin 的任何方法或者说函数，在抛异常的时候都是不返回值的——你都抛异常的还返回啥呀返回？是吧？</p><p>所以我如果改成这样：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> String <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;不能为空！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实也是可以的。只是看起来比较奇怪罢了，会让人觉得「怎么会这么写呢」？但它的写法本身是完全合法的。而且如果我把函数的名字改一下，再加个注释：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 当遇到姓名为空的时候，请调用这个函数来抛异常
*/</span>
<span class="token keyword">fun</span> <span class="token function">throwOnNameNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> String <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;姓名不能为空！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就很合理了吧？不干别的，就只是抛异常。这是一种很常用的工具函数的写法，包括 Kotlin 和 Compose 的官方源码里也有这种东西。</p><p>那么我们继续来看它的返回值类型：我都不返回了，就没必要还写 <code>String</code> 了吧？那写什么？可以把它改成 <code>Unit</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 当任何变量为空的时候，请统一调用这个函数来抛异常
*/</span>
<span class="token keyword">fun</span> <span class="token function">throwOnNameNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Unit <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;姓名不能为空！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有问题吗？没问题。</p><p>不过，Kotlin 又进了一步，提供了一个额外的选项：你还可以把它改成 <code>Nothing</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 当任何变量为空的时候，请统一调用这个函数来抛异常
*/</span>
<span class="token keyword">fun</span> <span class="token function">throwOnNameNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> Nothing <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;姓名不能为空！&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我找不到 <code>Nothing</code> 的实例，但是这个函数本来就是永远抛异常的，找不到实例也没关系。哎，这不就能用了吗？对吧？</p><p>不过，能用归能用，这么写有啥意义啊？是吧？价值在哪？——价值就在于，<code>Nothing</code> 这个返回值类型能够给使用它的开发者一个明确的提示：这是个永远不会返回的函数。这种提示本身，就会给开发提供一些方便，它能很好地避免函数的调用者对函数的误解而导致的一些问题。我们从 Java 过来的人可能第一时间不太能感受到这种东西的用处，其实你要真说它作用有多大吧，我觉得不算大，主要是很方便。它是属于「你没有的话也不觉得有什么不好的，但是有了之后就再也不想没有它」的那种小方便。就跟 120Hz 的屏幕刷新率有点像，多少带点毒。</p><p>Kotlin 的源码、Compose 的源码里都有不少这样的实践，比如 Compose 的 <code>noLocalProviderFor()</code> 函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">noLocalProvidedFor</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Nothing <span class="token punctuation">{</span>
  <span class="token function">error</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;CompositionLocal </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string"> not present&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好，这就是 Nothing 的作用之一：作为函数的返回值类型，来明确表达「这是个永不返回的函数」。</p><p>其实 <code>Nothing</code> 的「永不返回」除了抛异常之外，还有一种场景，就是无限循环：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">foreverRepeat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Nothing <span class="token punctuation">{</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过一般很少有人这么去用，大部分都是用在我刚才说的抛异常的场景，这是非常常见的一种用法，你写业务可能用不到，但是基础架构团队给全公司写框架或者对外写 SDK 的话，用到它的概率就非常大了。</p><h2 id="作用二-作为泛型对象的临时空白填充" tabindex="-1"><a class="header-anchor" href="#作用二-作为泛型对象的临时空白填充" aria-hidden="true">#</a> 作用二：作为泛型对象的临时空白填充</h2><p>另外 <code>Nothing</code> 除了「没有可用的实例」之外，还有个特性：它是所有类型共同的子类型。这其实是违反了 Kotlin 的「类不允许多重继承」的规定的，但是 Kotlin 强行扩充了规则：<code>Nothing</code> 除外，它不受这个规则的约束。虽然这违反了「类不允许多重继承」，但因为 <code>Nothing</code> 不存在实例对象，所以它的多重继承是不会带来实际的风险的。——我以前还跟人说「<code>Nothing</code> 是所有类型的子类型」这种说法是错误的，惭愧惭愧，是我说错了。</p><p>不过，这个特性又有什么作用呢？它就能让你对于任何变量的赋值，都可以在等号右边写一个 <code>Nothing</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> nothing<span class="token operator">:</span> Nothing <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> apple<span class="token operator">:</span> Apple <span class="token operator">=</span> nothing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这儿其实有个问题：我刚说了 <code>Nothing</code> 不会有任何的实例，对吧？那么这个右边就算能填 <code>Nothing</code> 类型的对象，可是这个对象我用谁啊？</p><div class="language-ko line-numbers-mode" data-ext="ko"><pre class="language-ko"><code>val nothing: Nothing = ???
var apple: Apple = nothing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>谁也没法用。</p><p>但是我如果不直接用 <code>Nothing</code>，而是把它作为泛型类型的实例化参数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> emptyList<span class="token operator">:</span> List<span class="token operator">&lt;</span>Nothing<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token operator">?</span><span class="token operator">?</span><span class="token operator">?</span>
<span class="token keyword">var</span> apples<span class="token operator">:</span> List<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyList
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就可以写了。一个元素类型为<code>Nothing</code> 的 <code>List</code>，将会导致我无法找到任何的元素实例来填充进去，但是这个 <code>List</code> 本身是可以被创建的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> emptyList<span class="token operator">:</span> List<span class="token operator">&lt;</span>Nothing<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> apples<span class="token operator">:</span> List<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyList
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>只不过这种写法看起来好像有点废，因为它永远都只能是一个空的 <code>List</code>。但是，如果结合上我们刚说的「<code>Nothing</code> 是所有类型的子类型」这个特性，我们是不是可以把这个空的 <code>List</code> 赋值给任何的 <code>List</code> 变量？</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> emptyList<span class="token operator">:</span> List<span class="token operator">&lt;</span>Nothing<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> apples<span class="token operator">:</span> List<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyList
<span class="token keyword">var</span> users<span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyList
<span class="token keyword">var</span> phones<span class="token operator">:</span> List<span class="token operator">&lt;</span>Phone<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyList
<span class="token keyword">var</span> images<span class="token operator">:</span> List<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyList
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，是不是就提供了一个通用的空 <code>List</code> 出来，让这一个对象可以用于所有 <code>List</code> 的初始化？有什么好处？既省事，又省内存，这就是好处。</p><p>这种用法不只可以用在 <code>List</code>，<code>Set</code> 和 <code>Map</code> 也都没问题：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> emptySet<span class="token operator">:</span> Set<span class="token operator">&lt;</span>Nothing<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">setOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> apples<span class="token operator">:</span> Set<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span> <span class="token operator">=</span> emptySet
<span class="token keyword">var</span> users<span class="token operator">:</span> Set<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> emptySet
<span class="token keyword">var</span> phones<span class="token operator">:</span> Set<span class="token operator">&lt;</span>Phone<span class="token operator">&gt;</span> <span class="token operator">=</span> emptySet
<span class="token keyword">var</span> images<span class="token operator">:</span> Set<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span> <span class="token operator">=</span> emptySet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> emptyMap<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Nothing<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> apples<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Apple<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyMap
<span class="token keyword">var</span> users<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyMap
<span class="token keyword">var</span> phones<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Phone<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyMap
<span class="token keyword">var</span> images<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Image<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyMap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而且也不限于集合类型，只要是泛型都可以，你自定义的也行：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> emptyProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>Nothing<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> appleProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyProducer
<span class="token keyword">var</span> userProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyProducer
<span class="token keyword">var</span> phoneProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>Phone<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyProducer
<span class="token keyword">var</span> imageProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyProducer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的核心在于，你利用 <code>Nothing</code> 可以创建出一个通用的「空白」对象，它什么实质内容也没有，什么实质工作也做不了，但可以用来作为泛型变量的一个通用的空白占位值。这就是 <code>Nothing</code> 的第二个主要用处：作为泛型变量的通用的、空白的临时填充。多说一句：这种空白的填充一定是临时的才有意义，你如果去观察一下就会发现，这种用法通常都是赋值给 <code>var</code> 属性，而不会赋值给 <code>val</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> emptyProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>Nothing<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 没人这么写：</span>
<span class="token keyword">val</span> appleProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyProducer
<span class="token keyword">val</span> userProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyProducer
<span class="token keyword">val</span> phoneProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>Phone<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyProducer
<span class="token keyword">val</span> imageProducer<span class="token operator">:</span> Producer<span class="token operator">&lt;</span>Image<span class="token operator">&gt;</span> <span class="token operator">=</span> emptyProducer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为赋值给 <code>val</code> 那就是永久的「空白」了，永久的空白那不叫空白，叫废柴，这个变量就没意义了。</p><h2 id="作用三-语法的完整化" tabindex="-1"><a class="header-anchor" href="#作用三-语法的完整化" aria-hidden="true">#</a> 作用三：语法的完整化</h2><p>另外，<code>Nothing</code> 的「是所有类型的子类型」这个特点，还帮助了 Kotlin 语法的完整化。在 Kotlin 的下层逻辑里，<code>throw</code> 这个关键字是有返回值的，它的返回值类型就是 <code>Nothing</code>。虽然说由于抛异常这件事已经跳出了程序的正常逻辑，所以 <code>throw</code> 返回不返回值、返回值类型是不是 <code>Nothing</code> 对于它本身都不重要，但它让这种写法成为了合法的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> nothing<span class="token operator">:</span> Nothing <span class="token operator">=</span> <span class="token keyword">throw</span> <span class="token function">RuntimeException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;抛异常！&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>并且因为 <code>Nothing</code> 是所有类型的子类型，所以我们这么写也行：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> nothing<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">throw</span> <span class="token function">RuntimeException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;抛异常！&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看起来没用是吧？如果我再把它改改，就有用了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> _name<span class="token operator">:</span>String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">val</span> name<span class="token operator">:</span>String <span class="token operator">=</span> _name <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;_name 在运行时不能为空！&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>throw 的返回值是 <code>Nothing</code>，我们就可以把它写在等号的右边，在语法层面假装成一个值来使用，但其实目的是在例外情况时抛异常。</p><p>Kotlin 里面有个 <code>TODO()</code> 函数对吧：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> someValue<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种写法不会报错，并不是 IDE 或者编译器做了特殊处理，而是因为 <code>TODO()</code> 的内部是一个 <code>throw</code>：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images07c03d49d7286.jpg" alt=""><code>TODO()</code> 返回的是 <code>Nothing</code>，是 <code>String</code> 的子类，怎么不能写了？完全合法！虽然 <code>throw</code> 不会真正地返回，但这让语法层面变得完全说得通了，这也是 <code>Nothing</code> 的价值所在。</p><p>除了 <code>throw</code> 之外，<code>return</code> 也是被规定为返回 <code>Nothing</code> 的一个关键字，所以我也可以这么写：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">sayMyName</span><span class="token punctuation">(</span>first<span class="token operator">:</span> String<span class="token punctuation">,</span> second<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;Walter&quot;</span></span> <span class="token operator">&amp;&amp;</span> second <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;White&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string-literal singleline"><span class="token string">&quot;Heisenberg&quot;</span></span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token comment">// 语法层面的返回值类型为 Nothing，赋值给 name</span>
  <span class="token punctuation">}</span>
  <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码也是可以简化的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">sayMyName</span><span class="token punctuation">(</span>first<span class="token operator">:</span> String<span class="token punctuation">,</span> second<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;Walter&quot;</span></span> <span class="token operator">&amp;&amp;</span> second <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;White&quot;</span></span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Heisenberg&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过同样，咱不是为了讲东西么，就不简化了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">sayMyName</span><span class="token punctuation">(</span>first<span class="token operator">:</span> String<span class="token punctuation">,</span> second<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;Walter&quot;</span></span> <span class="token operator">&amp;&amp;</span> second <span class="token operator">==</span> <span class="token string-literal singleline"><span class="token string">&quot;White&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token string-literal singleline"><span class="token string">&quot;Heisenberg&quot;</span></span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token comment">// 语法层面的返回值类型为 Nothing，赋值给 name</span>
  <span class="token punctuation">}</span>
  <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然直接强行解释为「<code>return</code> 想怎么写就怎么写」也是可以的，但 Kotlin 还是扩充了规则，规定 <code>return</code> 的返回值是 <code>Nothing</code>，让代码从语法层面就能得到解释。</p><p>这就是 <code>Nothing</code> 的最后一个作用：语法层面的完整化。</p>`,89),d={href:"https://rengwuxian.com/kotlin-nothing/",target:"_blank",rel:"noopener noreferrer"};function u(k,v){const a=o("ExternalLinkIcon");return t(),p("div",null,[r,s("p",null,[n("本文转自 "),s("a",d,[n("https://rengwuxian.com/kotlin-nothing/"),l(a)]),n("，如有侵权，请联系删除。")])])}const m=e(i,[["render",u],["__file","KotlindeNothingxiangjie.html.vue"]]);export{m as default};
