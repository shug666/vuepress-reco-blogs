import{_ as o,r as p,o as i,c,b as n,d as a,e,a as t}from"./app-e8f85126.js";const l={},r=t(`<h2 id="一、as编译不过的原因" tabindex="-1"><a class="header-anchor" href="#一、as编译不过的原因" aria-hidden="true">#</a> 一、AS编译不过的原因</h2><h3 id="具备全部api的framework-jar" tabindex="-1"><a class="header-anchor" href="#具备全部api的framework-jar" aria-hidden="true">#</a> 具备全部API的Framework.jar</h3><p>Android Studio编译都过不了，原因是虽然在系统层已经做了适配，但是Android Studio它的API还是根据google默认的API来进行编译，google怎么会知道你自己要新增什么方法。那么我们怎么办才能正常生成apk呢? 首先找到你的项目源码，</p><p>找到 <code>out\\target\\common\\obj\\JAVA_LIBRARIES\\framework_intermediates</code> 目录下的classes.jar文件，这个文件就是我们要的framework.jar包</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/image-20230106152648019.png" alt="image-20230106152648019"></p><p>其中，Android 11默认编译不会生成framework的classes.jar，需要在已经完整编译后，使用下面这条命令来编译生成对应的classes.jar。命令中javac-check 是指用javac编译 java文件或模块。make javac-check-framework 意思是用 javac 编译 framework 模块。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>make javac-check-framework
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令执行后可生成如下路径的jar包，改名为framework.jar或其他你喜欢的名字就可以用来导入AS工程</p><p>这个jar包才是可以供AS使用的，它有自己一定的大小，我这里是19M左右，因平台而异。</p><blockquote><p>而如果你天真的直接在out目录下搜索framework.jar也是可以搜到的，但是这些jar包都是不起作用的，我刚开始在网上搜一些资料，大部分没有点名这个问题，导致自己也走了很多的弯路，这些jar包都是几kb左右，所以大家一定要找对文件（一定是有大小的，而不是几kb），不要走这样的弯路。</p></blockquote><h2 id="二、替换sdk下的android-jar" tabindex="-1"><a class="header-anchor" href="#二、替换sdk下的android-jar" aria-hidden="true">#</a> 二、替换SDK下的android.jar</h2><p>备份原有的android.jar，替换新的jar</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/2737084-20220517114518803-154205959.png" alt="img"></p><h3 id="_1、从安卓设备拿到framework-jar包" tabindex="-1"><a class="header-anchor" href="#_1、从安卓设备拿到framework-jar包" aria-hidden="true">#</a> 1、从安卓设备拿到framework.jar包</h3><ol><li>确认目标平台（手机/模拟器）</li><li>下载jar（adb pull /system/framework/framework.jar）</li><li>获取framework-classes.zip（jar替换为zip，获取classes.dex，dex2jar将其转为classes.jar，重命名framework-classes.zip）</li><li>替换原android.jar（原android.jar站zip,解压，用3内容替换）</li></ol><h3 id="_2、网上下载已经编译好的android-jar包" tabindex="-1"><a class="header-anchor" href="#_2、网上下载已经编译好的android-jar包" aria-hidden="true">#</a> 2、网上下载已经编译好的android.jar包</h3>`,16),u={href:"https://so.csdn.net/so/search?q=%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE&spm=1001.2101.3001.7020",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/Reginer/aosp-android-jar",target:"_blank",rel:"noopener noreferrer"},k=t(`<h3 id="_3、源码生成android-jar" tabindex="-1"><a class="header-anchor" href="#_3、源码生成android-jar" aria-hidden="true">#</a> 3、源码生成android.jar</h3><p><strong>采用原生的SDK的android.jar和系统隐藏接口的jar包做一个合并操作，生成自定义的android.jar来编译</strong></p><ol><li>找到sdk目录对应的android.jar路径，如 ”platforms\\android-31“，把android.jar拷贝出来，并且解压到new_android_jar目录下</li><li>在编译好的aosp源码中，找到classes-header.jar，一般路径在 “out/target/common/obj/JAVA_LIBRARIES/framework_intermediates/class-header.jar”,同样解压到new_android_jar，覆盖同名的文件</li><li>文件合并之后，需要打包，&quot;jar cvf android.jar -C new_android_jar/ .&quot;,生成新的android.jar包</li><li>生成的android.jar覆盖原来的android.jar即可</li></ol><h2 id="三、其他模块的jar" tabindex="-1"><a class="header-anchor" href="#三、其他模块的jar" aria-hidden="true">#</a> 三、其他模块的jar</h2><p>对于其他模块，对应的 jar 包生成路径是</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>out/target/common/obj/JAVA_LIBRARIES/xxx_intermediates/classes.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>xxx 就是对应的模块的名字，如 android-support-v7-recyclerview_intermediates 。</p><p>对于 app ，对应的 jar 包生成路径是</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>out/target/common/obj/APP/appname_intermediates/classes.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>app_name 就是 app 的名称，如 SystemUI_intermediates 。</p><h2 id="四、将framework-jar添加到as项目中" tabindex="-1"><a class="header-anchor" href="#四、将framework-jar添加到as项目中" aria-hidden="true">#</a> 四、将framework.jar添加到AS项目中</h2><p><strong>步骤一：拷贝framework.jar到模块的libs路径下</strong></p><p><strong>步骤二：在模块中的build.gradle中使用compileOnly引入framework.jar</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>compileOnly <span class="token function">files</span><span class="token punctuation">(</span>&#39;libs<span class="token operator">/</span>framework<span class="token punctuation">.</span>jar&#39;<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>如果使用的类为framework.jar中新定义的类，和SDK中原有不冲突，使用步骤一，步骤二即可，如和Android SDK中同名，会优先使用SDK中的类，framework.jar中的类不会优先使用，如果优先使用framework中的类，需要配置步骤三，步骤四。</p></blockquote><p><strong>步骤三：在模块中的build.gradle中配置如下，在Xbootclasspath(android节点)增加framework.jar</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>gradle<span class="token punctuation">.</span>projectsEvaluated <span class="token punctuation">{</span>
    tasks<span class="token punctuation">.</span><span class="token function">withType</span><span class="token punctuation">(</span><span class="token class-name">JavaCompile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> fileSet <span class="token operator">=</span> options<span class="token punctuation">.</span>bootstrapClasspath<span class="token punctuation">.</span><span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> newFileList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        newFileList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;libs/framework.jar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        newFileList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>fileSet<span class="token punctuation">)</span>
        options<span class="token punctuation">.</span>bootstrapClasspath <span class="token operator">=</span> <span class="token function">files</span><span class="token punctuation">(</span>newFileList<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者在项目根目录的build.gradle中配置如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>allprojects <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">jcenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//添加  其中app 根据你的module的名称进行替换， 后面的路径文件名都可以根据实际情况进行替换，但是开头的-Xbootclasspath/p:  这个是关键字</span>
    gradle<span class="token punctuation">.</span>projectsEvaluated <span class="token punctuation">{</span>
        tasks<span class="token punctuation">.</span><span class="token function">withType</span><span class="token punctuation">(</span><span class="token class-name">JavaCompile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            options<span class="token punctuation">.</span>compilerArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;-Xbootclasspath/p:\${rootProject.projectDir}/app/libs/framework.jar&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>步骤四：在模块中的build.gradle中配置如下（经测试，貌似非必需，可不添加此处代码），使得framework.jar优先于android.jar</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>preBuild <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token comment">// 注意：iml的路径要根据自己的实际情况来写</span>
        <span class="token comment">// def imlFile = &quot;\${rootProject.projectDir}/.idea/modules/\${project.name}/\${rootProject.name}.\${project.name}.iml&quot;</span>
        def imlFile <span class="token operator">=</span> <span class="token string">&quot;\${rootProject.projectDir}/.idea/modules/\${project.name}/\${rootProject.name}.\${project.name}.iml&quot;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            def parsedXml <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">XmlParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>imlFile<span class="token punctuation">)</span>
            def jdkNode <span class="token operator">=</span> parsedXml<span class="token punctuation">.</span>component<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>orderEntry<span class="token punctuation">.</span>find <span class="token punctuation">{</span> it<span class="token punctuation">.</span><span class="token char">&#39;@type&#39;</span> <span class="token operator">==</span> <span class="token char">&#39;jdk&#39;</span> <span class="token punctuation">}</span>
            parsedXml<span class="token punctuation">.</span>component<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>jdkNode<span class="token punctuation">)</span>
            def sdkString <span class="token operator">=</span> <span class="token string">&quot;Android API &quot;</span> <span class="token operator">+</span> android<span class="token punctuation">.</span>compileSdkVersion<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token string">&quot;android-&quot;</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; Platform&quot;</span>
            <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">groovy<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Node</span><span class="token punctuation">(</span>parsedXml<span class="token punctuation">.</span>component<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> &#39;orderEntry<span class="token char">&#39;, [&#39;</span>type<span class="token char">&#39;: &#39;</span>jdk<span class="token char">&#39;, &#39;</span>jdkName&#39;<span class="token operator">:</span> sdkString<span class="token punctuation">,</span> &#39;jdkType<span class="token char">&#39;: &#39;</span><span class="token class-name">Android</span> <span class="token constant">SDK</span>&#39;<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token class-name"><span class="token namespace">groovy<span class="token punctuation">.</span>xml<span class="token punctuation">.</span></span>XmlUtil</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>parsedXml<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>imlFile<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/image-20230106151541512.png" alt="image-20230106151541512"></p><p><strong>步骤五：编译运行</strong></p>`,23);function m(v,j){const s=p("ExternalLinkIcon");return i(),c("div",null,[r,n("p",null,[a("也可以直接是使用网上编译好的framework jar包，比如"),n("a",u,[a("开源项目"),e(s)]),n("a",d,[a("aosp-android-jar"),e(s)]),a("，对应找到自己需要的Android版本SDK下载导入即可。")]),k])}const h=o(l,[["render",m],["__file","wufazhijieshiyongxitongyincanglei、bianliang、jiekoudaozhidebianyicuowu.html.vue"]]);export{h as default};
