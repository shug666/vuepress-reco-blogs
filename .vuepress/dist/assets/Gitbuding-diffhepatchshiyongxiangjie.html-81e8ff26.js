import{_ as a,o as i,c as e,a as n}from"./app-f541e591.js";const t={},d=n(`<h2 id="patch-和diff-的区别" tabindex="-1"><a class="header-anchor" href="#patch-和diff-的区别" aria-hidden="true">#</a> patch 和diff 的区别</h2><p>Git 提供了两种补丁方案，一是用git diff生成的UNIX标准补丁.diff文件，二是git format-patch生成的Git专用.patch 文件。</p><ul><li>diff文件只是记录文件改变的内容，不带有commit记录信息,多个commit可以合并成一个diff文件。</li><li>patch文件带有记录文件改变的内容，也带有commit记录信息,每个commit对应一个patch文件。</li></ul><p><strong>在Git下，我们可以使用.diff文件也可以使用.patch 文件来打补丁，主要应用场景有：CodeReview、代码迁移等。</strong></p><h2 id="创建patch和diff" tabindex="-1"><a class="header-anchor" href="#创建patch和diff" aria-hidden="true">#</a> 创建patch和diff</h2><h3 id="创建patch-文件的常用命令行" tabindex="-1"><a class="header-anchor" href="#创建patch-文件的常用命令行" aria-hidden="true">#</a> 创建patch 文件的常用命令行</h3><ul><li><p>某个提交的patch：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> format-patch 【commit sha1 id】 <span class="token parameter variable">-1</span>

<span class="token comment">#例子：  </span>

<span class="token function">git</span> format-patch 2a2fb4539925bfa4a141fe492d9828d030f7c8a8 <span class="token parameter variable">-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>某次提交（含）之前的几次提交：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> format-patch 【commit sha1 id】-n

n指从sha1 id对应的commit开始算起n个提交。  

例子：  

<span class="token function">git</span> format-patch 2a2fb4539925bfa4a141fe492d9828d030f7c8a8 <span class="token parameter variable">-2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>某两次提交之间的所有patch:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> format-patch 【commit sha1 id】<span class="token punctuation">..</span>【commit sha1 id】

<span class="token comment">#例子：  </span>

<span class="token function">git</span> format-patch 2a2fb4539925bfa4a141fe492d9828d030f7c8a8<span class="token punctuation">..</span>89aebfcc73bdac8054be1a242598610d8ed5f3c8
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="创建diff文件的常用方法" tabindex="-1"><a class="header-anchor" href="#创建diff文件的常用方法" aria-hidden="true">#</a> 创建diff文件的常用方法</h3><p><strong>使用命令行</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span> 【commit sha1 id】 【commit sha1 id】 <span class="token operator">&gt;</span> 【diff文件名】  

<span class="token comment">#例子：  </span>

<span class="token function">git</span> <span class="token function">diff</span> 2a2fb4539925bfa4a141fe492d9828d030f7c8a8 89aebfcc73bdac8054be1a242598610d8ed5f3c8 <span class="token operator">&gt;</span> patch.diff
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用patch-和-diff" tabindex="-1"><a class="header-anchor" href="#应用patch-和-diff" aria-hidden="true">#</a> 应用patch 和 diff</h2><h3 id="_1-检查-patch-diff-文件" tabindex="-1"><a class="header-anchor" href="#_1-检查-patch-diff-文件" aria-hidden="true">#</a> 1. 检查 patch/diff 文件：</h3><blockquote><p>git apply --stat xxx.patch</p></blockquote><h3 id="_2-检查patch-diff是否能正常打入" tabindex="-1"><a class="header-anchor" href="#_2-检查patch-diff是否能正常打入" aria-hidden="true">#</a> 2.检查patch/diff是否能正常打入:</h3><blockquote><p><code>git apply --check 【path/to/xxx.patch】</code></p><p><code>git apply --check 【path/to/xxx.diff】</code></p></blockquote><h3 id="_3-打入patch-diff" tabindex="-1"><a class="header-anchor" href="#_3-打入patch-diff" aria-hidden="true">#</a> 3.打入patch/diff:</h3><blockquote><p><code>git apply 【path/to/xxx.patch】</code></p><p><code>git apply 【path/to/xxx.diff】</code></p><p>或者</p><p><code>git am 【path/to/xxx.patch】</code></p></blockquote><h2 id="冲突解决" tabindex="-1"><a class="header-anchor" href="#冲突解决" aria-hidden="true">#</a> 冲突解决</h2><ol><li><p>执行命令 <code>git am xxxx.patch</code> 尝试直接打入补丁。因为我们使用的 patch 已经过时了，所以这一步肯定会报错并中断（注意，虽然命令停止执行了，但我们依然处于git am命令的运行环境中，可以通过git status命令查看到当前的状态）。</p></li><li><p>执行命令 <code>git apply --reject xxxx.patch</code> 自动合入 patch 中不冲突的代码改动，同时保留冲突的部分。这些存在冲突的改动内容会被单独存储到目标源文件的相应目录下，以后缀为 .rej 的文件进行保存。比如对 ./test/someDeviceDriver.c 文件中的某些行合入代码改动失败，则会将这些发生冲突的行数及内容都保存在 ./test/someDeviceDriver.c.rej 文件中。我们可以在执行 git am 命令的目录下执行 find -name *.rej 命令以查看所有存在冲突的源文件位置。</p></li><li><p>依据 步骤2 中生成的 *.rej 文件内容逐个手动解决冲突，然后删除这些 *.rej 文件。完成这一步骤的操作后，我们就可以继续执行 git am 的过程了。</p></li><li><p>执行命令 <code>git status</code> 查看当前改动过的以及新增的文件，确保没有多添加或少添加文件。</p></li><li><p>执行命令 git add . 将所有改动都添加到暂存区（注意，关键字add后有一个小数点 . 作为参数，表示当前路径）。</p></li><li><p>执行命令 <code>git am --resolved</code> 或<code>git am --continue</code>继续 步骤1 中被中断的 patch 合入操作。合入完成后，会有提示信息输出。可以执行git am --skip跳过此次冲突，也可以执行git am --abort回退打入patch的动作，还原到操作前的状态。</p></li><li><p>执行命令 <code>git log</code> 确认合入状态。</p></li></ol><h2 id="包含二进制文件时的diff和apply" tabindex="-1"><a class="header-anchor" href="#包含二进制文件时的diff和apply" aria-hidden="true">#</a> 包含二进制文件时的diff和apply</h2><blockquote><p>git diff HEAD^..HEAD --binary &gt; foobar.patch</p></blockquote>`,21),s=[d];function c(p,l){return i(),e("div",null,s)}const h=a(t,[["render",c],["__file","Gitbuding-diffhepatchshiyongxiangjie.html.vue"]]);export{h as default};
