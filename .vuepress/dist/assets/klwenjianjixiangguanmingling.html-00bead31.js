import{_ as i,r,o as d,c as o,b as e,d as s,e as t,a}from"./app-52856ff7.js";const l={},g=e("p",null,[e("a",{"data-fancybox":"",title:"img",href:"https://raw.githubusercontent.com/shug666/image/main/images/20200724170459543.png"},[e("img",{src:"https://raw.githubusercontent.com/shug666/image/main/images/20200724170459543.png",alt:"img"})])],-1),c={href:"https://blog.csdn.net/weixin_43405104/article/details/107548539",target:"_blank",rel:"noopener noreferrer"},u=a(`<h2 id="kl文件" tabindex="-1"><a class="header-anchor" href="#kl文件" aria-hidden="true">#</a> kl文件</h2><p><strong>kl</strong>（<strong>key layout</strong>）文件是一个映射文件，是<strong>标准linux</strong>与<strong>anroid键值</strong>之间的映射文件。作用是将Linux scancode转换为Android keycode。scancode就是硬件直接扫描到的数字，而这些数字会通过这个kl文件对应到字符串，也就是keycode。设备可以拥有自己专属的kl文件。另外系统提供了一个特殊的内置常规按键布局文件，名为 Generic.kl。当找不到专属的kl时候就会用Generic.kl</p><p>Generic.kl文件在代码中的位置为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>./framewprk/base/data/keyboards/Generic.kl
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>kl文件</strong>可以有很多个，但是它有一个使用优先级：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/system/usr/keylayout/Vendor_XXXX_Product_XXXX_Version_XXXX.kl  
/system/usr/keylayout/Vendor_XXXX_Product_XXXX.kl  
/system/usr/keylayout/DEVICE_NAME.kl  
/data/system/devices/keylayout/Vendor_XXXX_Product_XXXX_Version_XXXX.kl  
/data/system/devices/keylayout/Vendor_XXXX_Product_XXXX.kl  
/data/system/devices/keylayout/DEVICE_NAME.kl  
/system/usr/keylayout/Generic.kl  
/data/system/devices/keylayout/Generic.kl 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>vendor id</strong>和<strong>product id</strong>。根据这两个<strong>id</strong>创建对应名称的<strong>kl</strong>文件，然后传入设备的对应目录，重启即可看到效果。</p><h3 id="kl文件命名含义" tabindex="-1"><a class="header-anchor" href="#kl文件命名含义" aria-hidden="true">#</a> kl文件命名含义</h3><p>kl文件在源码内的目录：<strong>\\RTD2853R\\kernel\\android\\R\\frameworks\\base\\data\\keyboards</strong></p><p><a data-fancybox title="img" href="https://cdn.jsdelivr.net/gh/shug666/image/images/4273129-2d321ecfed4b958d.png"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/4273129-2d321ecfed4b958d.png" alt="img"></a></p><p>目录下的<strong>kl文件</strong>非常多，这里以<strong>Vendor_0b05_Product_4500.kl</strong>为例：</p><p><strong>Vendor_0b05</strong> ：表示生产商代码是<strong>0b05</strong></p><p><strong>Product_4500</strong> ：表示产品型号为<strong>4500</strong></p><p>之后再跟输入设备的对应<strong>id</strong>进行匹配，就可以知道该<strong>kl文件</strong>所对应的设备。</p><h3 id="获得输入设备和按键信息" tabindex="-1"><a class="header-anchor" href="#获得输入设备和按键信息" aria-hidden="true">#</a> 获得输入设备和按键信息</h3><p>实际开发中我们可以通过<strong>getevent</strong>获取到输入设备的<strong>vendor id</strong>，<strong>product id</strong>和<strong>按键事件值</strong> 通过串口连接后输入<strong>getevent</strong></p><p><a data-fancybox title="image-20220820113829296" href="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220820113829296.png"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220820113829296.png" alt="image-20220820113829296"></a></p><p>以上的输出分为两个部分，上半部分代表当前设备上的输入设备，下面是点击按键后产生的输出。</p><p>可以看到遥控器按键对应的输入设备节点为 <strong>/dev/input/event0</strong> 。</p><p>之后通过<strong>getevent -i /dev/input/event0</strong>查看该设备的<strong>vendor id</strong>和<strong>product id</strong>。输出结果如下：</p><p><a data-fancybox title="img" href="https://cdn.jsdelivr.net/gh/shug666/image/images/4273129-ce87a37852c5c5d6.png"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/4273129-ce87a37852c5c5d6.png" alt="img"></a></p><p>此时我们就可以根据对应的<strong>vendor id</strong>和<strong>product id</strong>创建自己的<strong>kl文件</strong>，然后传入设备中验证，首先去源码对应的目录中找到对应的<strong>kl文件</strong>来增加按键映射，即<strong>Vendor_0416_Product_038f.kl</strong>文件，如果没有该文件，那么证明系统针对该设备的按键做特殊处理，之后就会根据上述所说的使用优先级去加载其他的<strong>kl文件</strong>。这里我们新建一个<strong>Vendor_0416_Product_038f.kl</strong>文件。然后根据分析的按键信息来往里面添加内容。</p><h3 id="按键信息分析" tabindex="-1"><a class="header-anchor" href="#按键信息分析" aria-hidden="true">#</a> 按键信息分析</h3><p><a data-fancybox title="image-20220820133509389" href="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220820133509389.png"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220820133509389.png" alt="image-20220820133509389"></a></p><p>我们每次按键会有四个输出，前两行为<strong>按下</strong>，后两行为<strong>抬起</strong>，<strong>0001</strong>指按键（也存在其他设备类型，这里我们不关心）</p><p><strong>0066</strong>是对应的<strong>十六进制按键值</strong>，这里就是<strong>驱动</strong>所设置的<strong>按键值</strong>，可以去找驱动提供头文件查看该值所对应的<strong>按键名称</strong>。</p><p>末尾的部分，<strong>00000001</strong>为按下，<strong>00000000</strong>为抬起。</p><p>在驱动提供的按键值input-event-codes.h头文件中，在文件内对应按键如下:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY_TESTCODE</span>                    <span class="token expression"><span class="token number">0x360</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后在我们默认的<strong>kl文件</strong>，即<strong>venus_IR_input.kl</strong>中找到<strong>0x360对应的10进制</strong>对应<strong>Android</strong>中的按键值如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>key 864     TESTCODE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里即将<strong>驱动</strong>上报的<strong>KEY_TESTCODE</strong>转成了<strong>Android</strong>的<strong>TESTCODE</strong>按键，<strong>Android</strong>对应的<strong>按键值列表头文件</strong>目录为：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/frameworks/native/include/android/keycodes.h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果我们要修改<strong>驱动层</strong>上报的按键在<strong>Android</strong>所对应的按键值，那么就可以在该头文件查找对应的按键，然后在<strong>kl文件</strong>进行配置。</p>`,34),v={href:"https://www.jianshu.com/p/1b0ae800b5bf",target:"_blank",rel:"noopener noreferrer"},p=a(`<p>shugan6766@gmail.com</p><h2 id="android调试常用命令" tabindex="-1"><a class="header-anchor" href="#android调试常用命令" aria-hidden="true">#</a> Android调试常用命令</h2><h3 id="input-命令" tabindex="-1"><a class="header-anchor" href="#input-命令" aria-hidden="true">#</a> input 命令</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>input keyevent KEYCODE_TESTCODE(或403)：可以向系统发送按键事件

input text&lt;String&gt;：可以接收字符串的UI 控件输入字符
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dumpsys命令" tabindex="-1"><a class="header-anchor" href="#dumpsys命令" aria-hidden="true">#</a> dumpsys命令</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>dumpsys input：可以查看输入设备情况,这个命令可以查看到输入设备映射到了哪一个kl文件

KeyLayoutFile: /vendor/usr/keylayout/venus_IR_input.kl

其他--------------------------
dumpsys window w | grep \\/ | grep name：获取当前apk包名；
dumpsys meminfo：显示当前进程的内存使用以及每个 adj（oom adjustment）可回收内存的情况。
dumpsys meminfo com.mstar.tv.service：显示某包的内存使用情况；
dumpsys activity：显示四大组件的一些正在运行和 历史的全局变量信息，比如stack中 的activity；
dumpsys activity top | grep activity：查看 当前界面是哪个activity；
dumpsys notification：查看当前几秒内弹出的toast，dialog具体由哪个apk弹出；
dumpsys | grep &quot;service&quot;：查看framework有哪些服务；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getevent命令" tabindex="-1"><a class="header-anchor" href="#getevent命令" aria-hidden="true">#</a> getevent命令</h3><p>查看输入设备/dev/input/event*是否有数据输入，查看键值，常用来调试遥控器</p><p>vendor 号和input name：<strong>可以通过cat /proc/bus/input/devices命令查看，当然getevent -p也可以查看</strong></p><h3 id="logcat命令" tabindex="-1"><a class="header-anchor" href="#logcat命令" aria-hidden="true">#</a> logcat命令</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>logcat -s &quot;tag&quot;

logcat -v threadtime -f /data/log.txt：后台抓log，带时间戳。

//过滤TAG为ActivityManager输出级别大于等于I的日志与TAG为MyApp输出级别大于D的日志
最后的元素 *:S ,，是设置所有的标 签为”silent”，所有日志只显示有”View” and “MyApp”的，用 *:S 的另一个用处是 能够确保日志输出的时候是按照过滤器的说明限制的，也让过滤器也作为一项输出到日志中.
logcat ActivityManager:I MyApp:D *:S
 
logcat  *:W     //显示优先级为warning或更高的日志信息

//只输出程序包名为“com.rexen.zxapplication”的日志
shell &quot;logcat | grep com.rexen.zxapplication&quot; &gt;D:\\android-sdk\\log\\log.txt      
 
logcat -d //将缓冲区的log打印到屏幕并退出
 
logcat -c //清除缓冲区log（testCase运行前可以先清除一下）
 
logcat -g //打印缓冲区大小并退出
 
logcat -f /data/local/tmp/log.txt -n 10 -r 1  //输出log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),m={href:"https://www.freesion.com/article/2898889036/",target:"_blank",rel:"noopener noreferrer"};function h(b,k){const n=r("ExternalLinkIcon");return d(),o("div",null,[g,e("p",null,[e("a",c,[s("参考链接"),t(n)])]),u,e("p",null,[e("a",v,[s("可参考Android 按键映射kl文件编写简析"),t(n)])]),p,e("p",null,[e("a",m,[s("最后可参考"),t(n)])])])}const x=i(l,[["render",h],["__file","klwenjianjixiangguanmingling.html.vue"]]);export{x as default};
