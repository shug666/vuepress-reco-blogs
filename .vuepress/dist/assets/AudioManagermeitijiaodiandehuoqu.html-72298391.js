import{_ as n,o as s,c as a,a as o}from"./app-ee4ba21e.js";const e={},i=o(`<p>Android是多任务系统，Audio系统是竞争资源。Android2.2之前，没有内建的机制来解决多个程序竞争Audio的问题，2.2引入了称作AudioFocus的机制来管理对Audio资源的竞争的管理与协调。</p><p><strong>按照AudioFocus的机制，在使用AudioStream之前，需要申请AudioFocus，在获得AudioFocus之后才可以使用相应的AudioStream；如果有别的程序竞争你正在使用的AudioStream，你的程序需要在收到通知之后做停止播放或者降低声音的处理。值得指出的是，这种机制是需要合作完成的，需要所有使用Audio资源的程序都按照这种机制来做，而如果有程序在它失去AudioFocus的时候仍然在使用Audio，AudioFocus拿它也没办法。而这一点对于开放系统的Android来说很致命的：用户可能安装没遵守这种机制的程序，或者版本太老还没引入这种机制的程序，这最终会导致很差的用户体验。</strong></p><h2 id="_1、audiofocus的申请与释放" tabindex="-1"><a class="header-anchor" href="#_1、audiofocus的申请与释放" aria-hidden="true">#</a> 1、AudioFocus的申请与释放</h2><p>​ 获取/放弃AudioFocus的方法都在android.media.AudioManager中，获取AudioFocus用requestAudioFocus()；用完之后，放弃AudioFocus，用abandonAudioFocus()。</p><p>其中，参数：</p><ul><li><p>**streamType：**播放流类型；</p></li><li><p>durationHint：</p><p>是持续性的指示：</p><ul><li><code>AUDIOFOCUS_GAIN</code> 指示申请得到的Audio Focus不知道会持续多久，一般是长期占有；</li><li><code>AUDIOFOCUS_GAIN_TRANSIENT </code>指示要申请的AudioFocus是暂时性的，会很快用完释放的；</li><li><code>AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK</code>不但说要申请的AudioFocus是暂时性的，还指示当前正在使用AudioFocus的可以继续播放，只是要“duck”一下（降低音量）。</li></ul></li><li><p><code>AudioManager.OnAudioFocusChangeListener</code> 是申请成功之后监听AudioFocus使用情况的Listener，后续如果有别的程序要竞争AudioFocus，都是通过这个Listener的<code>onAudioFocusChange()</code>方法来通知这个Audio Focus的使用者的。</p></li></ul><p>​ 返回值，可能是：</p><ul><li><code>AUDIOFOCUS_REQUEST_GRANTED</code>：申请成功；</li><li><code>AUDIOFOCUS_REQUEST_FAILED</code>：申请失败。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>AudioManager audioManager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
audioManager.requestAudioFocus(onAudioFocusChangeListener, AudioManager.STREAM_MUSIC, AudioManager.AUDIOFOCUS_GAIN);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、audiofocus被抢占与重新获得" tabindex="-1"><a class="header-anchor" href="#_2、audiofocus被抢占与重新获得" aria-hidden="true">#</a> 2、AudioFocus被抢占与重新获得</h2><p>​ 由上节中知道，申请/释放AudioFocus时传入了**<code>AudioManager.OnAudioFocusChangeListener</code>**这个参数，其onAudioFocusChange()方法是Audio Focus被抢占与再次获得通知的地方。所以，每个要使用AudioFocus的程序都要小心实现这个函数，保证AudioFocus实现的一致性。</p><ul><li><code>AUDIOFOCUS_LOSS</code>：失去了Audio Focus，并将会持续很长的时间。这里因为可能会停掉很长时间，所以不仅仅要停止Audio的播放，最好直接释放掉Media资源。而因为停止播放Audio的时间会很长，如果程序因为这个原因而失去AudioFocus，最好不要让它再次自动获得AudioFocus而继续播放，不然突然冒出来的声音会让用户感觉莫名其妙，感受很不好。这里直接放弃AudioFocus，当然也不用再侦听远程播放控制【如下面代码的处理】。要再次播放，除非用户再在界面上点击开始播放，才重新初始化Media，进行播放。</li><li><code>AUDIOFOCUS_LOSS_TRANSIENT</code>：暂时失去Audio Focus，并会很快再次获得。必须停止Audio的播放，但是因为可能会很快再次获得AudioFocus，这里可以不释放Media资源；</li><li><code>AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK</code>：暂时失去AudioFocus，但是可以继续播放，不过要在降低音量。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
     * 音频焦点监听
     */</span>
<span class="token keyword">private</span> <span class="token class-name">AudioManager<span class="token punctuation">.</span>OnAudioFocusChangeListener</span> onAudioFocusChangeListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudioManager<span class="token punctuation">.</span>OnAudioFocusChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAudioFocusChange</span><span class="token punctuation">(</span><span class="token keyword">int</span> focusChange<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>focusChange <span class="token operator">==</span> <span class="token class-name">AudioManager</span><span class="token punctuation">.</span><span class="token constant">AUDIOFOCUS_LOSS_TRANSIENT</span>  
            <span class="token comment">// Pause playback   </span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>focusChange <span class="token operator">==</span> <span class="token class-name">AudioManager</span><span class="token punctuation">.</span><span class="token constant">AUDIOFOCUS_LOSS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            am<span class="token punctuation">.</span><span class="token function">unregisterMediaButtonEventReceiver</span><span class="token punctuation">(</span><span class="token class-name">RemoteControlReceiver</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
            am<span class="token punctuation">.</span><span class="token function">abandonAudioFocus</span><span class="token punctuation">(</span>afChangeListener<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token comment">// Stop playback   </span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>focusChange <span class="token operator">==</span> <span class="token constant">AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment">// Lower the volume   </span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>focusChange <span class="token operator">==</span> <span class="token class-name">AudioManager</span><span class="token punctuation">.</span><span class="token constant">AUDIOFOCUS_GAIN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment">// Resume playback or Raise it back to normal   </span>
        <span class="token punctuation">}</span>  
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考连接官方api文档" tabindex="-1"><a class="header-anchor" href="#参考连接官方api文档" aria-hidden="true">#</a> 参考连接官方api文档</h2><p><strong>AudioManager文档中文翻译：https://www.itdaan.com/blog/2011/08/07/1674a0bd9fd7d2d4851cce0a77a3dfbe.html</strong></p>`,15),c=[i];function u(t,p){return s(),a("div",null,c)}const l=n(e,[["render",u],["__file","AudioManagermeitijiaodiandehuoqu.html.vue"]]);export{l as default};
