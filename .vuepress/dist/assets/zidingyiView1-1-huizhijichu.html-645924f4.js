import{_ as p,r as o,o as c,c as i,b as a,d as n,e as t,a as e}from"./app-e8f85126.js";const l={},u=e(`<h2 id="自定义绘制概述" tabindex="-1"><a class="header-anchor" href="#自定义绘制概述" aria-hidden="true">#</a> 自定义绘制概述</h2><ul><li>自定义绘制的方式是重写绘制方法，其中最常用的是 onDraw()</li><li>绘制的关键是 Canvas 的使用 <ul><li>Canvas 的绘制类方法： drawXXX() （关键参数：Paint）</li><li>Canvas 的辅助类方法：范围裁切和几何变换</li></ul></li><li>可以使用不同的绘制方法来控制遮盖关系</li></ul><h2 id="自定义绘制知识的四个级别" tabindex="-1"><a class="header-anchor" href="#自定义绘制知识的四个级别" aria-hidden="true">#</a> 自定义绘制知识的四个级别</h2><p>1.Canvas 的 drawXXX() 系列方法及 <code>Paint</code> 最常见的使用 <code>Canvas.drawXXX()</code> 是自定义绘制最基本的操作。掌握了这些方法，你才知道怎么绘制内容，例如怎么画圆、怎么画方、怎么画图像和文字。组合绘制这些内容，再配合上 <code>Paint</code> 的一些常见方法来对绘制内容的颜色和风格进行简单的配置，就能够应付大部分的绘制需求了。</p><p>2.<code>Paint</code> 的完全攻略</p><p><code>Paint</code> 可以做的事，不只是设置颜色，也不只是我在视频里讲的实心空心、线条粗细、有没有阴影，它可以做的风格设置真的是非常多、非常细。例如：</p><blockquote><p>拐角要什么形状？</p></blockquote><blockquote><p>开不开双线性过滤？</p></blockquote><blockquote><p>加不加特效？</p></blockquote><ol start="3"><li><p><code>Canvas</code> 对绘制的辅助——范围裁切和几何变换。 范围裁切： <img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7ot5vscj30i70bzq3m-20210106191350993.jpg" alt=""><br> 几何变换： <img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7q09im3j30q20k240u-20210106191351015.jpg" alt=""></p></li><li><p>使用不同的绘制方法来控制绘制顺序</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7qkonwrj30cb07cjry-20210106191351042.jpg" alt=""></p><p>控制绘制顺序解决的并不是「做不到」的问题，而是性能问题。同样的一种效果，你不用绘制顺序的控制往往也能做到，但需要用多个 View 甚至是多层 View 才能拼凑出来，因此代价是 UI 的性能；而使用绘制顺序的控制的话，一个 View 就全部搞定了。</p></li></ol><p>自定义绘制的知识，大概就分为上面这四个级别。在你把这四个级别依次掌握了之后，你就是一个自定义绘制的高手了。它们具体的细节，我将分成几篇来讲。今天这篇就是第一篇： <code>Canvas.drawXXX()</code> 系列方法及 <code>Paint</code> 最基本的使用。我要正式开始喽？</p><h2 id="一切的开始-ondraw" tabindex="-1"><a class="header-anchor" href="#一切的开始-ondraw" aria-hidden="true">#</a> 一切的开始：onDraw()</h2><p>自定义绘制的上手非常容易：提前创建好 <code>Paint</code> 对象，重写 <code>onDraw()</code>，把绘制代码写在 <code>onDraw()</code> 里面，就是自定义绘制最基本的实现。大概就像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Paint</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 绘制一个圆</span>
    canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就这么简单。所以关于 <code>onDraw()</code> 其实没什么好说的，一个很普通的方法重写，唯一需要注意的是别漏写了 <code>super.onDraw()</code>。</p><h2 id="canvas-drawxxx-和-paint-基础" tabindex="-1"><a class="header-anchor" href="#canvas-drawxxx-和-paint-基础" aria-hidden="true">#</a> Canvas.drawXXX() 和 Paint 基础</h2><p><code>drawXXX()</code> 系列方法和 <code>Paint</code> 的基础掌握了，就能够应付简单的绘制需求。它们主要包括：</p><ol><li><code>Canvas</code> 类下的所有 <code>draw-</code> 打头的方法，例如 <code>drawCircle()</code> <code>drawBitmap()</code>。</li><li><code>Paint</code> 类的几个最常用的方法。具体是：</li></ol><ul><li><code>Paint.setStyle(Style style)</code> 设置绘制模式</li><li><code>Paint.setColor(int color)</code> 设置颜色</li><li><code>Paint.setStrokeWidth(float width)</code> 设置线条宽度</li><li><code>Paint.setTextSize(float textSize)</code> 设置文字大小</li><li><code>Paint.setAntiAlias(boolean aa)</code> 设置抗锯齿开关</li></ul>`,19),d={href:"https://developer.android.com/reference/android/graphics/Canvas.html?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},r={href:"https://developer.android.com/reference/android/graphics/Paint.html?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},k=e(`<p>下面的内容就是展开讲解上面的这两类方法。</p><h2 id="drawcolor-颜色填充" tabindex="-1"><a class="header-anchor" href="#drawcolor-颜色填充" aria-hidden="true">#</a> drawColor-颜色填充</h2><p><strong><code>Canvas.drawColor(@ColorInt int color) 颜色填充</code></strong></p><p>这是最基本的 <code>drawXXX()</code> 方法：在整个绘制区域统一涂上指定的颜色。</p><p>例如 <code>drawColor(Color.BLACK)</code> 会把整个区域染成纯黑色，覆盖掉原有内容； <code>drawColor(Color.parse(&quot;#88880000&quot;)</code> 会在原有的绘制效果上加一层半透明的红色遮罩。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">drawColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">BLACK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 纯黑</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">drawColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;#88880000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 半透明红色</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类似的方法还有 <code>drawRGB(int r, int g, int b)</code> 和 <code>drawARGB(int a, int r, int g, int b)</code> ，它们和 <code>drawColor(color)</code> 只是使用方式不同，作用都是一样的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>canvas<span class="token punctuation">.</span><span class="token function">drawRGB</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawARGB</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这类颜色填充方法一般用于在绘制之前设置底色，或者在绘制之后为界面设置半透明蒙版。</p><h2 id="drawcircle-画圆" tabindex="-1"><a class="header-anchor" href="#drawcircle-画圆" aria-hidden="true">#</a> drawCircle-画圆</h2><p><strong><code>drawCircle(float centerX, float centerY, float radius, Paint paint) 画圆</code></strong></p><p>前两个参数 <code>centerX</code> <code>centerY</code> 是圆心的坐标，第三个参数 <code>radius</code> 是圆的半径，单位都是像素，它们共同构成了这个圆的基本信息（即用这几个信息可以构建出一个确定的圆）；第四个参数 <code>paint</code> 我在视频里面已经说过了，它提供基本信息之外的所有风格信息，例如颜色、线条粗细、阴影等。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>canvas.drawCircle(300, 300, 200, paint);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="view的坐标系" tabindex="-1"><a class="header-anchor" href="#view的坐标系" aria-hidden="true">#</a> View的坐标系</h3><p>那位说：「你等会儿！先别往后讲，你刚才说圆心的坐标，我想问坐标系在哪儿呢？没坐标系你跟我聊什么坐标啊。」</p><p>我想说：问得好（强行插入剧情）。在 Android 里，每个 View 都有一个自己的坐标系，彼此之间是不影响的。这个坐标系的原点是 View 左上角的那个点；水平方向是 x 轴，右正左负；竖直方向是 y 轴，下正上负（注意，是下正上负，不是上正下负，和上学时候学的坐标系方向不一样）。也就是下面这个样子。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7syr2ghj30h40etdfz-20210106191351144.jpg" alt=""></p><p>所以一个 View 的坐标 (x, y) 处，指的就是相对它的左上角那个点的水平方向 x 像素、竖直方向 y 像素的点。例如，(300, 300) 指的就是左上角的点向右 300 、向下 300 的位置； (100, -50) 指的就是左上角的点向右 100 、向上 50 的位置。</p><p>也就是说， <code>canvas.drawCircle(300, 300, 200, paint)</code> 这行代码绘制出的圆，在 View 中的位置和尺寸应该是这样的：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7t79a4oj30h00eqaah-20210106191351161.jpg" alt=""></p><p>圆心坐标和半径，这些都是圆的基本信息，也是它的独有信息。什么叫独有信息？就是只有它有，别人没有的信息。你画圆有圆心坐标和半径，画方有吗？画椭圆有吗？这就叫独有信息。独有信息都是直接作为参数写进 <code>drawXXX()</code> 方法里的（比如 <code>drawCircle(centerX, centerY, radius, paint)</code> 的前三个参数）。</p><p>而除此之外，其他的都是公有信息。比如图形的颜色、空心实心这些，你不管是画圆还是画方都有可能用到的，这些信息则是统一放在 <code>paint</code> 参数里的。</p><h3 id="插播一-paint-setcolor-int-color" tabindex="-1"><a class="header-anchor" href="#插播一-paint-setcolor-int-color" aria-hidden="true">#</a> 插播一： Paint.setColor(int color)</h3><p>例如，你要画一个红色的圆，并不是写成 <code>canvas.drawCircle(300, 300, 200, RED, paint)</code> 这样，而是像下面这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置为红色</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Paint.setColor(int color)</code> 是 <code>Paint</code> 最常用的方法之一，用来设置绘制内容的颜色。你不止可以用它画红色的圆，也可以用它来画红色的矩形、红色的五角星、红色的文字。</p><h3 id="插播二-paint-setstyle-paint-style-style" tabindex="-1"><a class="header-anchor" href="#插播二-paint-setstyle-paint-style-style" aria-hidden="true">#</a> 插播二： Paint.setStyle(Paint.Style style)</h3><p>而如果你想画的不是实心圆，而是空心圆（或者叫环形），也可以使用 <code>paint.setStyle(Paint.Style.STROKE)</code> 来把绘制模式改为画线模式。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Style 修改为画线模式</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setStyle(Style style)</code> 这个方法设置的是绘制的 <code>Style</code> 。<code>Style</code> 具体来说有三种： <code>FILL</code>, <code>STROKE</code> 和 <code>FILL_AND_STROKE</code> 。<code>FILL</code> 是填充模式，<code>STROKE</code> 是画线模式（即勾边模式），<code>FILL_AND_STROKE</code> 是两种模式一并使用：既画线又填充。它的默认值是 <code>FILL</code>，填充模式。</p><h3 id="插播三-paint-setstrokewidth-float-width" tabindex="-1"><a class="header-anchor" href="#插播三-paint-setstrokewidth-float-width" aria-hidden="true">#</a> 插播三： Paint.setStrokeWidth(float width)</h3><p>在 <code>STROKE</code> 和 <code>FILL_AND_STROKE</code> 下，还可以使用 <code>paint.setStrokeWidth(float width)</code> 来设置线条的宽度：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线条宽度为 20 像素</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="插播四-抗锯齿" tabindex="-1"><a class="header-anchor" href="#插播四-抗锯齿" aria-hidden="true">#</a> 插播四： 抗锯齿</h5><p>在绘制的时候，往往需要开启抗锯齿来让图形和文字的边缘更加平滑。开启抗锯齿很简单，只要在 <code>new Paint()</code> 的时候加上一个 <code>ANTI_ALIAS_FLAG</code> 参数就行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Paint</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token class-name">Paint</span><span class="token punctuation">.</span><span class="token constant">ANTI_ALIAS_FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，你也可以使用 <code>Paint.setAntiAlias(boolean aa)</code> 来动态开关抗锯齿。</p><p>可以看出，没有开启抗锯齿的时候，图形会有毛片现象，啊不，毛边现象。所以一定记得要打开抗锯齿哟！</p><blockquote><p><em>可以跳过的冷知识</em></p><p>好奇的人可能会问：抗锯齿既然这么有用，为什么不默认开启，或者干脆把这个开关取消，自动让所有绘制都开启抗锯齿？</p><p>短答案：因为抗锯齿并不一定适合所有场景。</p><p>长答案：所谓的毛边或者锯齿，发生的原因并不是很多人所想象的「绘制太粗糙」「像素计算能力不足」；同样，抗锯齿的原理也并不是选择了更精细的算法来算出了更平滑的图形边缘。</p><p>实质上，锯齿现象的发生，只是由于图形分辨率过低，导致人眼察觉出了画面中的像素颗粒而已。换句话说，就算不开启抗锯齿，图形的边缘也已经是最完美的了，而并不是一个粗略计算的粗糙版本。</p><p>那么，为什么抗锯齿开启之后的图形边缘会更加平滑呢？因为抗锯齿的原理是：修改图形边缘处的像素颜色，从而<strong>让图形在肉眼看来具有更加平滑的感觉</strong>。一图胜千言，上图：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7uen44ej30ce07274d-20210106191351235.jpg" alt=""></p><p>上面这个是把前面那两个圆放大后的局部效果。看到没有？未开启抗锯齿的圆，所有像素都是同样的黑色，而开启了抗锯齿的圆，边缘的颜色被略微改变了。这种改变可以让人眼有边缘平滑的感觉，但从某种角度讲，它也造成了图形的颜色失真。<br> 所以，抗锯齿好不好？好，大多数情况下它都应该是开启的；但在极少数的某些时候，你还真的需要把它关闭。「某些时候」是什么时候？到你用到的时候自然就知道了。</p></blockquote><p>除了圆，<code>Canvas</code> 还可以绘制一些别的简单图形。它们的使用方法和 <code>drawCircle()</code> 大同小异，我就只对它们的 API 做简单的介绍，不再做详细的讲解。</p><h2 id="drawrect-画矩形" tabindex="-1"><a class="header-anchor" href="#drawrect-画矩形" aria-hidden="true">#</a> drawRect-画矩形</h2><p><strong><code>drawRect(float left, float top, float right, float bottom, Paint paint) 画矩形</code></strong></p><p><code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code> 是矩形四条边的坐标。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>

paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，它还有两个重载方法 <code>drawRect(RectF rect, Paint paint)</code> 和 <code>drawRect(Rect rect, Paint paint)</code> ，让你可以直接填写 <code>RectF</code> 或 <code>Rect</code> 对象来绘制矩形。</p><h2 id="drawpoint-画点" tabindex="-1"><a class="header-anchor" href="#drawpoint-画点" aria-hidden="true">#</a> drawPoint-画点</h2><p><strong><code>drawPoint(float x, float y, Paint paint) 画点</code></strong></p><p><code>x</code> 和 <code>y</code> 是点的坐标。点的大小可以通过 <code>paint.setStrokeWidth(width)</code> 来设置；点的形状可以通过 <code>paint.setStrokeCap(cap)</code> 来设置：<code>ROUND</code> 画出来是圆形的点，<code>SQUARE</code> 或 <code>BUTT</code> 画出来是方形的点。（点还有形状？是的，反正 Google 是这么说的，你要问问 Google 去，我也很懵逼。）</p><blockquote><p>注：<code>Paint.setStrokeCap(cap)</code> 可以设置点的形状，但这个方法并不是专门用来设置点的形状的，而是一个设置线条端点形状的方法。端点有圆头 (<code>ROUND</code>)、平头 (<code>BUTT</code>) 和方头 (<code>SQUARE</code>) 三种，具体会在下一节里面讲。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setStrokeCap</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Cap</span><span class="token punctuation">.</span><span class="token constant">ROUND</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawPoint</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setStrokeCap</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Cap</span><span class="token punctuation">.</span><span class="token constant">SQUARE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawPoint</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好像有点像 <code>FILL</code> 模式下的 <code>drawCircle()</code> 和 <code>drawRect()</code> ？事实上确实是这样的，它们和 <code>drawPoint()</code> 的绘制效果没有区别。各位在使用的时候按个人习惯和实际场景来吧，哪个方便和顺手用哪个。</p><h2 id="drawpoints-画点-批量" tabindex="-1"><a class="header-anchor" href="#drawpoints-画点-批量" aria-hidden="true">#</a> drawPoints-画点（批量）</h2><p><strong><code>drawPoints(float[] pts, int offset, int count, Paint paint) / drawPoints(float[] pts, Paint paint) 画点（批量）</code></strong></p><p>同样是画点，它和 <code>drawPoint()</code> 的区别是可以画多个点。<code>pts</code> 这个数组是点的坐标，每两个成一对；<code>offset</code> 表示跳过数组的前几个数再开始记坐标；<code>count</code> 表示一共要绘制几个点。说这么多你可能越读越晕，你还是自己试试吧，这是个看着复杂用着简单的方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>points <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 绘制四个点：(50, 50) (50, 100) (100, 50) (100, 100)</span>
canvas<span class="token punctuation">.</span><span class="token function">drawPoints</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token comment">/* 跳过两个数，即前两个 0 */</span><span class="token punctuation">,</span>
          <span class="token number">8</span> <span class="token comment">/* 一共绘制 8 个数（4 个点）*/</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="drawoval-画椭圆" tabindex="-1"><a class="header-anchor" href="#drawoval-画椭圆" aria-hidden="true">#</a> drawOval-画椭圆</h2><p><strong><code>drawOval(float left, float top, float right, float bottom, Paint paint) 画椭圆</code></strong></p><p>只能绘制横着的或者竖着的椭圆，不能绘制斜的（斜的倒是也可以，但不是直接使用 <code>drawOval()</code>，而是配合几何变换，后面会讲到）。<code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code> 是这个椭圆的左、上、右、下四个边界点的坐标。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>

paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawOval</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外，它还有一个重载方法 <code>drawOval(RectF rect, Paint paint)</code>，让你可以直接填写 <code>RectF</code> 来绘制椭圆。</p><h2 id="drawline-画线" tabindex="-1"><a class="header-anchor" href="#drawline-画线" aria-hidden="true">#</a> drawLine-画线</h2><p><strong><code>drawLine(float startX, float startY, float stopX, float stopY, Paint paint) 画线</code></strong></p><p><code>startX</code>, <code>startY</code>, <code>stopX</code>, <code>stopY</code> 分别是线的起点和终点坐标。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>canvas.drawLine(200, 200, 800, 500, paint);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>由于直线不是封闭图形，所以 <code>setStyle(style)</code> 对直线没有影响。</p></blockquote><h2 id="drawlines-画线-批量" tabindex="-1"><a class="header-anchor" href="#drawlines-画线-批量" aria-hidden="true">#</a> drawLines-画线（批量）</h2><p><strong><code>drawLines(float[] pts, int offset, int count, Paint paint) / drawLines(float[] pts, Paint paint) 画线（批量）</code></strong></p><p><code>drawLines()</code> 是 <code>drawLine()</code> 的复数版。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>points <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawLines</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>咦，不小心打出两个汉字。——是汉字吧？</p></blockquote><h2 id="drawroundrect-画圆角矩形" tabindex="-1"><a class="header-anchor" href="#drawroundrect-画圆角矩形" aria-hidden="true">#</a> drawRoundRect- 画圆角矩形</h2><p><strong><code>drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint) 画圆角矩形</code></strong></p><p><code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code> 是四条边的坐标，<code>rx</code> 和 <code>ry</code> 是圆角的横向半径和纵向半径。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>canvas<span class="token punctuation">.</span><span class="token function">drawRoundRect</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>另外，它还有一个重载方法 <code>drawRoundRect(RectF rect, float rx, float ry, Paint paint)</code>，让你可以直接填写 <code>RectF</code> 来绘制圆角矩形。</p><h2 id="drawarc-绘制弧形或扇形" tabindex="-1"><a class="header-anchor" href="#drawarc-绘制弧形或扇形" aria-hidden="true">#</a> drawArc-绘制弧形或扇形</h2><p><strong><code>drawArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean useCenter, Paint paint) 绘制弧形或扇形</code></strong></p><p><code>drawArc()</code> 是使用一个椭圆来描述弧形的。<code>left</code>, <code>top</code>, <code>right</code>, <code>bottom</code> 描述的是这个弧形所在的椭圆；<code>startAngle</code> 是弧形的起始角度（x 轴的正向，即正右的方向，是 0 度的位置；顺时针为正角度，逆时针为负角度），<code>sweepAngle</code> 是弧形划过的角度；<code>useCenter</code> 表示是否连接到圆心，如果不连接到圆心，就是弧形，如果连接到圆心，就是扇形。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 填充模式</span>
canvas<span class="token punctuation">.</span><span class="token function">drawArc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制扇形</span>
canvas<span class="token punctuation">.</span><span class="token function">drawArc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制弧形</span>
paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 画线模式</span>
canvas<span class="token punctuation">.</span><span class="token function">drawArc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制不封口的弧形</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7w109ofj307904z3yg-20210106191351389.jpg" alt=""></p><p>到此为止，以上就是 <code>Canvas</code> 所有的简单图形的绘制。除了简单图形的绘制， <code>Canvas</code> 还可以使用 <code>drawPath(Path path)</code> 来绘制自定义图形。</p><h2 id="drawpath-画自定义图形" tabindex="-1"><a class="header-anchor" href="#drawpath-画自定义图形" aria-hidden="true">#</a> drawPath-画自定义图形</h2><p><strong><code>drawPath(Path path, Paint paint) 画自定义图形</code></strong></p><p>这个方法有点复杂，需要展开说一下。</p><p>前面的这些方法，都是绘制某个给定的图形，而 <code>drawPath()</code> 可以绘制自定义图形。当你要绘制的图形比较特殊，使用前面的那些方法做不到的时候，就可以使用 <code>drawPath()</code> 来绘制。</p><p><code>drawPath(path)</code> 这个方法是通过描述路径的方式来绘制图形的，它的 <code>path</code> 参数就是用来描述图形路径的对象。<code>path</code> 的类型是 <code>Path</code> ，使用方法大概像下面这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>

    <span class="token class-name">Paint</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Path</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化 Path 对象</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token punctuation">{</span>
      <span class="token comment">// 使用 path 对图形进行描述（这段描述代码不必看懂）</span>
      path<span class="token punctuation">.</span><span class="token function">addArc</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">arcTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">542</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

      canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制出 path 描述的图形（心形），大功告成</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7wdwl9cj306505ja9z-20210106191351413.jpg" alt=""></p><p><code>Path</code> 可以描述直线、二次曲线、三次曲线、圆、椭圆、弧形、矩形、圆角矩形。把这些图形结合起来，就可以描述出很多复杂的图形。下面我就说一下具体的怎么把这些图形描述出来。</p><p><code>Path</code> 有两类方法，一类是直接描述路径的，另一类是辅助的设置或计算。</p><h2 id="path-方法第一类-直接描述路径。" tabindex="-1"><a class="header-anchor" href="#path-方法第一类-直接描述路径。" aria-hidden="true">#</a> Path 方法第一类：直接描述路径。</h2><p>这一类方法还可以细分为两组：添加子图形和画线（直线或曲线）</p><h3 id="第一组-addxxx-添加子图形" tabindex="-1"><a class="header-anchor" href="#第一组-addxxx-添加子图形" aria-hidden="true">#</a> 第一组： addXxx()-添加子图形</h3><p><strong><code>addCircle(float x, float y, float radius, Direction dir) 添加圆</code></strong></p><p><code>x</code>, <code>y</code>, <code>radius</code> 这三个参数是圆的基本信息，最后一个参数 <code>dir</code> 是画圆的路径的方向。</p><blockquote><p>路径方向有两种：顺时针 (<code>CW</code> clockwise) 和逆时针 (<code>CCW</code> counter-clockwise) 。对于普通情况，这个参数填 <code>CW</code> 还是填 <code>CCW</code> 没有影响。它只是在<strong>需要填充图形</strong> (<code>Paint.Style</code> 为 <code>FILL</code> 或 <code>FILL_AND_STROKE</code>) ，并且<strong>图形出现自相交</strong>时，用于判断填充范围的。比如下面这个图形：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7winr54j306m04fjrc-20210106191351424.jpg" alt=""></p><p>是应该填充成这样呢：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7wk8r6cj306c04d747-20210106191351435.jpg" alt=""></p><p>还是应该填充成这样呢：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7wm4nvtj306e04ddfs-20210106191351444.jpg" alt=""></p><p>想用哪种方式来填充，都可以由你来决定。具体怎么做，下面在讲 <code>Path.setFillType()</code> 的时候我会详细介绍，而在这里你可以先忽略 <code>dir</code> 这个参数。</p></blockquote><p>在用 <code>addCircle()</code> 为 <code>Path</code> 中新增一个圆之后，调用 <code>canvas.drawPath(path, paint)</code> ，就能画一个圆出来。就像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>path<span class="token punctuation">.</span><span class="token function">addCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token class-name">Path<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span><span class="token constant">CW</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，<code>path.AddCircle(x, y, radius, dir)</code> + <code>canvas.drawPath(path, paint)</code> 这种写法，和直接使用 <code>canvas.drawCircle(x, y, radius, paint)</code> 的效果是一样的，区别只是它的写法更复杂。所以如果只画一个圆，没必要用 <code>Path</code>，直接用 <code>drawCircle()</code> 就行了。<code>drawPath()</code> 一般是在绘制组合图形时才会用到的。</p><p>其他的 <code>Path.add-()</code> 方法和这类似，例如：</p><p><strong><code>addOval(float left, float top, float right, float bottom, Direction dir) / addOval(RectF oval, Direction dir) 添加椭圆</code></strong></p><p><strong><code>addRect(float left, float top, float right, float bottom, Direction dir) / addRect(RectF rect, Direction dir) 添加矩形</code></strong></p><p><strong><code>addRoundRect(RectF rect, float rx, float ry, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float rx, float ry, Direction dir) / addRoundRect(RectF rect, float[] radii, Direction dir) / addRoundRect(float left, float top, float right, float bottom, float[] radii, Direction dir) 添加圆角矩形</code></strong></p><p><strong><code>addPath(Path path) 添加另一个 Path</code></strong></p><p>上面这几个方法和 <code>addCircle()</code> 的使用都差不多，不再做过多介绍。</p><h3 id="第二组-xxxto-画线-直线或曲线" tabindex="-1"><a class="header-anchor" href="#第二组-xxxto-画线-直线或曲线" aria-hidden="true">#</a> 第二组：xxxTo()-画线（直线或曲线）</h3><p>这一组和第一组 <code>addXxx()</code> 方法的区别在于，第一组是添加的完整封闭图形（除了 <code>addPath()</code> ），而这一组添加的只是一条线。</p><p><strong><code>lineTo(float x, float y) / rLineTo(float x, float y) 画直线</code></strong></p><p>从<strong>当前位置</strong>向目标位置画一条直线， <code>x</code> 和 <code>y</code> 是目标位置的坐标。这两个方法的区别是，<code>lineTo(x, y)</code> 的参数是<strong>绝对坐标</strong>，而 <code>rLineTo(x, y)</code> 的参数是相对当前位置的<strong>相对坐标</strong> （前缀 <code>r</code> 指的就是 <code>relatively</code> 「相对地」)。</p><blockquote><p><strong>当前位置</strong>：所谓当前位置，即最后一次调用画 <code>Path</code> 的方法的终点位置。初始值为原点 (0, 0)。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由当前位置 (0, 0) 向 (100, 100) 画一条直线</span>
path<span class="token punctuation">.</span><span class="token function">rLineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 由当前位置 (100, 100) 向正右方 100 像素的位置画一条直线</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>quadTo(float x1, float y1, float x2, float y2) / rQuadTo(float dx1, float dy1, float dx2, float dy2) 画二次贝塞尔曲线</code></strong></p><p>这条二次贝塞尔曲线的起点就是当前位置，而参数中的 <code>x1</code>, <code>y1</code> 和 <code>x2</code>, <code>y2</code> 则分别是控制点和终点的坐标。和 <code>rLineTo(x, y)</code> 同理，<code>rQuadTo(dx1, dy1, dx2, dy2)</code> 的参数也是相对坐标</p><blockquote><p><strong>贝塞尔曲线</strong>：贝塞尔曲线是几何上的一种曲线。它通过起点、控制点和终点来描述一条曲线，主要用于计算机图形学。概念总是说着容易听着难，总之使用它可以绘制很多圆润又好看的图形，但要把它熟练掌握、灵活使用却是不容易的。不过还好的是，一般情况下，贝塞尔曲线并没有什么用处，只在少数场景下绘制一些特殊图形的时候才会用到，所以如果你还没掌握自定义绘制，可以先把贝塞尔曲线放一放，稍后再学也完全没问题。至于怎么学，贝塞尔曲线的知识网上一搜一大把，我这里就不讲了。</p></blockquote><p><strong><code>cubicTo(float x1, float y1, float x2, float y2, float x3, float y3) / rCubicTo(float x1, float y1, float x2, float y2, float x3, float y3) 画三次贝塞尔曲线</code></strong></p><p>和上面这个 <code>quadTo()</code> <code>rQuadTo()</code> 的二次贝塞尔曲线同理，<code>cubicTo()</code> 和 <code>rCubicTo()</code> 是三次贝塞尔曲线，不再解释。</p><p><strong><code>moveTo(float x, float y) / rMoveTo(float x, float y) 移动到目标位置</code></strong></p><p>不论是直线还是贝塞尔曲线，都是以当前位置作为起点，而不能指定起点。但你可以通过 <code>moveTo(x, y)</code> 或 <code>rMoveTo()</code> 来改变当前位置，从而间接地设置这些方法的起点。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 画斜线</span>
path<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 我移~~</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 画竖线</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>moveTo(x, y)</code> 虽然不添加图形，但它会设置图形的起点，所以它是非常重要的一个辅助方法。</p><p>另外，第二组还有两个特殊的方法： <code>arcTo()</code> 和 <code>addArc()</code>。它们也是用来画线的，但并不使用当前位置作为弧线的起点。</p><p><strong><code>arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo) / arcTo(float left, float top, float right, float bottom, float startAngle, float sweepAngle, boolean forceMoveTo) / arcTo(RectF oval, float startAngle, float sweepAngle) 画弧形</code></strong></p><p>这个方法和 <code>Canvas.drawArc()</code> 比起来，少了一个参数 <code>useCenter</code>，而多了一个参数 <code>forceMoveTo</code> 。</p><p>少了 <code>useCenter</code> ，是因为 <code>arcTo()</code> 只用来画弧形而不画扇形，所以不再需要 <code>useCenter</code> 参数；而多出来的这个 <code>forceMoveTo</code> 参数的意思是，绘制是要「抬一下笔移动过去」，还是「直接拖着笔过去」，区别在于是否留下移动的痕迹。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">arcTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 强制移动到弧形起点（无痕迹）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">arcTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接连线连到弧形起点（有痕迹）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>addArc(float left, float top, float right, float bottom, float startAngle, float sweepAngle) / addArc(RectF oval, float startAngle, float sweepAngle)</code></strong></p><p>又是一个弧形的方法。一个叫 <code>arcTo</code> ，一个叫 <code>addArc()</code>，都是弧形，区别在哪里？其实很简单： <code>addArc()</code> 只是一个直接使用了 <code>forceMoveTo = true</code> 的简化版 <code>arcTo()</code> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">addArc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><code>close() 封闭当前子图形</code></strong></p><p>它的作用是把当前的子图形封闭，即由当前位置向当前子图形的起点绘制一条直线。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 子图形未封闭</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 close() 封闭子图形。等价于 path.lineTo(100, 100)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>close()</code> 和 <code>lineTo(起点坐标)</code> 是完全等价的。</p><blockquote><p>「子图形」：官方文档里叫做 <code>contour</code> 。但由于在这个场景下我找不到这个词合适的中文翻译（直译的话叫做「轮廓」），所以我换了个便于中国人理解的词：「子图形」。前面说到，第一组方法是「添加子图形」，所谓「子图形」，指的就是一次不间断的连线。一个 <code>Path</code> 可以包含多个子图形。当使用第一组方法，即 <code>addCircle()</code> <code>addRect()</code> 等方法的时候，每一次方法调用都是新增了一个独立的子图形；而如果使用第二组方法，即 <code>lineTo()</code> <code>arcTo()</code> 等方法的时候，则是每一次断线（即每一次「抬笔」），都标志着一个子图形的结束，以及一个新的子图形的开始。</p></blockquote><blockquote><p>另外，不是所有的子图形都需要使用 <code>close()</code> 来封闭。当<strong>需要填充图形时（即 <code>Paint.Style</code> 为 <code>FILL</code> 或 <code>FILL_AND_STROKE</code>）</strong>，<code>Path</code> 会自动封闭子图形。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Style</span><span class="token punctuation">.</span><span class="token constant">FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
path<span class="token punctuation">.</span><span class="token function">lineTo</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 这里只绘制了两条边，但由于 Style 是 FILL ，所以绘制时会自动封口</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig80a2v95j304z035glh-20210106191351679.jpg" alt=""></p></blockquote><p>以上就是 <code>Path</code> 的第一类方法：直接描述路径的。</p><h3 id="path-方法第二类-辅助的设置或计算" tabindex="-1"><a class="header-anchor" href="#path-方法第二类-辅助的设置或计算" aria-hidden="true">#</a> Path 方法第二类：辅助的设置或计算</h3><p>这类方法的使用场景比较少，我在这里就不多讲了，只讲其中一个方法： <code>setFillType(FillType fillType)</code>。</p><p><strong><code>Path.setFillType(Path.FillType ft) 设置填充方式</code></strong></p><p>前面在说 <code>dir</code> 参数的时候提到， <code>Path.setFillType(fillType)</code> 是用来设置图形自相交时的填充算法的：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig8042q9jj30hb0aodg6-20210106191351687.jpg" alt=""></p><p>方法中填入不同的 <code>FillType</code> 值，就会有不同的填充效果。<code>FillType</code> 的取值有四个：</p><ul><li><code>EVEN_ODD</code></li><li><code>WINDING</code> （默认值）</li><li><code>INVERSE_EVEN_ODD</code></li><li><code>INVERSE_WINDING</code></li></ul><p>其中后面的两个带有 <code>INVERSE_</code> 前缀的，只是前两个的反色版本，所以只要把前两个，即 <code>EVEN_ODD</code> 和 <code>WINDING</code>，搞明白就可以了。</p><p><code>EVEN_ODD</code> 和 <code>WINDING</code> 的原理有点复杂，直接讲出来的话信息量太大，所以我先给一个简单粗暴版的总结，你感受一下： <code>WINDING</code> 是「全填充」，而 <code>EVEN_ODD</code> 是「交叉填充」：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig7zyzjtrj30kx0jugn9-20210106191351703.jpg" alt=""></p><p>之所以叫「简单粗暴版」，是因为这些只是通常情形下的效果；而如果要准确了解它们在所有情况下的效果，就得先知道它们的原理，即它们的具体算法。</p><h2 id="even-odd-和-winding-的原理" tabindex="-1"><a class="header-anchor" href="#even-odd-和-winding-的原理" aria-hidden="true">#</a> EVEN_ODD 和 WINDING 的原理</h2><h3 id="even-odd" tabindex="-1"><a class="header-anchor" href="#even-odd" aria-hidden="true">#</a> EVEN_ODD</h3><p>即 even-odd rule （奇偶原则）：对于平面中的任意一点，向任意方向射出一条射线，这条射线和图形相交的次数（相交才算，相切不算哦）如果是奇数，则这个点被认为在图形内部，是要被涂色的区域；如果是偶数，则这个点被认为在图形外部，是不被涂色的区域。还以左右相交的双圆为例：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig811a7tnj30jj06h74p-20210106191351719.jpg" alt=""></p><blockquote><p>射线的方向无所谓，同一个点射向任何方向的射线，结果都是一样的，不信你可以试试。</p></blockquote><p>从上图可以看出，射线每穿过图形中的一条线，内外状态就发生一次切换，这就是为什么 <code>EVEN_ODD</code> 是一个「交叉填充」的模式。</p><h3 id="winding" tabindex="-1"><a class="header-anchor" href="#winding" aria-hidden="true">#</a> WINDING</h3><p>即 non-zero winding rule （非零环绕数原则）：首先，它需要你图形中的所有线条都是有绘制方向的：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig81dw60ej307b0bm3yq-20210106191351728.jpg" alt=""></p><p>然后，同样是从平面中的点向任意方向射出一条射线，但计算规则不一样：以 0 为初始值，对于射线和图形的所有交点，遇到每个顺时针的交点（图形从射线的左边向右穿过）把结果加 1，遇到每个逆时针的交点（图形从射线的右边向左穿过）把结果减 1，最终把所有的交点都算上，得到的结果如果不是 0，则认为这个点在图形内部，是要被涂色的区域；如果是 0，则认为这个点在图形外部，是不被涂色的区域。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig81scem2j30k90digmo-20210106191351740.jpg" alt=""></p><blockquote><p>和 <code>EVEN_ODD</code> 相同，射线的方向并不影响结果。</p></blockquote><p>所以，我前面的那个「简单粗暴」的总结，对于 <code>WINDING</code> 来说并不完全正确：如果你所有的图形都用相同的方向来绘制，那么 <code>WINDING</code> 确实是一个「全填充」的规则；但如果使用不同的方向来绘制图形，结果就不一样了。</p><blockquote><p>图形的方向：对于添加子图形类方法（如 <code>Path.addCircle()</code> <code>Path.addRect()</code>）的方向，由方法的 <code>dir</code> 参数来控制，这个在前面已经讲过了；而对于画线类的方法（如 <code>Path.lineTo()</code> <code>Path.arcTo()</code>）就更简单了，线的方向就是图形的方向。</p></blockquote><p>所以，完整版的 <code>EVEN_ODD</code> 和 <code>WINDING</code> 的效果应该是这样的：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fig820pdt3j30kw0ummzx-20210106191351765.jpg" alt=""></p><p>而 <code>INVERSE_EVEN_ODD</code> 和 <code>INVERSE_WINDING</code> ，只是把这两种效果进行反转而已，你懂了 <code>EVEN_ODD</code> 和 <code>WINDING</code> ，自然也就懂 <code>INVERSE_EVEN_ODD</code> 和 <code>INVERSE_WINDING</code> 了，我就不讲了。</p><p>好，花了好长的篇幅来讲 <code>drawPath(path)</code> 和 <code>Path</code>，终于讲完了。同时， <code>Canvas</code> 对图形的绘制就也讲完了。图形简单时，使用 <code>drawCircle()</code> <code>drawRect()</code> 等方法来直接绘制；图形复杂时，使用 <code>drawPath()</code> 来绘制自定义图形。</p><p>除此之外， <code>Canvas</code> 还可以绘制 <code>Bitmap</code> 和文字。</p><h2 id="drawbitmap-画-bitmap" tabindex="-1"><a class="header-anchor" href="#drawbitmap-画-bitmap" aria-hidden="true">#</a> drawBitmap-画 Bitmap</h2><p><code>drawBitmap(Bitmap bitmap, float left, float top, Paint paint) 画 Bitmap</code></p><p>绘制 <code>Bitmap</code> 对象，也就是把这个 <code>Bitmap</code> 中的像素内容贴过来。其中 <code>left</code> 和 <code>top</code> 是要把 <code>bitmap</code> 绘制到的位置坐标。它的使用非常简单。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它的重载方法：</p><p><code>drawBitmap(Bitmap bitmap, Rect src, RectF dst, Paint paint)</code> /</p><p><code>drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint)</code> /</p><p><code>drawBitmap(Bitmap bitmap, Matrix matrix, Paint paint)</code></p><blockquote><p><code>drawBitmap</code> 还有一个兄弟方法 <code>drawBitmapMesh()</code>，可以绘制具有网格拉伸效果的 Bitmap。 <code>drawBitmapMesh()</code> 的使用场景较少，所以不讲了，如果有兴趣你可以自己研究一下。</p></blockquote><h2 id="drawtext-绘制文字" tabindex="-1"><a class="header-anchor" href="#drawtext-绘制文字" aria-hidden="true">#</a> drawText-绘制文字</h2><p><strong><code>drawText(String text, float x, float y, Paint paint) 绘制文字</code></strong></p><p>界面里所有的显示内容，都是绘制出来的，包括文字。 <code>drawText()</code> 这个方法就是用来绘制文字的。参数 <code>text</code> 是用来绘制的字符串，<code>x</code> 和 <code>y</code> 是绘制的起点坐标。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><code>插播五： Paint.setTextSize(float textSize)</code></strong></p><p>通过 <code>Paint.setTextSize(textSize)</code>，可以设置文字的大小。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">145</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>设置文字的位置和尺寸，这些只是绘制文字最基本的操作。文字的绘制具有极高的定制性，不过由于它的定制性实在太高了，所以我会在后面专门用一期来讲文字的绘制。这一期就不多讲了。</p></blockquote><p>嗯……就这样吧。绘制部分第一节， <code>Canvas</code> 的 <code>drawXXX()</code> 系列方法和 <code>Paint</code> 的基本使用，就到这里。</p>`,187);function m(v,b){const s=o("ExternalLinkIcon");return c(),i("div",null,[u,a("p",null,[n("对于比较习惯于自学的人（我就是这样的人），你看到这里就已经可以去 Google 的官方文档里，打开 "),a("a",d,[n("Canvas"),t(s)]),n(" 和 "),a("a",r,[n("Paint"),t(s)]),n(" 的页面，把上面的这两类方法学习一下，")]),k])}const g=p(l,[["render",m],["__file","zidingyiView1-1-huizhijichu.html.vue"]]);export{g as default};
