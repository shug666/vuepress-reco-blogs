import{_ as t,r as e,o as p,c as o,b as a,d as n,e as c,a as l}from"./app-e8f85126.js";const i={},u=l(`<h2 id="前戏" tabindex="-1"><a class="header-anchor" href="#前戏" aria-hidden="true">#</a> 前戏</h2><p>Compose 的某些 API 只能在指定的组件内部才能使用，在它的外部、甚至它的子组件里，都是被禁止的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Row <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span> Modifier<span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>CenterVertically<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images2024-03-22-004210.png" alt=""></p><p>这种规则很合理，对吧？</p><p>但是，有一个事实是，Compose 是用函数来写界面的，它的每个组件都是一个函数，而不是类：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images2024-03-22-004212.png" alt=""></p><p>类和接口要做这种访问性的隔离，是很容易的。而函数并不具备这样的功能——你想限制某些公开的属性或者函数只能在特定的<strong>函数</strong>内部才能被使用，Kotlin 是没有提供这种功能的，Java 也没有。</p><p>那……Compose 是怎么做到的呢？</p><h2 id="开场" tabindex="-1"><a class="header-anchor" href="#开场" aria-hidden="true">#</a> 开场</h2><p>今天咱聊一下 Compose 的作用域机制。「作用域」这个词在 Compose 底层原理的角度有它单独的含义，它是用来讨论在界面结构的组合过程中，每个层级之间的关系的一个关键概念。不过今天，咱不聊这个，我们来借着 Compose 的躯壳，聊一聊 Kotlin 语言这个层面的作用域机制。</p><h2 id="compose-和-dsl" tabindex="-1"><a class="header-anchor" href="#compose-和-dsl" aria-hidden="true">#</a> Compose 和 DSL</h2><p>Compose 的写法是声明式的，但是跟同为声明式的 Flutter 有一个很大的不同是，它的界面组件是用函数来写的，而不是用类。</p><p>用函数来写，有一个很大的好处就是，它的写法可以做到极致的简洁，简洁到它可以被看作是一种 DSL。——哎，啥是 DSL？</p><p>做 Android 开发的人，很多应该都见过 DSL 这个词，因为我们用的 Gradle 就是一种 DSL。但是可能很多人对于「到底 DSL 是啥意思」的概念还是比较模糊。所谓 DSL，它的全称是 Domain-Specific Language，中文翻译叫「领域特定语言」，其实就是「专属于某个领域的语言」。相对于 C++、Java、Kotlin 这些通用的编程语言，DSL 是被设计来专门针对某种特定场景的专用化的语言。比如 HTML，就是一种专门用来写网页界面的 DSL：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width, initial-scale=1.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Simple HTML Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Welcome to My Simple HTML Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a paragraph of text in the body of the HTML page.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Here is a link to an interesting <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.wikipedia.org/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>website<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有 SQL，它是专门用来访问关系型数据库的 DSL：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> Country <span class="token operator">=</span> <span class="token string">&#39;CN&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> CustomerID<span class="token punctuation">,</span> FirstName<span class="token punctuation">,</span> LastName<span class="token punctuation">,</span> Email <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> NumberOfCustomers <span class="token keyword">FROM</span> Customers<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> LastName <span class="token keyword">ASC</span><span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> Country<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> NumberOfCustomers <span class="token keyword">FROM</span> Customers <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> Country<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> Orders<span class="token punctuation">.</span>OrderID<span class="token punctuation">,</span> Customers<span class="token punctuation">.</span>FirstName<span class="token punctuation">,</span> Customers<span class="token punctuation">.</span>LastName<span class="token punctuation">,</span> Orders<span class="token punctuation">.</span>OrderDate
<span class="token keyword">FROM</span> Orders
<span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> Customers <span class="token keyword">ON</span> Orders<span class="token punctuation">.</span>CustomerID <span class="token operator">=</span> Customers<span class="token punctuation">.</span>CustomerID<span class="token punctuation">;</span>

<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> Customers <span class="token punctuation">(</span>FirstName<span class="token punctuation">,</span> LastName<span class="token punctuation">,</span> Email<span class="token punctuation">,</span> Country<span class="token punctuation">)</span>
<span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">&#39;Kai&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Zhu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;rengwuxian@gmail.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;CN&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">UPDATE</span> Customers <span class="token keyword">SET</span> Email <span class="token operator">=</span> <span class="token string">&#39;rengwuxian@gmail.com&#39;</span> <span class="token keyword">WHERE</span> CustomerID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> Customers <span class="token keyword">WHERE</span> CustomerID <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外很多程序员写文档喜欢用的 Markdown，它是一种「格式」，但它也是一种专门用来写格式化文档的 DSL：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment"># Header 1</span>
<span class="token comment">## Header 2</span>
<span class="token comment">### Header 3</span>

This is a paragraph with some *italic* text and some **bold** text.

<span class="token target symbol">Here&#39;s an unordered list</span><span class="token punctuation">:</span>
- Item 1
- Item 2
  - Nested Item 2a
  - Nested Item 2b

<span class="token target symbol">And here&#39;s an ordered list</span><span class="token punctuation">:</span>
1. First item
2. Second item
3. Third item

\`Inline code\` can be included within backticks.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有个边界案例是 XML：它通常被认为像 JSON 一样是一种数据格式，而不是一种 DSL：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>programming<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Learn XML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>John Doe<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>2021<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">&gt;</span></span>39.95<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fiction<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>XML for Storytellers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>Jane Austen<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>2020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">&gt;</span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span> <span class="token attr-name">category</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>reference<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>The XML Handbook<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>author</span><span class="token punctuation">&gt;</span></span>Robert Smith<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>author</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>year</span><span class="token punctuation">&gt;</span></span>2019<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>year</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">&gt;</span></span>49.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为啥？因为它不是领域特定的，它可以用在很多地方，但并不针对任何领域。而你如果针对某种场景，使用 XML 去设计一种专用的格式，那它就是 DSL——比如 SVG，一种矢量图的表达格式，它就是 DSL，因为它是专用于矢量图这个领域的，虽然它本质上也是一种 XML：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>100<span class="token punctuation">&quot;</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2000/svg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>circle</span> <span class="token attr-name">cx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50<span class="token punctuation">&quot;</span></span> <span class="token attr-name">cy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>50<span class="token punctuation">&quot;</span></span> <span class="token attr-name">r</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>40<span class="token punctuation">&quot;</span></span> <span class="token attr-name">stroke</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>black<span class="token punctuation">&quot;</span></span> <span class="token attr-name">stroke-width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">fill</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blue<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，DSL 是一个宽松的概念，它关键在于是否是用于特定领域的。你可以从零去创造一门 DSL，也可以拿现成的东西去改成 DSL。</p><p>不止 XML，咱还可以用通用编程语言来改成 DSL。比如 Gradle，就是一种基于 Groovy 语言的 DSL 它针对场景的是 Java 项目的架构配置——当然也包括 Android 项目。另外现在 Gradle 也支持 Kotlin 了，这就是它又添加了使用 Kotlin 来写 Gradle 脚本的支持。你大眼一看，这就是个配置文件，但它实际上是用 Kotlin 写的，只不过被精心做成了长得很像配置文件的样子。</p><p>而 Compose，也是一样的道理：它是一个定制化的、专门用来写界面的 DSL；但本质上，它依然是 Kotlin。</p><h2 id="implicit-receiver" tabindex="-1"><a class="header-anchor" href="#implicit-receiver" aria-hidden="true">#</a> implicit receiver</h2><p>那么既然是 Kotlin，它就可以完全享受 Kotlin 的所有功能，但也完全承受了 Kotlin 的限制。比如，我们在写传统的 XML 布局的时候——哎对了，Android 的布局文件格式，也是一种 DSL，跟 SVG 的逻辑一样——我们在写 Android 的 XML 布局的时候，如果把属性写在不合适的位置，是会看到警告的对吧：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>layout_weight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images2024-03-22-004213.png" alt=""></p><p>这是因为 Android Studio 会利用专门的 Lint 规则来自动检查文件结构，这就能在格式不对的时候给我们报警。——这套规则我们不用写，但 Android 的研发团队是花了精力去写它的。</p><p>而 Compose 是用 Kotlin 来写的，那么理论上就不需要专门再写 Lint 了，把代码设计好，直接利用 Kotlin 的特性就能检查和报错了。是吧？实际上，Compose 也是这么做的。</p><p>但是具体到作用域这个问题，就有一个障碍：就像我刚才说的，它的组件不是用类写的，而是函数。函数并没有像类和接口那样的层级结构，成员属性和成员函数这些东西，函数是没有的——你可以写局部变量和局部函数，但这些东西是完全私有的，没法从外部调度，所以不是一回事。这样的话，虽然用的是 Kotlin，但我们还是没法像传统布局文件那样对作用域做规则管理。直白点说就是，你想限制某个属性或者函数只能在指定的函数内部被调用，这是做不到的。</p><p>但是！实际情况却不是这样。Compose 的 <code>Row()</code> 组件内部可以使用一个叫 <code>align()</code> 的 <code>Modifier</code> 函数，它可以设置 <code>Row()</code> 内部每个组件的纵向对齐规则，比如纵向居中：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images2024-03-22-004214.png" alt=""></p><p>而你如果在 <code>Row()</code> 的外面尝试使用它，就会报错：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images2024-03-22-004215.png" alt=""></p><p>这是为啥？</p><p>这其实是利用了 Kotlin 的另一个概念，叫 implicit receiver，隐式的 receiver。这个概念我上个视频专门讲过，就不重复说了，建议大家去看一下（视频导航一下）。Compose 把这个 <code>align()</code> 写成了 <code>RowScope</code> 的成员函数，来限制它只能在 <code>RowScope</code> 对象的内部被调用；同时，它还给 <code>Row()</code> 组件的函数类型的参数——也就是这个大括号参数——给它设置了一个 <code>RowScope</code> 类型的隐式 receiver，这就让 <code>Row()</code> 后面的这个大括号里有了一个隐式的、<code>RowScope</code> 类型的 <code>this</code>。这样，最终的效果就是：我们只能在 <code>Row()</code> 的大括号里调用这个 <code>align()</code>，而在其他地方用不了。通过这种方式，Compose 就实现了用函数——而不是类——也能进行作用域限制的目的。</p><h2 id="dslmarker" tabindex="-1"><a class="header-anchor" href="#dslmarker" aria-hidden="true">#</a> <code>@DslMarker</code></h2><p>不过这还没完。</p><p>这一套打法，它只限制了「不能在外部使用」，却没有限制「不能在内部的内部使用」。比如我在 <code>Row()</code> 的内部又摆了个 <code>Column()</code>，也就是纵向的线性布局：</p><p><code>Row()</code> 组件的这种「纵向对齐规则」，它是只对直接子组件才有意义的。比如这个 <code>Text()</code> 和 <code>Column()</code>：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images2024-03-22-004217.png" alt=""></p><p>但对于 <code>Column()</code> 内部的 <code>Text()</code>，设置这种「纵向对齐」就没有意义了——子组件的子组件，隔着一层呢，怎么对齐呀，是吧？它可以设置在它的父组件——也就是这个 <code>Column()</code>——里的横向对齐规则：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Row <span class="token punctuation">{</span>
    <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span> Modifier<span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>CenterVertically<span class="token punctuation">)</span><span class="token punctuation">)</span>
    Column <span class="token punctuation">{</span>
        <span class="token function">Text</span><span class="token punctuation">(</span>text <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Hello&quot;</span></span><span class="token punctuation">,</span> Modifier<span class="token punctuation">.</span><span class="token function">align</span><span class="token punctuation">(</span>Alignment<span class="token punctuation">.</span>CenterHorizontally<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>——注意，这里虽然函数名一样，但其实是另一个函数，它只接受横向对齐类型的参数。</p><p>横向对齐没问题，但更外面的 <code>Row()</code> 所管理的纵向对齐，对于这个二级子组件的 <code>Text()</code> 是没有意义的。所以按理说，在这个 <code>Text()</code> 里就也不应该允许调用那个纵向对齐的 <code>align()</code> 了，是吧？但是，按照 Kotlin 的逻辑，这么写却是被允许的：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images2024-03-22-004220.png" alt=""></p><p>——哎？也不允许？ 这，怎么做到的？（惊奇转变成笑）</p><p>Kotlin 有一个特殊的注解，叫 <code>DslMarker</code>，这个限制就是靠它来实现的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Target</span><span class="token punctuation">(</span>ANNOTATION_CLASS<span class="token punctuation">)</span>
<span class="token annotation builtin">@Retention</span><span class="token punctuation">(</span>BINARY<span class="token punctuation">)</span>
<span class="token annotation builtin">@MustBeDocumented</span>
<span class="token annotation builtin">@SinceKotlin</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;1.1&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">annotation</span> <span class="token keyword">class</span> DslMarker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哎？D-S-L-Marker，DSL，咱刚才刚说过的，是吧？这是个专门用来写 DSL 的注解吗？</p><p>还真的是的，这个注解就是专门用来让我们设计 DSL 的时候用的。Compose 就是个 DSL，刚才我说过了，是吧？</p><p>不过咱刚才也说过了，DSL 是个泛指的、广义的词，具体的有很多种 DSL，它们的定位和用法是完全不同的。而这个 <code>DslMarker</code>，只是实现了其中一种 DSL 的一种功能。什么功能？就是咱现在说的这种。Compose 通过高阶函数和隐式的 receiver 实现了作用域向外的限制：只能在某个函数调用的大括号内部去访问某些属性和函数，在外面是不行的。对吧？而 <code>DslMarker</code> 的限制是向内的：就算在作用域内，就算在大括号的里面，如果你再套一层，那么在这个更内层的里面我也不让你用。也就是咱看到的这个，<code>Row()</code> 的大括号里可以用，但里面再套一层 <code>Column()</code> 之后，<code>Column()</code> 的里面就不让用了。这种「向内切断作用域传递」的工作，就是靠 <code>DslMarker</code> 来实现的。</p><p>我们去看一下 <code>Row()</code> 和 <code>Column()</code> 所提供的隐式 receiver 的类型，也就是这个 <code>RowScope</code> 和 <code>ColumnScope</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@LayoutScopeMarker</span>
<span class="token annotation builtin">@Immutable</span>
<span class="token annotation builtin">@JvmDefaultWithCompatibility</span>
<span class="token keyword">interface</span> RowScope <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@LayoutScopeMarker</span>
<span class="token annotation builtin">@Immutable</span>
<span class="token annotation builtin">@JvmDefaultWithCompatibility</span>
<span class="token keyword">interface</span> ColumnScope <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们有一个共同的注解，叫 <code>LayoutScopeMarker</code>，对吧？然后我再去看这个 <code>LayoutScopeMarker</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@DslMarker</span>
<span class="token keyword">annotation</span> <span class="token keyword">class</span> LayoutScopeMarker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>就能看到它是加了这个叫 <code>DslMarker</code> 的注解。</p><p>通过这种方式，我就把 <code>RowScope</code> 和 <code>ColumnScope</code> 标记为「互相隔离作用域」的。当我在 <code>RowScope</code> 的里面套一层 <code>ColumnScope</code>，本来从 <code>ColumnScope</code> 的里面应该是能访问到外面的 <code>RowScope</code> 的，但加了这个 <code>LayoutScopeMarker</code> 之后，就没法访问了，<code>RowScope</code> 的所有属性和函数被强行禁止在它里面的 <code>ColumnScope</code> 的内部使用了。——同理，如果 <code>ColumnScope</code> 的里面套一个 <code>RowScope</code>，也是不能往外访问的。</p><p>这种限制，可以防止 API 的污染。就像我们例子里这种，既然某些 API 只在直接的内部有意义，而在「内部的内部」就失去了意义，那就干脆禁用这些 API 在「内部的内部」的访问，让我们不要被没用的 API 淹没，从而减少问题，也能提升开发体验。</p><p>这就是 <code>DslMarker</code> 这个注解的作用：向内的隔离访问。Compose 只是一个例子，在其他地方——比如 Gradle 里——也有类似的使用。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>Compose 是用 Kotlin 写的，它享受了 Kotlin 的便利，但也要承受 Kotlin 的限制。它用 Kotlin 的函数来实现了界面组件，就继承了「函数不具备作用域」的缺陷。但是，通过高阶函数、隐式 receiver 和 <code>DslMarker</code> 注解，Compose 用这样综合的花活解决了作用域管理的问题，还解决得挺好。它完全不依赖 Lint 规则，直接依靠 Kotlin 的功能和语法就全都搞定了。</p>`,67),k={href:"https://rengwuxian.com/dslmarker/",target:"_blank",rel:"noopener noreferrer"};function r(d,m){const s=e("ExternalLinkIcon");return p(),o("div",null,[u,a("p",null,[n("本文转自 "),a("a",k,[n("https://rengwuxian.com/dslmarker/"),c(s)]),n("，如有侵权，请联系删除。")])])}const v=t(i,[["render",r],["__file","Composedezuoyongyujizhi.html.vue"]]);export{v as default};
