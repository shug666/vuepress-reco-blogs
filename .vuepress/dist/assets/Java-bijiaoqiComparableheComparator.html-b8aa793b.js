import{_ as t,r as p,o as e,c as o,b as n,d as a,e as c,a as l}from"./app-52856ff7.js";const i={},r=l(`<h2 id="java函数式接口之comparable" tabindex="-1"><a class="header-anchor" href="#java函数式接口之comparable" aria-hidden="true">#</a> Java函数式接口之Comparable</h2><p><strong>-able接口 在Java中一般表示能力，例如Comparable 比较能力，Iterable迭代能力等等</strong></p><h3 id="_1-comparable接口" tabindex="-1"><a class="header-anchor" href="#_1-comparable接口" aria-hidden="true">#</a> 1. Comparable接口</h3><p><strong>Comparable接口，如其名，实现它后，实现类具有比较比较能力。在Java中是一个FunctionalInterface接口，里面包含一个compareTo方法</strong></p><p>这里引入源代码来分析, 具体如下：</p><ol><li>实现该接口的每个类对象会被强加一个总排序，被称之为自然排序，compareTo方法被称之为自然排序法</li><li>List、Array等对象实现了该接口，可以自动排序。</li><li>compareTo禁止接收null值 会抛出空指针异常，null不是任何类的实例</li><li>强烈推荐自然排序和equal结果是一致的，例如 compareTo一致相当于equal方法返回true，<strong>但未要求</strong></li><li>compareTo 使用特定对象来比较顺序 返回 一个负数 或者 0 或者正数 来表示 小于 等于 大于</li><li>compareTo必须满足交换性、传递性等特性</li><li><strong>排序输出默认是升序</strong></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    
    <span class="token doc-comment comment">/**
     * 使用特定对象来比较顺序 返回 一个负数 或者 0 或者正数 来表示 小于 等于 大于
     * 必须确保交换性 x.compareTo(y)的结果和y.compareTo(x)结果一致
     * 传递性
     * 强烈推荐 x.compareTo比较相同的话 equals值也相等
     * 一般来说 返回值 通常定义三种 -1、0或者 1 这类似一种约定 当然你负数 正数其他值也可以
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">T</span> o<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-已实现comparable接口" tabindex="-1"><a class="header-anchor" href="#_1-已实现comparable接口" aria-hidden="true">#</a> 1. 已实现Comparable接口</h4><ol><li>List集合，一般排序借助于Collections工具类</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">listSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">//第一种排序方法</span>
       	list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">//第二种排序方法 底层使用第一种方法</span>
        <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>Array排序 一般排序借助于Arrays工具类</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//在原有基础上排序</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">arraySort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    	<span class="token comment">//第一种排序</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	<span class="token comment">//第二种排序</span>
    	<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-comparator类" tabindex="-1"><a class="header-anchor" href="#_2-comparator类" aria-hidden="true">#</a> 2. Comparator类</h3><p>Comparator,一个比较的功能类，也是一个FunctionalInterface.提供了compare方法，接受两个参数，并返回比较值，比较值的规则和Comparable一致，</p><p>也可以实现Comparable相同的比较效果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//其他方法省略</span>
<span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**比较两个参数顺序 返回 负数 0 或 正数 分别表示 小于 等于 大于
     */</span>
    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> o1<span class="token punctuation">,</span> <span class="token class-name">T</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-comparable和comparator区别" tabindex="-1"><a class="header-anchor" href="#_3-comparable和comparator区别" aria-hidden="true">#</a> 3. Comparable和Comparator区别</h3><p>Java设计了Comparable接口，那么为什么还需要设计Comparator接口呢，两者区别是什么呢。</p><p><strong>首先Comparable接口和Comparator接口 都能提供比较能力并返回结果。这是他们的相同点，这是设计的初衷</strong></p><p>不同点：</p><ol><li>Comparable 表示一种能力，一般需要对象实现其接口，使其获取比较的能力。实现后 相当于本身具有比较能力。直接调用compareTo方法</li><li>Comparator 是一种工具，通过这种工具，可以将两种不具备比较的对象，区分出顺序。是借助外部工具</li></ol><h3 id="_4-java设计方式思考" tabindex="-1"><a class="header-anchor" href="#_4-java设计方式思考" aria-hidden="true">#</a> 4. Java设计方式思考</h3><p><strong>Java中有其实还有其他类似的设计。例如Iterable和iterator.都是这样。针对相同的能力尽可能的提供更多的渠道，可以实现它，或者使用工具，最终的目的都是达到需要实现的目的。根据这种类似案例，是否以后在开发业务或工具时，也提供更多的渠道供其他调用者使用</strong></p><h3 id="_5-其他类似案例" tabindex="-1"><a class="header-anchor" href="#_5-其他类似案例" aria-hidden="true">#</a> 5. 其他类似案例</h3><p>Iterable和Iterator</p><h3 id="_6-升序or降序" tabindex="-1"><a class="header-anchor" href="#_6-升序or降序" aria-hidden="true">#</a> 6. 升序Or降序</h3><p>在写比较器的时候老是纠结与到底哪个返回值是升序（从小到大），哪个返回值是降序（从大到小）。<br> 翻找源码，可以知道Comparator本质上是个交换（swap）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span> j<span class="token operator">&gt;</span>low <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>dest<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dest<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>
                    <span class="token function">swap</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码的意思是，当<code>dest[j-1] - dest[j] &gt; 0</code>时，就交换两个元素。</p><p>这样做其实就是从小到大排序（升序)，对应我们重写compareTo方法中，arg0-arg1；并且，我们可以从源码中理解，当两者相等或者j-1小于j时，是不会有任何处理的即：</p><p><strong>那么，如何从大到小（降序）进行排序呢？</strong></p><p>我们会在CompareTo方法中重写为arg1-arg0；明身处在j-1这个下标之后的dest[j]却往前了，产生了的效果就是大的放在了前面，小的放在了后面。</p><h3 id="_6-总结" tabindex="-1"><a class="header-anchor" href="#_6-总结" aria-hidden="true">#</a> 6. 总结</h3><ol><li>无论是arg0-arg1，还是arg1-arg0，都只需要看大于号的情况，小于等于的情况不需要管，即大于才交换原则。</li><li>arg0代表的是下标靠前的一个数，arg1代表的是下标靠后的一个数。</li></ol><p>本篇文章其实是FunctionalInterface函数式接口的扩展。在常用的Supplier、Consumer、Function、Predicate的FunctionalInterface以及各种类型扩展后。介绍了Comparable接口。并扩展介绍Comparable的功能含义以及Comparable和Comparator比较。</p><p>其实本篇在介绍Comparable接口功能时，列举的案例，输出结果都是都是升序的，那么你有没有想过，如果列举出倒序的结果呢，又有哪几种方式呢?</p>`,36),u={href:"https://blog.csdn.net/for2018/article/details/128212226",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const s=p("ExternalLinkIcon");return e(),o("div",null,[r,n("p",null,[a("本文转自 "),n("a",u,[a("https://blog.csdn.net/for2018/article/details/128212226"),c(s)]),a("，如有侵权，请联系删除。")])])}const b=t(i,[["render",d],["__file","Java-bijiaoqiComparableheComparator.html.vue"]]);export{b as default};
