import{_ as d,r as a,o as s,c,b as e,d as t,e as o,a as n}from"./app-ee4ba21e.js";const i={},r=n(`<h2 id="logcat-android日志工具" tabindex="-1"><a class="header-anchor" href="#logcat-android日志工具" aria-hidden="true">#</a> Logcat（Android日志工具）</h2><p>Logcat 是一个命令行工具，用于转储系统消息日志，包括设备抛出错误时的堆栈轨迹，以及从应用使用 <code>Log</code> 类写入的消息。</p><p><strong>日志记录系统概览</strong></p><p>Android 日志记录系统是系统进程 <code>logd</code> 维护的一组结构化环形缓冲区。这组可用的缓冲区是固定的，并由系统定义。最相关的缓冲区为：<code>main</code>（用于存储大多数应用日志）、<code>system</code>（用于存储源自 Android 操作系统的消息）和 <code>crash</code>（用于存储崩溃日志）。每个日志条目都包含一个优先级（<code>VERBOSE</code>、<code>DEBUG</code>、<code>INFO</code>、<code>WARNING</code>、<code>ERROR</code> 或 <code>FATAL</code>）、一个标识日志来源的标记以及实际的日志消息。</p><p>日志记录系统的主接口是共享库 <code>liblog</code> 及其头文件 <code>&lt;android/log.h&gt;</code>。所有语言特定的日志记录工具最终都会调用函数 <code>__android_log_write</code>。默认情况下，它会调用函数 <code>__android_log_logd_logger</code>，该函数使用套接字将日志条目发送到 <code>logd</code>。从 API 级别 30 开始，可通过调用 <code>__android_set_log_writer</code> 更改日志记录函数。</p><p>运行 <code>adb logcat</code> 显示的日志要经过四个级别的过滤：</p><ol><li><p>编译时过滤：根据编译设置，某些日志可能会从二进制文件中完全移除。例如，可以将 ProGuard 配置为从 Java 代码中移除对 <code>Log.d</code> 的调用。</p></li><li><p>系统属性过滤：<code>liblog</code> 会查询一组系统属性以确定要发送到 <code>logd</code> 的最低严重级别。如果日志具有 <code>MyApp</code> 标记，系统会检查以下属性，并且日志应包含最低严重级别的第一个字母（<code>V</code>、<code>D</code>、<code>I</code>、<code>W</code>、<code>E</code> 或 <code>S</code> 以停用所有日志）：</p></li><li><ul><li><code>log.tag.MyApp</code></li><li><code>persist.log.tag.MyApp</code></li><li><code>log.tag</code></li><li><code>persist.log.tag</code></li></ul></li><li><p>应用过滤：如果未设置任何属性，<code>liblog</code> 会使用 <code>__android_log_set_minimum_priority</code> 设置的最低优先级。默认设置为 <code>INFO</code>。</p></li><li><p>显示过滤：<code>adb logcat</code> 支持其他可减少 <code>logd</code> 显示的日志数量的过滤条件。</p></li></ol><p><strong>命令行语法</strong></p><p>如需通过 adb shell 运行 Logcat，一般用法如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>adb<span class="token punctuation">]</span> logcat <span class="token punctuation">[</span><span class="token operator">&lt;</span>option<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">..</span>. <span class="token punctuation">[</span><span class="token operator">&lt;</span>filter-spec<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如需获取 <code>logcat</code> 在线帮助，请启动设备，然后执行以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb logcat <span class="token parameter variable">--help</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><em>选项介绍</em></p>`,13),u=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"选项"),e("th",{style:{"text-align":"left"}},"说明")])],-1),p=e("td",{style:{"text-align":"left"}},[e("code",null,"-b <buffer>")],-1),g={style:{"text-align":"left"}},_=e("code",null,"events",-1),h=e("code",null,"radio",-1),b=e("code",null,"main",-1),f=e("code",null,"system",-1),m=e("code",null,"crash",-1),v={href:"https://developer.android.com/tools/debugging/debugging-log#alternativeBuffers",target:"_blank",rel:"noopener noreferrer"},y=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-c, --clear")]),e("td",{style:{"text-align":"left"}},[t("清除（清空）所选的缓冲区并退出。默认缓冲区集为 "),e("code",null,"main"),t("、"),e("code",null,"system"),t(" 和 "),e("code",null,"crash"),t("。如需清除所有缓冲区，请使用 "),e("code",null,"-b all -c"),t("。")])],-1),x=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-e <expr>, --regex=<expr>")]),e("td",{style:{"text-align":"left"}},[t("只输出日志消息与 "),e("code",null,"<expr>"),t(" 匹配的行，其中 "),e("code",null,"<expr>"),t(" 是正则表达式。"),e("br"),t("比如：adb logcat -e 客户端请求数据 -m 5"),e("br"),t("打印日志中包含“客户端请求数据”字样的5条数据")])],-1),k=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-m <count>, --max-count=<count>")]),e("td",{style:{"text-align":"left"}},[t("输出 "),e("code",null,"<count>"),t(" 行后退出。这样是为了与 "),e("code",null,"--regex"),t(" 配对，但可以独立运行。")])],-1),I=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"--print")]),e("td",{style:{"text-align":"left"}},[t("与 "),e("code",null,"--regex"),t(" 和 "),e("code",null,"--max-count"),t(" 配对，使内容绕过正则表达式过滤器，但仍能够在获得适当数量的匹配时停止。")])],-1),D=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-d")]),e("td",{style:{"text-align":"left"}},"将日志转储到屏幕并退出。")],-1),A=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-f <filename>")]),e("td",{style:{"text-align":"left"}},[t("将日志消息输出写入 "),e("code",null,"<filename>"),t("。默认值为 "),e("code",null,"stdout"),t("。")])],-1),P=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-g, --buffer-size")]),e("td",{style:{"text-align":"left"}},"输出指定日志缓冲区的大小并退出。")],-1),w=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-n <count>")]),e("td",{style:{"text-align":"left"}},[t("将轮替日志的数量上限设置为 "),e("code",null,"<count>"),t("。默认值为 4。需要使用 "),e("code",null,"-r"),t(" 选项。")])],-1),L=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-r <kbytes>")]),e("td",{style:{"text-align":"left"}},[t("每输出 "),e("code",null,"<kbytes>"),t(" 时轮替日志文件。默认值为 16。需要 "),e("code",null,"-f"),t(" 选项。")])],-1),M=e("td",{style:{"text-align":"left"}},[e("code",null,"-s")],-1),S={style:{"text-align":"left"}},E=e("code",null,"'*:S'",-1),N={href:"https://developer.android.com/studio/command-line/logcat#filteringOutput",target:"_blank",rel:"noopener noreferrer"},V=e("td",{style:{"text-align":"left"}},[e("code",null,"-v <format>")],-1),B={style:{"text-align":"left"}},U=e("code",null,"threadtime",-1),T={href:"https://developer.android.com/studio/command-line/logcat#outputFormat",target:"_blank",rel:"noopener noreferrer"},F=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-D, --dividers")]),e("td",{style:{"text-align":"left"}},"输出各个日志缓冲区之间的分隔线。")],-1),G=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-c")]),e("td",{style:{"text-align":"left"}},"清空（清除）整个日志并退出。")],-1),O=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-t <count>")]),e("td",{style:{"text-align":"left"}},[t("仅输出最新的行数。此选项包括 "),e("code",null,"-d"),t(" 功能。")])],-1),R=e("td",{style:{"text-align":"left"}},[e("code",null,"-t '<time>'")],-1),z={style:{"text-align":"left"}},W=e("code",null,"-d",-1),j={href:"https://developer.android.com/studio/command-line/logcat#quotes",target:"_blank",rel:"noopener noreferrer"},q=e("code",null,"adb logcat -t '01-26 20:52:41.820'",-1),$=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-T <count>")]),e("td",{style:{"text-align":"left"}},[t("输出自指定时间以来的最新行数。此选项不包括 "),e("code",null,"-d"),t(" 功能。")])],-1),C=e("td",{style:{"text-align":"left"}},[e("code",null,"-T '<time>'")],-1),J={style:{"text-align":"left"}},K=e("code",null,"-d",-1),H={href:"https://developer.android.com/studio/command-line/logcat#quotes",target:"_blank",rel:"noopener noreferrer"},Q=e("code",null,"adb logcat -t '01-26 20:52:41.820'",-1),X=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-L, -last")]),e("td",{style:{"text-align":"left"}},"在最后一次重新启动之前转储日志。")],-1),Y=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-B, --binary")]),e("td",{style:{"text-align":"left"}},"以二进制文件形式输出日志。")],-1),Z=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-S, --statistics")]),e("td",{style:{"text-align":"left"}},"在输出中包含统计信息，以帮助您识别和定位日志垃圾信息发送者。")],-1),ee=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-G <size>")]),e("td",{style:{"text-align":"left"}},[t("设置日志环形缓冲区的大小。可以在结尾处添加 "),e("code",null,"K"),t(" 或 "),e("code",null,"M"),t("，以指示单位为千字节或兆字节。")])],-1),te=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-p, --prune")]),e("td",{style:{"text-align":"left"}},[t("输出（读取）当前的允许 ("),e("code",null,"white"),t(") 列表和拒绝 ("),e("code",null,"black"),t(") 列表，不采用任何参数，如下所示："),e("code",null,"adb logcat -p")])],-1),le=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"-P '<list> ...'--prune '<list> ...' -P '<white_and_black_list>'")]),e("td",{style:{"text-align":"left"}},[t("写入（设置）允许 ("),e("code",null,"white"),t(") 列表和拒绝 ("),e("code",null,"black"),t(") 列表以出于特定目的调整日志记录内容。您可以提供允许 ("),e("code",null,"<white>"),t(") 列表和拒绝 ("),e("code",null,"~<black>"),t(") 列表条目的混合内容，其中 "),e("code",null,"<white>"),t(" 或 "),e("code",null,"<black>"),t(" 可以是 UID、UID/PID 或 /PID。在 Logcat 统计信息 ("),e("code",null,"logcat -S"),t(") 的指导下，您可以考虑出于各种目的调整允许 ("),e("code",null,"white"),t(") 列表和拒绝 ("),e("code",null,"black"),t(") 列表，例如：通过 UID 选择使特定日志记录内容具有最长保留期限。阻止人 (UID) 或物 (PID) 消耗相应资源，以帮助增加日志跨度，从而更深入地了解正在诊断的问题。默认情况下，日志记录系统会自动以动态方式阻止日志统计信息中最严重的违规内容，以便为新的日志消息腾出空间。一旦它用尽启发法，系统便会删除最旧的条目，以便为新消息腾出空间。添加许可名单 ("),e("code",null,"whitelist"),t(") 可保护您的 Android 识别码 (AID)，它会变成进程的 AID 和 GID，而不会被声明为违规内容；添加拒绝列表有助于在相应内容被视为最严重的违规内容之前即释放空间。您可以选择删除内容的程度和频率；也可以关闭删除功能，这样，系统便仅会移除各个日志缓冲区中最旧条目的内容。"),e("strong",null,"引号"),e("code",null,"adb logcat"),t(" 不会保留引号，因此指定允许 ("),e("code",null,"white"),t(") 列表和拒绝 ("),e("code",null,"black"),t(") 列表的语法如下所示："),e("code",null,`$ adb logcat -P '"<white_and_blacklist>"' *or* adb shell $ logcat -P '<white_and_blacklist>'`),t("以下示例指定了一个包含 PID 32676 和 UID 675 的允许 ("),e("code",null,"white"),t(") 列表，以及一个包含 PID 32677 和 UID 897 的拒绝 ("),e("code",null,"black"),t(") 列表。拒绝列表中的 PID 32677 经过加权处理，以便可以更快删除。"),e("code",null,`adb logcat -P '"/32676 675 ~/32677 897"'`),t("其他您可以使用的允许 ("),e("code",null,"white"),t(") 列表和拒绝 ("),e("code",null,"black"),t(") 列表命令变体如下所示："),e("code",null,"~! worst uid blacklist ~1000/! worst pid in system (1000)")])],-1),oe=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"--pid=<pid> ...")]),e("td",{style:{"text-align":"left"}},"仅输出来自给定 PID 的日志。")],-1),ne=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"--wrap")]),e("td",{style:{"text-align":"left"}},"休眠 2 小时或者当缓冲区即将封装时（两者取其先）。通过提供即将封装唤醒来提高轮询的效率。")],-1),de=n(`<p><strong>过滤日志输出</strong></p><ul><li>日志消息的标记是一个简短的字符串，指示消息所源自的系统组件（例如，“View”表示视图系统）。</li><li>优先级是以下字符值之一（按照从最低到最高优先级的顺序排列）：</li><li><ul><li><code>V</code>：详细（最低优先级）</li><li><code>D</code>：调试</li><li><code>I</code>：信息</li><li><code>W</code>：警告</li><li><code>E</code>：错误</li><li><code>F</code>：严重错误</li><li><code>S</code>：静默（最高优先级，绝不会输出任何内容）</li></ul></li></ul><p>通过运行 Logcat 并观察每条消息的前两列，您可以获取系统中使用的带有优先级的标记列表，格式为 <code>&lt;priority&gt;/&lt;tag&gt;</code>。</p><p>以下是使用 <code>logcat -v brief output</code> 命令获取的简短 Logcat 输出的示例。它表明消息与优先级“I”和标记“ActivityManager”相关：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>I/ActivityManager<span class="token punctuation">(</span>  <span class="token number">585</span><span class="token punctuation">)</span>: Starting activity: Intent <span class="token punctuation">{</span> <span class="token assign-left variable">action</span><span class="token operator">=</span>android.intent.action<span class="token punctuation">..</span>.<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如要将日志输出降低到可管理的水平，可以使用过滤器表达式限制日志输出。通过过滤器表达式，可以向系统指明感兴趣的标记/优先级组合，系统会针对指定的标记抑制其他消息。</p><p>过滤器表达式采用 <code>tag:priority ...</code> 格式，其中 <code>tag</code> 指示您感兴趣的标记，<code>priority</code> 指示可针对该标记报告的最低优先级。不低于指定优先级的标记的消息会写入日志。可以在一个过滤器表达式中提供任意数量的 <code>tag:priority</code> 规范。一系列规范使用空格分隔。</p><p>以下是一个过滤器表达式的示例，该表达式会抑制除标记为“ActivityManager”、优先级不低于“信息”的日志消息，以及标记为“MyApp”、优先级不低于“调试”的日志消息以外的所有其他日志消息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb logcat ActivityManager:I MyApp:D *:S
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述表达式中最后一个元素 <code>*:S</code> 将所有标记的优先级设为“静默”，从而确保系统仅显示标记为“ActivityManager”和“MyApp”的日志消息。使用 <code>*:S</code> 是确保日志输出受限于已明确指定的过滤器的绝佳方式，它可以让过滤器充当日志输出的“许可名单”。</p><p>以下过滤器表达式显示了优先级不低于“警告”的所有标记的所有日志消息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb logcat *:W
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>控制日志输出格式</strong></p><p>除标记和优先级外，日志消息还包含许多元数据字段。可以修改消息的输出格式，以便它们显示特定的元数据字段。为此，可以使用 <code>-v</code> 选项，并指定下列某一受支持的输出格式。</p><ul><li><code>brief</code>：显示优先级、标记以及发出消息的进程的 PID。</li><li><code>long</code>：显示所有元数据字段，并使用空白行分隔消息。</li><li><code>process</code>：仅显示 PID。</li><li><code>raw</code>：显示不包含其他元数据字段的原始日志消息。</li><li><code>tag</code>：仅显示优先级和标记。</li><li><code>thread:</code>：旧版格式，显示优先级、PID 以及发出消息的线程的 TID。</li><li><code>threadtime</code>（默认值）：显示日期、调用时间、优先级、标记、PID 以及发出消息的线程的 TID。</li><li><code>time</code>：显示日期、调用时间、优先级、标记以及发出消息的进程的 PID。</li></ul><p>启动 Logcat 时，您可以使用 <code>-v</code> 选项指定所需的输出格式：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>adb<span class="token punctuation">]</span> logcat <span class="token punctuation">[</span>-v <span class="token operator">&lt;</span>format<span class="token operator">&gt;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以下示例显示了如何生成输出格式为 <code>time</code> 的消息：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adb logcat <span class="token parameter variable">-v</span> <span class="token function">time</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，只能使用 <code>-v</code> 选项指定一种输出格式，但可以指定任意数量的有意义的修饰符。Logcat 会忽略没有意义的修饰符。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pidof com.ccc.tct 查询com.ccc.tct包名的pid
logcat <span class="token parameter variable">-b</span> all <span class="token parameter variable">--pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span>pidof com.ccc.tct<span class="token variable">\`</span></span> 根据包名查询日志
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,21),ae={href:"https://blog.csdn.net/a1sd1/article/details/121027771",target:"_blank",rel:"noopener noreferrer"};function se(ce,ie){const l=a("ExternalLinkIcon");return s(),c("div",null,[r,e("table",null,[u,e("tbody",null,[e("tr",null,[p,e("td",g,[t("加载可供查看的备用日志缓冲区，例如 "),_,t(" 或 "),h,t("。默认使用 "),b,t("、"),f,t(" 和 "),m,t(" 缓冲区集。请参阅"),e("a",v,[t("查看备用日志缓冲区"),o(l)]),t("。")])]),y,x,k,I,D,A,P,w,L,e("tr",null,[M,e("td",S,[t("相当于过滤器表达式 "),E,t("；它将所有标记的优先级设为“静默”，并用于放在可添加内容的过滤器表达式列表之前。如需了解详情，请转到介绍"),e("a",N,[t("过滤日志输出"),o(l)]),t("的部分。")])]),e("tr",null,[V,e("td",B,[t("设置日志消息的输出格式。默认格式为 "),U,t("。如需查看支持的格式列表，请参阅介绍"),e("a",T,[t("控制日志输出格式"),o(l)]),t("的部分。")])]),F,G,O,e("tr",null,[R,e("td",z,[t("输出自指定时间以来的最新行。此选项包括 "),W,t(" 功能。如需了解如何引用带有嵌入空格的参数，请参阅 "),e("a",j,[t("-P 选项"),o(l)]),t("。"),q])]),$,e("tr",null,[C,e("td",J,[t("输出自指定时间以来的最新行。此选项不包括 "),K,t(" 功能。如需了解如何引用带有嵌入空格的参数，请参阅 "),e("a",H,[t("-P 选项"),o(l)]),t("。"),Q])]),X,Y,Z,ee,te,le,oe,ne])]),de,e("p",null,[t("本文转自 "),e("a",ae,[t("https://blog.csdn.net/a1sd1/article/details/121027771"),o(l)]),t("，如有侵权，请联系删除。")])])}const ue=d(i,[["render",se],["__file","logcatrizhigongjushiyong.html.vue"]]);export{ue as default};
