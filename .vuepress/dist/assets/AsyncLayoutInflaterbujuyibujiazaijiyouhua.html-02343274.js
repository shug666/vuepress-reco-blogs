import{_ as t,r as e,o as p,c as o,b as s,d as n,e as c,a as l}from"./app-e8f85126.js";const i={},u=l(`<p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesaHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L01PdTJaTkF3WndPVEVoMWNpYmZqdVZiSFdvcHhDeVU4QTBZRm9zdUxUMEhVbVd5RFNDTTg3eXg5MHRCZ2hJaWNZZEttQ1YyOVJRNFAwSUx2cFRTNFg5amcvNjQw" alt=""></p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> <strong>前言</strong></h2><p>在_Android布局优化（一）从布局加载原理说起_中我们说到了布局加载的两大性能瓶颈，通过IO操作将XML加载到内存中并进行解析和通过反射创建View。</p><p>https://www.jianshu.com/p/8ca35e86d476</p><p>当xml文件过大或页面文件过深，布局的加载就会较为耗时。</p><p>我们知道，当主线程进行一些耗时操作可能就会导致页面卡顿，更严重的可能会产生ANR，所以我们能如何来进行布局加载优化呢？</p><p>解决这个问题有两种思路，直接解决和侧面缓解。</p><p>直接解决就是不使用IO和反射等技术（这个我们会在下一节进行介绍）。</p><p><strong>侧面缓解的就是既然耗时操作难以避免，那我们能不能把耗时操作放在子线程中，等到inflate操作完成后再将结果回调到主线程呢？</strong></p><p>答案当然是可以的，Android为我们提供了AsyncLayoutInflater类来进行异步布局加载</p><h2 id="asynclayoutinflater用法" tabindex="-1"><a class="header-anchor" href="#asynclayoutinflater用法" aria-hidden="true">#</a> AsyncLayoutInflater用法</h2><p>AsyncLayoutInflater的使用非常简单，就是把setContentView和一些view的初始化操作都放到了onInflateFinished回调中:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">AsyncLayoutInflater</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AsyncLayoutInflater<span class="token punctuation">.</span>OnInflateFinishedListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onInflateFinished</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token keyword">int</span> resid<span class="token punctuation">,</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">setContentView</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rv <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token punctuation">.</span>id<span class="token punctuation">.</span>tv_right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rv<span class="token punctuation">.</span><span class="token function">setLayoutManager</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">V7LinearLayoutManager</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            rv<span class="token punctuation">.</span><span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RightRvAdapter</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>AsyncLayoutInflater的源码非常短，也比较容易理解，总共只有170行左右。</p><h2 id="asynclayoutinflater构造方法和初始化" tabindex="-1"><a class="header-anchor" href="#asynclayoutinflater构造方法和初始化" aria-hidden="true">#</a> <strong>AsyncLayoutInflater构造方法和初始化</strong></h2><p>构造方法中做了三件事件</p><ol><li><p>创建BasicInflater</p></li><li><p>创建Handler</p></li><li><p>创建InflateThread</p></li></ol><p>inflate方法创建一个InflateRequest对象，并将resid、parent、callback等变量存储到这个对象中，并调用enqueue方法向队列中添加一个请求：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">AsyncLayoutInflater</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">&quot;AsyncLayoutInflater&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">LayoutInflater</span> mInflater<span class="token punctuation">;</span>
    <span class="token class-name">Handler</span> mHandler<span class="token punctuation">;</span>
    <span class="token class-name">InflateThread</span> mInflateThread<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AsyncLayoutInflater</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mInflater <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicInflater</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>mHandlerCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mInflateThread <span class="token operator">=</span> <span class="token class-name">InflateThread</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@UiThread</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inflate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> resid<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">OnInflateFinishedListener</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;callback argument may not be null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">InflateRequest</span> request <span class="token operator">=</span> mInflateThread<span class="token punctuation">.</span><span class="token function">obtainRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>inflater <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>resid <span class="token operator">=</span> resid<span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
        mInflateThread<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inflatethread" tabindex="-1"><a class="header-anchor" href="#inflatethread" aria-hidden="true">#</a> <strong>InflateThread</strong></h3><p>这个类的主要作用就是创建一个子线程，将inflate请求添加到阻塞队列中，并按顺序执行BasicInflater.inflate操作（BasicInflater实际上就是LayoutInflater的子类）。</p><p>不管infalte成功或失败后，都会将request消息发送给主线程做处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InflateThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InflateThread</span> sInstance<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InflateThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sInstance<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">InflateThread</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
        <span class="token comment">//生产者-消费者模型，阻塞队列</span>
    <span class="token keyword">private</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InflateRequest</span><span class="token punctuation">&gt;</span></span> mQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//使用了对象池来缓存InflateThread对象，减少对象重复多次创建，避免内存抖动</span>
    <span class="token keyword">private</span> <span class="token class-name">SynchronizedPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InflateRequest</span><span class="token punctuation">&gt;</span></span> mRequestPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronizedPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InflateRequest</span> request<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//从队列中取出一条请求，如果没有则阻塞</span>
            request <span class="token operator">=</span> mQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Odd, just continue</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">//inflate操作（通过调用BasicInflater类）</span>
            request<span class="token punctuation">.</span>view <span class="token operator">=</span> request<span class="token punctuation">.</span>inflater<span class="token punctuation">.</span>mInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>
                    request<span class="token punctuation">.</span>resid<span class="token punctuation">,</span> request<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 回退机制：如果inflate失败，回到主线程去inflate</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Failed to inflate resource in the background! Retrying on the UI&quot;</span>
                    <span class="token operator">+</span> <span class="token string">&quot; thread&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//inflate成功或失败，都将request发送到主线程去处理</span>
        <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>inflater<span class="token punctuation">.</span>mHandler<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//死循环（实际不会一直执行，内部是会阻塞等待的）</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">runInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//从对象池缓存中取出一个InflateThread对象</span>
    <span class="token keyword">public</span> <span class="token class-name">InflateRequest</span> <span class="token function">obtainRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InflateRequest</span> obj <span class="token operator">=</span> mRequestPool<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InflateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//对象池缓存中的对象的数据清空，便于对象复用</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseRequest</span><span class="token punctuation">(</span><span class="token class-name">InflateRequest</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span>callback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>inflater <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>resid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        mRequestPool<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//将inflate请求添加到ArrayBlockingQueue（阻塞队列）中</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">InflateRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            mQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;Failed to enqueue async inflate request&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inflaterequest" tabindex="-1"><a class="header-anchor" href="#inflaterequest" aria-hidden="true">#</a> <strong>InflateRequest</strong></h3><p>InflateRequest其实就可以理解为主线程和子线程之间传递的数据模型，类似Message的作用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InflateRequest</span> <span class="token punctuation">{</span>
    <span class="token class-name">AsyncLayoutInflater</span> inflater<span class="token punctuation">;</span>
    <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">;</span>
    <span class="token keyword">int</span> resid<span class="token punctuation">;</span>
    <span class="token class-name">View</span> view<span class="token punctuation">;</span>
    <span class="token class-name">OnInflateFinishedListener</span> callback<span class="token punctuation">;</span>

    <span class="token class-name">InflateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="basicinflater" tabindex="-1"><a class="header-anchor" href="#basicinflater" aria-hidden="true">#</a> <strong>BasicInflater</strong></h3><p>BasicInflater 继承自 LayoutInflater，只是覆写了 onCreateView：优先加载这三个前缀的 Layout，然后才按照默认的流程去加载，因为大多数情况下我们 Layout 中使用的View都在这三个 package 下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BasicInflater</span> <span class="token keyword">extends</span> <span class="token class-name">LayoutInflater</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sClassPrefixList <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;android.widget.&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;android.webkit.&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;android.app.&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">BasicInflater</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">LayoutInflater</span> <span class="token function">cloneInContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> newContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BasicInflater</span><span class="token punctuation">(</span>newContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> prefix <span class="token operator">:</span> sClassPrefixList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//优先加载&quot;android.widget.”、 &quot;android.webkit.&quot;、&quot;android.app.&quot;</span>
                <span class="token class-name">View</span> view <span class="token operator">=</span> <span class="token function">createView</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> view<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateView</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="mhandlercallback" tabindex="-1"><a class="header-anchor" href="#mhandlercallback" aria-hidden="true">#</a> <strong>mHandlerCallback</strong></h3><p>这里就是在主线程中handleMessage的操作，这里有一个回退机制，就是当子线程中inflate失败后，会继续再主线程中进行inflate操作，最终通过OnInflateFinishedListener接口将view回调到主线程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Callback</span> mHandlerCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InflateRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InflateRequest</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>view <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//view == null说明inflate失败</span>
            <span class="token comment">//继续再主线程中进行inflate操作</span>
            request<span class="token punctuation">.</span>view <span class="token operator">=</span> mInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>
                    request<span class="token punctuation">.</span>resid<span class="token punctuation">,</span> request<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//回调到主线程</span>
        request<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">onInflateFinished</span><span class="token punctuation">(</span>
                request<span class="token punctuation">.</span>view<span class="token punctuation">,</span> request<span class="token punctuation">.</span>resid<span class="token punctuation">,</span> request<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mInflateThread<span class="token punctuation">.</span><span class="token function">releaseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="oninflatefinishedlistener" tabindex="-1"><a class="header-anchor" href="#oninflatefinishedlistener" aria-hidden="true">#</a> <strong>OnInflateFinishedListener</strong></h3><p>布局加载完成后，通过OnInflateFinishedListener将加载完成后的view回调出来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnInflateFinishedListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">onInflateFinished</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token keyword">int</span> resid<span class="token punctuation">,</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="asynclayoutinflater的局限性及改进" tabindex="-1"><a class="header-anchor" href="#asynclayoutinflater的局限性及改进" aria-hidden="true">#</a> AsyncLayoutInflater的局限性及改进</h2><p>使用AsyncLayoutInflate主要有如下几个局限性：</p><ol><li><p>所有构建的View中必须不能直接使用 Handler 或者是调用 Looper.myLooper()，因为异步线程默认没有调用 Looper.prepare ()</p></li><li><p>异步转换出来的 View 并没有被加到 parent view中，AsyncLayoutInflater 是调用了 LayoutInflater.inflate(int, ViewGroup, false)，因此如果需要加到 parent view 中，就需要我们自己手动添加；</p></li><li><p>AsyncLayoutInflater 不支持设置 LayoutInflater.Factory 或者 LayoutInflater.Factory2</p></li><li><p>同时缓存队列默认 10 的大小限制如果超过了10个则会导致主线程的等待</p></li><li><p>使用单线程来做全部的 inflate 工作，如果一个界面中 layout 很多不一定能满足需求</p></li></ol><p>那我们如何来解决这些问题呢？AsyncLayoutInflate类修饰为 final ，所以不能通过继承重写父类来实现。</p><p>庆幸的是AsyncLayoutInflate的代码非常短而且相对简单，所以我们可以直接把AsyncLayoutInflate的代码复制出来一份，然后在这基础之上进行改进优化。</p><p>接下来我们主要从两个方面来进行优化</p><ol><li><strong>引入线程池，减少单线程等待</strong></li><li><strong>手动设置setFactory2</strong></li></ol><h2 id="asynclayoutinflateplus优化源码" tabindex="-1"><a class="header-anchor" href="#asynclayoutinflateplus优化源码" aria-hidden="true">#</a> AsyncLayoutInflatePlus优化源码</h2><p>直接上代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncLayoutInflatePlus</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">&quot;AsyncLayoutInflatePlus&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Pools<span class="token punctuation">.</span>SynchronizedPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InflateRequest</span><span class="token punctuation">&gt;</span></span> mRequestPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pools<span class="token punctuation">.</span>SynchronizedPool</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LayoutInflater</span> mInflater<span class="token punctuation">;</span>
    <span class="token class-name">Handler</span> mHandler<span class="token punctuation">;</span>
    <span class="token class-name">Dispather</span> mDispatcher<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">AsyncLayoutInflatePlus</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mInflater <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasicInflater</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>mHandlerCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
        mDispatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@UiThread</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">inflate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> resid<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">OnInflateFinishedListener</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;callback argument may not be null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">InflateRequest</span> request <span class="token operator">=</span> <span class="token function">obtainRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>inflater <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>resid <span class="token operator">=</span> resid<span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>parent <span class="token operator">=</span> parent<span class="token punctuation">;</span>
        request<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>
        mDispatcher<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Handler<span class="token punctuation">.</span>Callback</span> mHandlerCallback <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler<span class="token punctuation">.</span>Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">InflateRequest</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InflateRequest</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span>obj<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>view <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                request<span class="token punctuation">.</span>view <span class="token operator">=</span> mInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>
                        request<span class="token punctuation">.</span>resid<span class="token punctuation">,</span> request<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            request<span class="token punctuation">.</span>callback<span class="token punctuation">.</span><span class="token function">onInflateFinished</span><span class="token punctuation">(</span>
                    request<span class="token punctuation">.</span>view<span class="token punctuation">,</span> request<span class="token punctuation">.</span>resid<span class="token punctuation">,</span> request<span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">releaseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnInflateFinishedListener</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">onInflateFinished</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> view<span class="token punctuation">,</span> <span class="token annotation punctuation">@LayoutRes</span> <span class="token keyword">int</span> resid<span class="token punctuation">,</span>
                               <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InflateRequest</span> <span class="token punctuation">{</span>
        <span class="token class-name">AsyncLayoutInflatePlus</span> inflater<span class="token punctuation">;</span>
        <span class="token class-name">ViewGroup</span> parent<span class="token punctuation">;</span>
        <span class="token keyword">int</span> resid<span class="token punctuation">;</span>
        <span class="token class-name">View</span> view<span class="token punctuation">;</span>
        <span class="token class-name">OnInflateFinishedListener</span> callback<span class="token punctuation">;</span>

        <span class="token class-name">InflateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Dispather</span> <span class="token punctuation">{</span>

        <span class="token comment">//获得当前CPU的核心数</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CPU_COUNT</span> <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置线程池的核心线程数2-4之间,但是取决于CPU核数</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token constant">CPU_COUNT</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//设置线程池的最大线程数为 CPU核数 * 2 + 1</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAXIMUM_POOL_SIZE</span> <span class="token operator">=</span> <span class="token constant">CPU_COUNT</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//设置线程池空闲线程存活时间30s</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEEP_ALIVE_SECONDS</span> <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadFactory</span> sThreadFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicInteger</span> mCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">&quot;AsyncLayoutInflatePlus #&quot;</span> <span class="token operator">+</span> mCount<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token comment">//LinkedBlockingQueue 默认构造器，队列容量是Integer.MAX_VALUE</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> sPoolWorkQueue <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token doc-comment comment">/**
         * An <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Executor</span></span><span class="token punctuation">}</span> that can be used to execute tasks in parallel.
         */</span>
        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token constant">THREAD_POOL_EXECUTOR</span><span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;static initializer: &quot;</span> <span class="token operator">+</span> <span class="token string">&quot; CPU_COUNT = &quot;</span> <span class="token operator">+</span> <span class="token constant">CPU_COUNT</span> <span class="token operator">+</span> <span class="token string">&quot; CORE_POOL_SIZE = &quot;</span> <span class="token operator">+</span> <span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">+</span> <span class="token string">&quot; MAXIMUM_POOL_SIZE = &quot;</span> <span class="token operator">+</span> <span class="token constant">MAXIMUM_POOL_SIZE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>
                    <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">MAXIMUM_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token constant">KEEP_ALIVE_SECONDS</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
                    sPoolWorkQueue<span class="token punctuation">,</span> sThreadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token constant">THREAD_POOL_EXECUTOR</span> <span class="token operator">=</span> threadPoolExecutor<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token class-name">InflateRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token constant">THREAD_POOL_EXECUTOR</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InflateRunnable</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BasicInflater</span> <span class="token keyword">extends</span> <span class="token class-name">LayoutInflater</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sClassPrefixList <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token string">&quot;android.widget.&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;android.webkit.&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;android.app.&quot;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token class-name">BasicInflater</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 手动setFactory2，兼容AppCompatTextView等控件</span>
                <span class="token class-name">AppCompatDelegate</span> appCompatDelegate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AppCompatActivity</span><span class="token punctuation">)</span> context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>appCompatDelegate <span class="token keyword">instanceof</span> <span class="token class-name">LayoutInflater<span class="token punctuation">.</span>Factory2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">LayoutInflaterCompat</span><span class="token punctuation">.</span><span class="token function">setFactory2</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">LayoutInflater<span class="token punctuation">.</span>Factory2</span><span class="token punctuation">)</span> appCompatDelegate<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">LayoutInflater</span> <span class="token function">cloneInContext</span><span class="token punctuation">(</span><span class="token class-name">Context</span> newContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BasicInflater</span><span class="token punctuation">(</span>newContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token class-name">View</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">AttributeSet</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> prefix <span class="token operator">:</span> sClassPrefixList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">View</span> view <span class="token operator">=</span> <span class="token function">createView</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> view<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// In this case we want to let the base class take a crack</span>
                    <span class="token comment">// at it.</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateView</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InflateRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token class-name">InflateRequest</span> request<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">boolean</span> isRunning<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">InflateRunnable</span><span class="token punctuation">(</span><span class="token class-name">InflateRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                request<span class="token punctuation">.</span>view <span class="token operator">=</span> request<span class="token punctuation">.</span>inflater<span class="token punctuation">.</span>mInflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>
                        request<span class="token punctuation">.</span>resid<span class="token punctuation">,</span> request<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Probably a Looper failure, retry on the UI thread</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Failed to inflate resource in the background! Retrying on the UI&quot;</span>
                        <span class="token operator">+</span> <span class="token string">&quot; thread&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>inflater<span class="token punctuation">.</span>mHandler<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">sendToTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> isRunning<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token class-name">InflateRequest</span> <span class="token function">obtainRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">InflateRequest</span> obj <span class="token operator">=</span> mRequestPool<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InflateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseRequest</span><span class="token punctuation">(</span><span class="token class-name">InflateRequest</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span>callback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>inflater <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>parent <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>resid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        obj<span class="token punctuation">.</span>view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        mRequestPool<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mHandler<span class="token punctuation">.</span><span class="token function">removeCallbacksAndMessages</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mHandlerCallback <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h2><p>本文介绍了通过异步的方式进行布局加载，缓解了主线程的压力。同时也介绍了AsyncLayoutInflate的实现原理以及如何定制自己的AsyncLayoutInflate。</p><p>本文的定制方式仅仅只是作为一个参考，具体的实现方式可以根据自己项目的实际情况来定制。</p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>AsyncLayoutInflater 在内部 InflateThread 有一个死循环：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InflateThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">runInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会一直占用主线程的Looper，导致应用闲时任务 IdleHandler 得不到执行。</p>`,52),k={href:"https://blog.csdn.net/qq_33209777/article/details/104037356",target:"_blank",rel:"noopener noreferrer"};function r(d,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("本文转自 "),s("a",k,[n("https://blog.csdn.net/qq_33209777/article/details/104037356"),c(a)]),n("，如有侵权，请联系删除。")])])}const b=t(i,[["render",r],["__file","AsyncLayoutInflaterbujuyibujiazaijiyouhua.html.vue"]]);export{b as default};
