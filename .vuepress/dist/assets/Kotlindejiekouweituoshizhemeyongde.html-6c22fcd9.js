import{_ as e,r as t,o as p,c as o,b as s,d as n,e as c,a as l}from"./app-e8f85126.js";const i={},u=l(`<p>Kotlin 的 <code>by</code> 关键字，我们平时用得挺多的，比如用 <code>by lazy</code> 来设置属性的懒加载：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> lazyUser <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>
    <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种写法叫「属性委托」，也就是把属性的读写操作委托给另一个对象。</p><p>除了这种写法，<code>by</code> 其实还能写在类声明里，在实现的接口的右边：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">IntrinsicsMeasureScope</span><span class="token punctuation">(</span>
    intrinsicMeasureScope<span class="token operator">:</span> IntrinsicMeasureScope<span class="token punctuation">,</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> layoutDirection<span class="token operator">:</span> LayoutDirection<span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> MeasureScope<span class="token punctuation">,</span> IntrinsicMeasureScope <span class="token keyword">by</span> intrinsicMeasureScope <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种写法，Kotlin 官方的叫法是 Delegation，中文叫委托，实际上它就是接口委托，功能是把类对接口的实现委托给指定的对象。</p><p>它在概念上其实很简单，官方文档就写得清清楚楚：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Base <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">printMessageLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">BaseImpl</span><span class="token punctuation">(</span><span class="token keyword">val</span> x<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> Base <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">printMessageLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">Derived</span><span class="token punctuation">(</span>b<span class="token operator">:</span> Base<span class="token punctuation">)</span> <span class="token operator">:</span> Base <span class="token keyword">by</span> b <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;abc&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> b <span class="token operator">=</span> <span class="token function">BaseImpl</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
    <span class="token function">Derived</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">Derived</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printMessageLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但正是这种简单，也带来了一些迷惑：怎么括号里面外面都是它呀？</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images9699df7ccfb77.png" alt="9699df7ccfb77"></p><p>这种量子纠缠的结构，让人有点摸不明白：这啥意思呀？我应该怎么用、什么时候用？以及如果我看到别人写了这样的代码，应该怎么去理解？</p><h2 id="java-的委托模式" tabindex="-1"><a class="header-anchor" href="#java-的委托模式" aria-hidden="true">#</a> Java 的委托模式</h2><p>实际上 Kotlin 的这种语法虽然比较新，但它背后的设计模式是早就有了的，叫做「委托模式」。委托模式指的是把类的一部分功能委托给一个辅助对象，比如 Android 里 <code>View</code> 这个类的点击回调功能，就是通过 <code>setOnClickListener()</code> 方法来委托给了一个 <code>OnClickListener</code> 类型的对象：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>view<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个非常典型的委托模式的案例。</p><p>委托模式还有个变种，是把类对于接口的实现，局部地或者完全地委托给自己内部的一个成员对象。比如 Android 里有一个叫做 <code>ContextWrapper</code> 的类，它实现了 <code>Context</code> 接口，但在 <code>ContextWrapper</code> 的内部，对于这个接口的每个的实现，全都委托给了自己内部的一个 <code>Context</code> 类型的成员变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContextWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@UnsupportedAppUsage</span>
    <span class="token class-name">Context</span> mBase<span class="token punctuation">;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">public</span> <span class="token class-name">ContextWrapper</span><span class="token punctuation">(</span><span class="token class-name">Context</span> base<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mBase <span class="token operator">=</span> base<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AssetManager</span> <span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mBase<span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Resources</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mBase<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PackageManager</span> <span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mBase<span class="token punctuation">.</span><span class="token function">getPackageManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ContentResolver</span> <span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mBase<span class="token punctuation">.</span><span class="token function">getContentResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Looper</span> <span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mBase<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getMainExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mBase<span class="token punctuation">.</span><span class="token function">getMainExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Context</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mBase<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么啰嗦着套一层是为了什么呢？它可以让实现类不用关心接口的核心功能的具体实现，而只要关注额外的功能定制和扩展。</p><p>什么意思？我们再举个例子，比如对于 Java 的 <code>List</code> 这个接口，我们可以用 <code>ArrayList</code> 和 <code>LinkedList</code> 这两个类对它做出不同的内部实现，去应对不同的性能需求。这种对于接口的核心功能的实现，是不需要委托模式的。而如果我想给 <code>List</code> 接口定制额外的功能，比如我想定制一个元素类型是 <code>User</code> 的 <code>List</code>，让它有各种和用户相关的功能，像「筛出高风险用户」、「按年龄重排」这样的，那么我应该继承 <code>ArrayList</code> 还是 <code>LinkedList</code> 呢？我只能两个都继承，各自实现一遍。是吧？但相比之下，一个更合适的选择就是，我去直接实现 <code>List</code> 接口，在实现类的内部设置一个 <code>List</code> 类型的成员，来让它作为核心功能的代理：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserList</span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UserList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userList <span class="token operator">=</span> userList<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，就可以随便给它加功能了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserList</span> <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">UserList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">highRiskUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sortWithAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里面的 <code>List</code> 对象具体是用 <code>ArrayList</code> 还是 <code>LinkedList</code> 或者别的实现，都无所谓，你想用哪个填哪个。也就是，我扩展出来的功能对 <code>ArrayList</code> 和 <code>LinkedList</code> 都是适用的。对吧？</p><p>通过这种写法，我就可以对接口进行功能扩展，而不需要关心接口的核心功能是怎么实现的。很自由很方便。</p><p>但是……这么一大长串的方法重写，多多少少有点啰嗦，是吧？那也没办法，这已经是最优解法了。</p><p>不过！咱说的是 Java。</p><h2 id="kotlin-的接口委托" tabindex="-1"><a class="header-anchor" href="#kotlin-的接口委托" aria-hidden="true">#</a> Kotlin 的接口委托</h2><p>同样的做法，你用 Kotlin 也能写：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">UserList</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> list<span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> size<span class="token operator">:</span> Int <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> list<span class="token punctuation">.</span>size

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">=</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ListIterator<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">listIterator</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> ListIterator<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">subList</span><span class="token punctuation">(</span>fromIndex<span class="token operator">:</span> Int<span class="token punctuation">,</span> toIndex<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>element<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">containsAll</span><span class="token punctuation">(</span>elements<span class="token operator">:</span> Collection<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但其实 Kotlin 有更简便的写法，也就是咱刚才说的：接口委托。你只要把 <code>list</code> 参数放在接口的右边用 <code>by</code> 连接起来：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">UserList</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> list<span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token keyword">by</span> list <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> size<span class="token operator">:</span> Int <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> list<span class="token punctuation">.</span>size

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">=</span> list<span class="token punctuation">[</span>index<span class="token punctuation">]</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ListIterator<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">listIterator</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> ListIterator<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">subList</span><span class="token punctuation">(</span>fromIndex<span class="token operator">:</span> Int<span class="token punctuation">,</span> toIndex<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>element<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">containsAll</span><span class="token punctuation">(</span>elements<span class="token operator">:</span> Collection<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就自动实现了这种委托。下面那一堆函数重写就都可以删掉了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">UserList</span><span class="token punctuation">(</span>list<span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token keyword">by</span> list <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后你想加什么功能，正常加就可以了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">UserList</span><span class="token punctuation">(</span>list<span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token keyword">by</span> list <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">highRiskUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">sortWithAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是 Kotlin 的委托，或者说接口委托。</p><p>别光觉得不错啊，看完视频，该不会用还不会用，那可不行。小结一下，干嘛用的？当你想让一个类实现某个接口，但不想关心核心实现，只想给它做功能拓展，那么就用 <code>by</code> 关键字来个接口委托，让核心实现由指定对象进行插件式提供。是吧？</p><p>当然了，对 Kotlin 来说，做功能拓展也可以用扩展函数和扩展属性，这个你可以自己选，看情况而定。</p><p>在 Jetpack Compose 的 <code>LazyColumn()</code> 和 <code>LazyRow()</code> 组件里都用到了一个叫做 <code>LazyListMeasureResult�</code> 的类，它就是用委托来对 <code>MeasureResult</code> 这个接口进行的拓展：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">LazyListMeasureResult</span><span class="token punctuation">(</span>
    <span class="token comment">// properties defining the scroll position:</span>
    <span class="token comment">/** The new first visible item.*/</span>
    <span class="token keyword">val</span> firstVisibleItem<span class="token operator">:</span> LazyListMeasuredItem<span class="token operator">?</span><span class="token punctuation">,</span>
    <span class="token comment">/** The new value for [LazyListState.firstVisibleItemScrollOffset].*/</span>
    <span class="token keyword">val</span> firstVisibleItemScrollOffset<span class="token operator">:</span> Int<span class="token punctuation">,</span>
    <span class="token comment">/** True if there is some space available to continue scrolling in the forward direction.*/</span>
    <span class="token keyword">val</span> canScrollForward<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
    <span class="token comment">/** The amount of scroll consumed during the measure pass.*/</span>
    <span class="token keyword">val</span> consumedScroll<span class="token operator">:</span> Float<span class="token punctuation">,</span>
    <span class="token comment">/** MeasureResult defining the layout.*/</span>
    measureResult<span class="token operator">:</span> MeasureResult<span class="token punctuation">,</span>
    <span class="token comment">/** The amount of scroll-back that happened due to reaching the end of the list. */</span>
    <span class="token keyword">val</span> scrollBackAmount<span class="token operator">:</span> Float<span class="token punctuation">,</span>
    <span class="token comment">// properties representing the info needed for LazyListLayoutInfo:</span>
    <span class="token comment">/** see [LazyListLayoutInfo.visibleItemsInfo] */</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> visibleItemsInfo<span class="token operator">:</span> List<span class="token operator">&lt;</span>LazyListItemInfo<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token comment">/** see [LazyListLayoutInfo.viewportStartOffset] */</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> viewportStartOffset<span class="token operator">:</span> Int<span class="token punctuation">,</span>
    <span class="token comment">/** see [LazyListLayoutInfo.viewportEndOffset] */</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> viewportEndOffset<span class="token operator">:</span> Int<span class="token punctuation">,</span>
    <span class="token comment">/** see [LazyListLayoutInfo.totalItemsCount] */</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> totalItemsCount<span class="token operator">:</span> Int<span class="token punctuation">,</span>
    <span class="token comment">/** see [LazyListLayoutInfo.reverseLayout] */</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> reverseLayout<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
    <span class="token comment">/** see [LazyListLayoutInfo.orientation] */</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> orientation<span class="token operator">:</span> Orientation<span class="token punctuation">,</span>
    <span class="token comment">/** see [LazyListLayoutInfo.afterContentPadding] */</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> afterContentPadding<span class="token operator">:</span> Int<span class="token punctuation">,</span>
    <span class="token comment">/** see [LazyListLayoutInfo.mainAxisItemSpacing] */</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> mainAxisItemSpacing<span class="token operator">:</span> Int
<span class="token punctuation">)</span> <span class="token operator">:</span> LazyListLayoutInfo<span class="token punctuation">,</span> MeasureResult <span class="token keyword">by</span> measureResult <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> viewportSize<span class="token operator">:</span> IntSize
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">IntSize</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> beforeContentPadding<span class="token operator">:</span> Int <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span>viewportStartOffset
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它没有实现 <code>MeasureResult</code> 的任何核心功能，这些核心功能全都交给了委托对象；它只是作为一个针对 <code>LazyList()</code> 的 <code>MeasureResult</code>，添加了很多额外的属性进来。</p><p>你看，挺好用，也挺容易用的，是吧？</p><h3 id="对核心功能进行定制修改" tabindex="-1"><a class="header-anchor" href="#对核心功能进行定制修改" aria-hidden="true">#</a> 对核心功能进行定制修改</h3><p>延伸一下。除了增加额外功能，接口委托也可以对接口的核心功能进行定制或者修改。比如 Kotlin 协程的源码有一个 <code>SubscribedSharedFlow</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">class</span> SubscribedSharedFlow<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> sharedFlow<span class="token operator">:</span> SharedFlow<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> action<span class="token operator">:</span> <span class="token keyword">suspend</span> FlowCollector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit
<span class="token punctuation">)</span> <span class="token operator">:</span> SharedFlow<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token keyword">by</span> sharedFlow <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">collect</span><span class="token punctuation">(</span>collector<span class="token operator">:</span> FlowCollector<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span>
        sharedFlow<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">SubscribedFlowCollector</span><span class="token punctuation">(</span>collector<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它对 <code>SharedFlow</code> 接口进行了委托，但并没有完全交给委托对象，而是重写了这个接口的 <code>collect()</code> 函数，对它进行了修改定制。——当你在实现类里重写了接口的某个函数，那么这个函数就不再交给委托对象，而是以你重写的为准。这样就很灵活，你可以按需求对接口进行局部定制。算是个延伸用法。</p>`,46),r={href:"https://rengwuxian.com/delegation/",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("本文转自 "),s("a",r,[n("https://rengwuxian.com/delegation/"),c(a)]),n("，如有侵权，请联系删除。")])])}const b=e(i,[["render",k],["__file","Kotlindejiekouweituoshizhemeyongde.html.vue"]]);export{b as default};
