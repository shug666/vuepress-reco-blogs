import{_ as t,r as o,o as r,c as i,b as e,d as a,e as c,a as l}from"./app-f541e591.js";const s={},n=l('<p>apk本质上就是一个zip包</p><h2 id="_1-apk安装" tabindex="-1"><a class="header-anchor" href="#_1-apk安装" aria-hidden="true">#</a> 1. Apk安装</h2><p>常见的apk安装方式有三种:</p><ol><li>系统自带的应用和厂商预装的应用. 没错, 系统自带的应用其实也是apk, 其安装是在系统首次启动时完成的. 这也就是为什么root后可以卸载系统自带应用.没有安装界面.</li><li>通过存储介质安装. 最常见的就是通过sd卡放置apk或者网上下载apk方式安装.通过 packageinstaller.apk来处理安装及卸载的过程的界面</li><li>adb命令安装. 这应该是开发者最熟悉的安装方式了, 包括<code>adb install</code>和<code>adb pm install</code>.没有安装界面.</li></ol><p>三种安装方式, 在安装apk时最终都是同一套流程, 即处理apk文件的流程. 安装过程可以归结为以下几个步骤:</p><ol><li>将apk文件拷贝到指定目录下. 系统应用是在<code>/system/app</code>, 第三方应用在<code>/data/app</code>下.</li><li>解压apk, 拷贝文件. 创建UID, 创建<code>/data/data/${package_name}</code>目录, 设置权限. 这个就是应用的数据目录.</li><li>从apk中提取dex, 放到<code>/data/dalvik-cache</code>目录.</li><li>解析<code>AndroidManifest.xml</code>文件, 提取信息添加到<code>PMS</code>中, <strong>更新PMS中相应的数据结构. 具体是, 将提取到的包信息更新到<code>/data/system/packages.list</code>和<code>/data/system/packages.xml</code></strong>.</li><li>发送广播<code>Intent.ACTION_PACKAGE_ADDED</code>或者<code>Intent.ACTION_PACKAGE_REPLACED</code>. 从名字可以判断分别对应全新安装和覆盖安装.</li></ol><p>Android中每个app都要一个<code>userId(UID)</code>的原因：Android在系统设计上把每个应用当做Linux系统上的一个用户对待,这样就可以利用已有的Linux用户管理机制来设计Android应用,比如应用目录/应用权限/应用进程管理等.</p><ul><li>系统自带的以及厂商预装的app, 在手机首次启动时, 会通过扫描<code>/system/app</code> <code>/system/framework</code> <code>/vendor/app</code>等目录下面的APK文件, 完成安装. 原生系统没有<code>vendor</code>(供应商)目录.</li><li>至于通过<code>adb push</code>的方式, 如果root过, 完全可以推送到系统目录, 以系统应用的方式进行安装. 系统应用的好处是系统在启动的时候就会将apk进行解压复制, 坏处是没办法热更新等. 推送到一般目录, 则可以使用系统命令<code>/bin/pm</code>安装apk文件. <code>pm</code>就是一个可执行文件版的<code>PackageManager</code>. 最终调用<code>PackageManager.installPackage() -&gt; PackageManagerService.installPacakge()</code>进行安装. 顺便一提, 具有<code>INSTALL_PACKAGES</code>权限就可以自己调用这个方法进行apk安装.</li></ul><h3 id="安装过程" tabindex="-1"><a class="header-anchor" href="#安装过程" aria-hidden="true">#</a> 安装过程</h3><p>扫描apk安装， 主要是<code>PackageManagerService</code>进行安装包扫描和解析工作. 信息解析完毕后存在特定数据结构中(<code>PackageParser.Package</code>), 此后需要进行信息同步工作. 这是因为, 扫描到的APK可能是已经更名的包/disable的包/需要升级的包/已经安装但签名冲突的包/替换了系统包的非系统包等情况, 需要处理这些情况, 保证最终信息正确.<br> 如果包需要进行<code>Rename</code>或者<code>Update</code>, 则需要签名比较.<br> 而使用<code>adb shell pm</code>安装略有不同, 是由<code>com.android.commands.pm.Pm</code>中的<code>runInstall</code>来安装的(<code>adb install</code>最终也是调用的<code>shell pm</code>).</p><h3 id="核心函数scanpackagedirtyli" tabindex="-1"><a class="header-anchor" href="#核心函数scanpackagedirtyli" aria-hidden="true">#</a> 核心函数scanPackageDirtyLI</h3><p>系统最初调用<code>installPackageAsUser</code>检查是否有安装权限, 安装APK的整个过程在<code>PackageHandler</code>中进行, 主要分为 拷贝APK(检查是否有足够空间)-&gt;扫描APK-&gt;安装后处理(主要是发送广播信息), 其中最关键的一步就是扫描APK, 由函数<code>scanPackageLI</code>完成, 该函数里面调用<code>scanPackageDirtyLI</code>.<br><code>scanPackageDirtyLI()</code>源码位于<code>frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</code>中（基于7.0源码）： 参考http://blog.hjhjw1991.com/android/2018/01/02/Apk%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E5%8E%9F%E7%90%86/</p><h3 id="安装后的目录结构" tabindex="-1"><a class="header-anchor" href="#安装后的目录结构" aria-hidden="true">#</a> 安装后的目录结构</h3><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>/system/app</td><td>系统自带的应用程序,获得 root 权限才能删除</td></tr><tr><td>/data/app</td><td>第三方应用apk文件.安装时把apk文件复制到此目录</td></tr><tr><td>/data/anr</td><td>存放anr信息（/data/anr/traces.txt用于存放app ANR信息）</td></tr><tr><td>/data/data</td><td>应用程序数据</td></tr><tr><td>/data/data/${package_name}</td><td>特定应用程序数据目录</td></tr><tr><td>/data/data/${package_name}/cache</td><td>临时文件，系统会自动清理</td></tr><tr><td>/data/data/${package_name}/databases</td><td>数据库</td></tr><tr><td>/data/data/${package_name}/files</td><td>一般文件</td></tr><tr><td>/data/data/${package_name}/shared_pres</td><td>SharedPreference</td></tr><tr><td>/data/data/${package_name}/lib</td><td>so文件</td></tr><tr><td>/data/dalvik-cache</td><td>存放odex文件.将apk中的dex文件安装到dalvik-cache目录下(dex文件是dalvik虚拟机的可执行文件,ART模式的可执行文件格式为.aot,启动ART时,系统会执行dex文件转换至aot文件)</td></tr><tr><td>/data/system/packages.list</td><td>类似于Window的注册表,该文件是解析apk时由writeLP()创建的。记录了系统的permissons,以及解析apk的AndroidManifest获取的应用name,codePath,flag,ts,version,userid等信息。解析完apk后将更新信息写入这个文件并保存到flash,下次开机的时候直接从里面读取相关信息并添加到内存相关列表中.当有apk升级,安装或删除时会更新这个文件。</td></tr><tr><td>/data/system/packages.xml</td><td>指定应用的默认存储位置/data/data/com.xx.xx/package.xml中包含了该应用申请的权限,签名和代码所在的位置等信息系,并且两者都有同一个userld.</td></tr><tr><td>/data/user/0</td><td>软链接，指向/data/data</td></tr><tr><td>/data/user_de/0/${package_name}</td><td>设备存储保护区，在快速启动模式可以访问这个文件夹</td></tr><tr><td>/proc/cpuinfo</td><td>cpu信息</td></tr><tr><td>/proc/smaps</td><td>内存占用信息</td></tr><tr><td>/sdcard</td><td>软链接，最终指向/storage/emulated/0【跟Android版本和ROM版本有关】</td></tr><tr><td>/storage/emulated/0</td><td>外部存储的根目录</td></tr><tr><td>/storage/emulated/0/Android/data/${package_name}</td><td>应用的额外数据</td></tr><tr><td>/system/app</td><td>系统应用apk文件</td></tr><tr><td>/system/lib</td><td>系统应用so库</td></tr></tbody></table><p>在<code>/data/data/包名</code>目录下，每个app都有自己的目录，目录名就是应用程序在<code>AndroidManifest.xml</code>文件中定义的包。每个应用程序的代码，对自己的目录是有绝对的控制权限的。在每个目录下，一般有如下几个子目录（结合上面的表格）：</p><ul><li>databases : 存放数据库</li><li>cache : 存放缓存数据</li><li>files : 存放应用程序自己控制的文件</li><li>lib : 存放使用的包</li></ul><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结：</h3><p>在第三方app安装后，会创建的目录、文件以及记录的信息：</p><ol><li>拷贝的apk文件，位于<code>/data/app</code>下</li><li>创建的app数据目录<code>/data/data/${package_name}</code></li><li>从apk中提取的dex文件，位于<code>/data/dalvik-cache</code>目录下</li><li><code>/data/system/packages.list</code>和<code>/data/system/packages.xml</code>中关于app的记录信息</li></ol><p>另外，app在运行期间有可能会使用到外部存储目录<code>/storage/emulated/0/Android/data/${package_name}</code>，该目录只有在app运行时调用相关函数时才创建，app安装后不会创建的。</p><h2 id="_2-apk卸载" tabindex="-1"><a class="header-anchor" href="#_2-apk卸载" aria-hidden="true">#</a> 2. Apk卸载</h2><p>卸载是安装的逆过程, <strong>删除在创建过程中三个路径下产生的文件夹</strong>，以及有可能后面创建的外部存储目录<code>/storage/emulated/0/Android/data/${package_name}</code>。<br> 通过系统来卸载App通常是，点击卸载后，就会发送一个<code>Intent</code>给<code>UninstallerActivity</code>，在<code>UninstallerActivity</code>最后会启动<code>UninstallAppProgress</code>的<code>initView</code>方法，调用到<code>ApplicantPackageManger.java</code>的<code>deletePackage</code>方法，通过<code>Binder</code>绑定，其实是调用<code>PMS</code>中的<code>deletePackageAsUser</code>方法, 同样位于<code>/frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java</code>。<br> 源码参考：http://blog.hjhjw1991.com/android/2018/01/02/Apk%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E5%8E%9F%E7%90%86/</p><p>卸载第三方app最后由<code>deleteInstalledPackageLI()</code>方法来完成，分两步走：</p><ol><li>第一步删除<code>/data/data</code>下面的数据目录，并从PMS的内部数据结构上清除当前卸载的package信息 <ol><li><code>deleteInstalledPackageLI()</code>–&gt;（表示调用，下同）<code>removePackageDataLI()</code>。<code>removePackageDataLI()</code>–&gt;<code>removePackageLI()</code>–&gt;mPackages的<code>remove()</code>：删除apk。<code>removePackageLI()</code>–&gt;<code>cleanPackageDataStructuresLILPw()</code>：将package的<code>providers</code>、<code>services</code>、<code>receivers</code>、<code>activities</code>等信息去PMS的全局数据结构上移除。</li><li><code>removePackageDataLI()</code>–&gt;<code>removeDataDirsLI()</code>–&gt;installd的<code>remove()</code>：删除目录<code>/data/data/${package_name}</code></li><li><code>removePackageDataLI()</code>–&gt;<code>schedulePackageCleaning()</code>：安排清理动作。向<code>PackageHandler</code>发送<code>START_CLEANING_PACKAGE</code>消息，PMS会调用<code>ContainService</code>的函数去删除<code>/storage/sdcard0/Android/data</code>和<code>/storage/sdcard0/Android/media</code>下面与<code>package</code>相关的文件</li><li><code>removePackageDataLI()</code>–&gt;Settings的<code>removePackageLPw()</code>：首先从<code>mPackages</code>这个<code>map</code>中删除<code>PackageSettings</code>信息，即删除对应的<code>Package UID</code>信息</li><li><code>removePackageDataLI()</code>–&gt;<code>updatePermissionsLPw()</code>：检查<code>mPermissionTrees</code>和<code>mPermissions</code>两个数组中的权限是否是被删除的<code>Package</code>提供，如果有，则删除。</li><li><code>removePackageDataLI()</code>–&gt;Settings的<code>updateSharedUserPermsLPw()</code>：清除<code>sharedUser</code>不用的<code>gid</code>信息，防止权限泄露。</li><li><code>removePackageDataLI()</code>–&gt;Settings的<code>writeLPr()</code>：将修改的信息写到<code>Package.xml</code>中</li></ol></li><li>第二步就删除code和resource文件 <ol><li>分别构造<code>FileInstallArgs</code>和<code>AsecInstallArgs</code>来完成code和resource资源的清除</li><li><code>FileInstallArgs</code>的<code>doPostDeleteLI()</code>–&gt;<code>cleanUpResourcesLI()</code>–&gt;<code>cleanUp()</code>：删除code、resource以及library文件</li><li><code>cleanUpResourcesLI()</code>–&gt;installd的<code>rmdex()</code>：删除存在<code>/data/dalvik-cache</code>文件</li></ol></li></ol>',24),p=e("br",null,null,-1),g={href:"https://blog.csdn.net/xinsong1989/article/details/78527439",target:"_blank",rel:"noopener noreferrer"},k={href:"http://blog.hjhjw1991.com/android/2018/01/02/Apk%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E5%8E%9F%E7%90%86/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://blog.csdn.net/hanfengzqh/article/details/82790896",target:"_blank",rel:"noopener noreferrer"};function m(P,A){const d=o("ExternalLinkIcon");return r(),i("div",null,[n,e("p",null,[a("参考："),p,e("a",g,[a("https://blog.csdn.net/xinsong1989/article/details/78527439"),c(d)])]),e("p",null,[e("a",k,[a("http://blog.hjhjw1991.com/android/2018/01/02/Apk%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E5%8E%9F%E7%90%86/"),c(d)])]),e("p",null,[e("a",h,[a("https://blog.csdn.net/hanfengzqh/article/details/82790896"),c(d)])])])}const _=t(s,[["render",m],["__file","appdeanzhuangyuxiezaiguochengchuangjianshanchudemulu.html.vue"]]);export{_ as default};
