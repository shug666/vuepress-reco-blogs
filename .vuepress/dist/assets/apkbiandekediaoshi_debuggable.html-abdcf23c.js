import{_ as e,o as d,c as a,a as i}from"./app-e8f85126.js";const l={},n=i(`<h2 id="android-debuggable的作用" tabindex="-1"><a class="header-anchor" href="#android-debuggable的作用" aria-hidden="true">#</a> android:debuggable的作用</h2><p>在 Android 开发中，<code>android:debuggable=&quot;true&quot;</code> 是 AndroidManifest.xml 文件中 <code>&lt;application&gt;</code> 标签的一个属性，用于指定应用程序是否可以以调试模式运行。以下是它的作用和注意事项：</p><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><ol><li>允许调试：</li></ol><ul><li>设置 <code>android:debuggable=&quot;true&quot;</code> 后，应用程序可以通过调试工具（如 Android Studio 的调试器或 adb 调试）附加调试进程。</li><li>开发者可以实时查看变量、调用栈和其他调试信息。</li></ul><ol start="3"><li>增强日志输出：</li></ol><ul><li>在调试模式下，应用程序可能会输出更多的日志信息，方便排查问题。</li></ul><ol start="5"><li>启用调试专用工具：</li></ol><ul><li>一些调试工具（如 Stetho、LeakCanary）需要该属性为 <code>true</code> 才能正常工作。</li></ul><h3 id="默认行为" tabindex="-1"><a class="header-anchor" href="#默认行为" aria-hidden="true">#</a> 默认行为</h3><ul><li>当使用 debug 构建（<code>buildTypes.debug</code>）时，<code>android:debuggable</code> 默认值为 <code>true</code>。</li><li>当使用 release 构建（<code>buildTypes.release</code>）时，<code>android:debuggable</code> 默认值为 <code>false</code>。</li></ul><h3 id="安全注意事项" tabindex="-1"><a class="header-anchor" href="#安全注意事项" aria-hidden="true">#</a> 安全注意事项</h3><ol><li>禁止在生产环境中设置为 <code>true</code>：</li></ol><ul><li>如果在发布的应用中保留 <code>android:debuggable=&quot;true&quot;</code>，可能会暴露敏感信息（如日志、API 密钥）。</li><li>攻击者可以通过反向调试工具（如 Frida）轻松调试和修改应用的运行时行为。</li></ul><ol start="3"><li>检查打包设置：</li></ol><ul><li>在发布之前，确保使用 <code>release</code> 构建并验证 <code>android:debuggable</code> 被设置为 <code>false</code>。</li></ul><ol start="5"><li>代码审查：</li></ol><ul><li>在代码审查过程中检查是否有手动设置 <code>android:debuggable</code> 属性的情况。</li></ul><h2 id="让apk变可调试" tabindex="-1"><a class="header-anchor" href="#让apk变可调试" aria-hidden="true">#</a> 让apk变可调试</h2><p>android 14之后改了判定机制，原来的ro.debuggable属性已经没用了，新的全局调试条件改成了ro.build.type=eng或者ro.build.type=userdebug并且persist.debug.dalvik.vm.jdwp.enabled=1</p><h3 id="lsposed-插件-xappdebug" tabindex="-1"><a class="header-anchor" href="#lsposed-插件-xappdebug" aria-hidden="true">#</a> LSPosed 插件 XAppDebug</h3><p>toggle app debuggable</p><p>https://github.com/Palatis/XAppDebug</p><blockquote><p>我 小米 MIUI14 android13 没成功</p></blockquote><h2 id="关闭-selinux" tabindex="-1"><a class="header-anchor" href="#关闭-selinux" aria-hidden="true">#</a> 关闭 selinux</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>XXX:/ <span class="token comment"># getenforce   //获取当前SELinux状态  </span>
Enforcing  
XXX:/ <span class="token comment">#  setenforce 0   //临时关闭SELinux状态  </span>
XXX:/ <span class="token comment"># getenforce   	//获取SELinux状态  </span>
Permissive  
XXX:/ <span class="token comment"># setenforce 1   //永久开启SELinux状态  </span>
XXX:/ <span class="token comment"># getenforce  </span>
Enforcing  
XXX:/ <span class="token comment">#</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),o=[n];function s(r,c){return d(),a("div",null,o)}const u=e(l,[["render",s],["__file","apkbiandekediaoshi_debuggable.html.vue"]]);export{u as default};
