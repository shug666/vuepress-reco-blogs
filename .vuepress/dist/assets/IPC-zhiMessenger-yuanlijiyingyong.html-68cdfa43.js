import{_ as n,o as s,c as a,a as e}from"./app-ee4ba21e.js";const p={},t=e(`<h2 id="_1、messenger-客户端发送消息给服务端" tabindex="-1"><a class="header-anchor" href="#_1、messenger-客户端发送消息给服务端" aria-hidden="true">#</a> 1、Messenger 客户端发送消息给服务端</h2><p>与AIDL 类似，依然分别编写服务端、客户端逻辑。</p><h3 id="编写服务端" tabindex="-1"><a class="header-anchor" href="#编写服务端" aria-hidden="true">#</a> 编写服务端</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">&quot;ipc&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//创建Handler，用来处理客户端发送过来的消息</span>
    <span class="token keyword">private</span> <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> id <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;receive id from client, id:&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取IBinder 引用</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写客户端" tabindex="-1"><a class="header-anchor" href="#编写客户端" aria-hidden="true">#</a> 编写客户端</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">ServiceConnection</span> serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//获取服务端的IBinder引用后，用来构造Messenger</span>
            <span class="token class-name">Messenger</span> messenger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//构造Message</span>
            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//往Message填充数据</span>
            <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            message<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//发送消息</span>
                messenger<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bindService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">MainActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> serviceConnection<span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">BIND_AUTO_CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程如下：</p><blockquote><p>1、服务端构造Handler用来接收信息<br> 2、客户端构造Messenger来发送message信息</p></blockquote><p>服务端收到消息打印如下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-26dde9cfec3a3016.png" alt=""></p><p>可以看出不用编写任何AIDL 文件就可以实现进程间通信，很是方便。</p><h2 id="_2、messenger-服务端发送消息给客户端" tabindex="-1"><a class="header-anchor" href="#_2、messenger-服务端发送消息给客户端" aria-hidden="true">#</a> 2、Messenger 服务端发送消息给客户端</h2><p>上面的Demo是客户端往服务端发送一条消息，那么如果服务端想给客户端发送回复消息该怎么实现呢？<br> 以服务端收到客户端传递过来的id后，查找出id对应的学生的姓名、年龄发送给客户端为例。</p><h3 id="编写服务端-1" tabindex="-1"><a class="header-anchor" href="#编写服务端-1" aria-hidden="true">#</a> 编写服务端</h3><p>改造一下服务端代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//创建Handler，用来处理客户端发送过来的消息</span>
    <span class="token keyword">private</span> <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> id <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;receive id from client, id:&quot;</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//msg.replyTo 为Messenger类型，从客户端传递过来的</span>
            <span class="token class-name">Messenger</span> replyMessenger <span class="token operator">=</span> msg<span class="token punctuation">.</span>replyTo<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>replyMessenger <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//构造消息</span>
                <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Bundle</span> replyBundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                replyBundle<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                replyBundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                message<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>replyBundle<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    replyMessenger<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只是修改了handleMessage(xx)，当收到客户端的消息后立即返回查询到的名字、年龄发送给客户端。</p><h3 id="编写客户端-1" tabindex="-1"><a class="header-anchor" href="#编写客户端-1" aria-hidden="true">#</a> 编写客户端</h3><p>客户端代码也仅仅需要小小的改动：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//接收服务端的信息</span>
    <span class="token keyword">private</span> <span class="token class-name">Handler</span> handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span><span class="token class-name">Looper</span><span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bundle <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//提取姓名、年龄</span>
                <span class="token class-name">String</span> name <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> age <span class="token operator">=</span> bundle<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;ipc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;receive name 、age from server, name:&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot; age:&quot;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">ServiceConnection</span> serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//获取服务端的IBinder引用后，用来构造Messenger</span>
            <span class="token class-name">Messenger</span> messenger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//构造Message</span>
            <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//往Message填充数据</span>
            <span class="token class-name">Bundle</span> bundle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            bundle<span class="token punctuation">.</span><span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            message<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>bundle<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//为了接收服务端的消息，把自己的Messenger传递给服务端</span>
            message<span class="token punctuation">.</span>replyTo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token comment">//发送消息</span>
                messenger<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端在发送给服务端消息时带上自己的Messenger以便服务端拿到该Messenger给客户端发送信息。同时，需要重写Handler的handleMessage(xx)接收服务端的信息。这与服务端的实现是一致的，相当于双方都有Messenger。</p><p>至此，借助于Messenger，轻易就完成了客户端/服务端相互通信的功能。</p><h2 id="_3、messenger-底层原理" tabindex="-1"><a class="header-anchor" href="#_3、messenger-底层原理" aria-hidden="true">#</a> 3、Messenger 底层原理</h2><h3 id="从发送消息开始" tabindex="-1"><a class="header-anchor" href="#从发送消息开始" aria-hidden="true">#</a> 从发送消息开始</h3><p>为什么Messenger 能够如此简单地完成了IPC，从其发送消息开始一探究竟。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Messenger</span><span class="token punctuation">.</span>java
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
        mTarget<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>mTarget为IMessenger类型，在Messenger构造函数里初始化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Messenger</span><span class="token punctuation">.</span>java
    <span class="token keyword">public</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span><span class="token class-name">Handler</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mTarget <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getIMessenger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而target 为Handler类型，跳转到Handler.java里查看：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Handler</span><span class="token punctuation">.</span>java
    <span class="token keyword">final</span> <span class="token class-name">IMessenger</span> <span class="token function">getIMessenger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mQueue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mMessenger <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> mMessenger<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            mMessenger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessengerImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> mMessenger<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MessengerImpl</span> <span class="token keyword">extends</span> <span class="token class-name">IMessenger<span class="token punctuation">.</span>Stub</span> <span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            msg<span class="token punctuation">.</span>sendingUid <span class="token operator">=</span> <span class="token class-name">Binder</span><span class="token punctuation">.</span><span class="token function">getCallingUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//调用Handler发送信息</span>
            <span class="token class-name">Handler</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到这是不是有种似曾相似的感觉，此处MessengerImpl 继承自IMessenger.Stub，实现了唯一的方法：send(Message msg)，该方法的的形参为：Message。<br> 由此，我们轻易得出结论：</p><blockquote><p>1、服务端对外暴露了IMessenger 接口，该接口里有唯一的方法：send(Message msg)。<br> 2、服务端实现了send(Message msg)方法，在该方法里将Message使用Handler发送出去。</p></blockquote><p>找到IMessenger 对应的AIDL 文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">android<span class="token punctuation">.</span>os</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span><span class="token class-name">Message</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/** <span class="token keyword">@hide</span> */</span>
oneway <span class="token keyword">interface</span> <span class="token class-name">IMessenger</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span>in <span class="token class-name">Message</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>注：该文件在framework/core/java/android/os/IMessenger.aidl</em><br> 其实就是之前说的AIDL，Message本身支持序列化，加 &quot;in&quot; 标记表示数据只能从客户端流向服务端。</p><p>该接口定义还多了个标识：<strong>&quot;oneway&quot;</strong>。<br> 这个字段最终会影响IBinder.transact(xx)里的最后一个形参：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> _status <span class="token operator">=</span> mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token class-name">Stub<span class="token punctuation">.</span>TRANSACTION_send</span><span class="token punctuation">,</span> 
_data<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span><span class="token punctuation">.</span><span class="token constant">FLAG_ONEWAY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>FLAG_ONEWAY 表示transact(xx)不是阻塞调用，也就是说客户端调用该方法后立即返回，不等待。仔细想想其实也并不用等待，因为send(xx)没有返回值，又是in 修饰形参，数据流不能从服务端流入客户端。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-f45b72be06fff26c.png" alt=""></p><p>与普通的AIDL 相比，Messenger其实就是封装了服务端的接口及其方法，与此同时也封装了客户端调用服务端的方法。客户端将要传递的消息封装在Message里，通过Messenger传递出去，服务端收到后在Handler里处理该Message。</p><h3 id="服务端为什么能够向客户端发送消息" tabindex="-1"><a class="header-anchor" href="#服务端为什么能够向客户端发送消息" aria-hidden="true">#</a> 服务端为什么能够向客户端发送消息</h3><p>从IMessenger.aidl定义可知，通过send(xx)方法只能是由客户端往服务端发送消息，并且没有返回值。因此想通过方法的形参或返回值携带服务端的数据是不现实的了。<br> **客户端能给服务端发送数据的最大凭证是：客户端能够拿到服务端的IBinder接口。**那么想想反过来行吗？<br> 来看看Message.java里的字段：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Message</span><span class="token punctuation">.</span>java
    <span class="token doc-comment comment">/**
     * Optional Messenger where replies to this message can be sent.  The
     * semantics of exactly how this is used are up to the sender and
     * receiver.
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Messenger</span> replyTo<span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Message可以持有Messenger 引用，而我们知道构造好了Messenger，就可以通过getBinder(xx)获取关联的IBinder 引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Messenger</span><span class="token punctuation">.</span>java
    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">getBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mTarget<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IBinder有了剩下的就是想办法把它传给服务端。</p><p><strong>客户端传递IBinder给服务端</strong><br> Message需要跨进程传递，因此它的成员变量包括Messenger replyTo 都需要序列化及反序列化。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Message</span><span class="token punctuation">.</span>java
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token class-name">Messenger</span><span class="token punctuation">.</span><span class="token function">writeMessengerOrNullToParcel</span><span class="token punctuation">(</span>replyTo<span class="token punctuation">,</span> dest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用了Messenger里的静态方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Messenger</span><span class="token punctuation">.</span>java
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">writeMessengerOrNullToParcel</span><span class="token punctuation">(</span><span class="token class-name">Messenger</span> messenger<span class="token punctuation">,</span>
                                                    <span class="token class-name">Parcel</span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取messenger 关联的Binder，写入到序列化对象</span>
        out<span class="token punctuation">.</span><span class="token function">writeStrongBinder</span><span class="token punctuation">(</span>messenger <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> messenger<span class="token punctuation">.</span>mTarget<span class="token punctuation">.</span><span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>至此，客户端的IBinder引用就可以传递给服务端了。</p><p><strong>服务端取出IBinder</strong><br> 服务端收到Message后反序列化成员变量如Messenger replyTo等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Message</span><span class="token punctuation">.</span>java
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        replyTo <span class="token operator">=</span> <span class="token class-name">Messenger</span><span class="token punctuation">.</span><span class="token function">readMessengerOrNullFromParcel</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类似的调用Messenger 静态方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>#<span class="token class-name">Messenger</span><span class="token punctuation">.</span>java
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Messenger</span> <span class="token function">readMessengerOrNullFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//反序列化出IBinder</span>
        <span class="token class-name">IBinder</span> b <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readStrongBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//构造出Messenger</span>
        <span class="token keyword">return</span> b <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Messenger</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终，服务端收到了客户端的IBinder，并构造出Messenger，有了Messenger当然可以给客户端发消息了。</p><h2 id="_4、binder-活动和服务进行通信" tabindex="-1"><a class="header-anchor" href="#_4、binder-活动和服务进行通信" aria-hidden="true">#</a> 4、Binder 活动和服务进行通信</h2><h3 id="编写服务端-2" tabindex="-1"><a class="header-anchor" href="#编写服务端-2" aria-hidden="true">#</a> 编写服务端</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">&quot;MyService&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownloadBinder</span> <span class="token keyword">extends</span> <span class="token class-name">Binder</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;startDownload executed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;getProgress executed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//获取IBinder 引用</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DownloadBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="编写客户端-2" tabindex="-1"><a class="header-anchor" href="#编写客户端-2" aria-hidden="true">#</a> 编写客户端</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ServiceConnection</span> serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">MyService<span class="token punctuation">.</span>DownloadBinder</span> downloadBinder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MyService<span class="token punctuation">.</span>DownloadBinder</span><span class="token punctuation">)</span> service<span class="token punctuation">;</span>
            downloadBinder<span class="token punctuation">.</span><span class="token function">startDownload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> progress <span class="token operator">=</span> downloadBinder<span class="token punctuation">.</span><span class="token function">getProgress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;progress = &quot;</span> <span class="token operator">+</span> progress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bindService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token class-name">TestActivity</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span>serviceConnection<span class="token punctuation">,</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">BIND_AUTO_CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、message、aidl、messenger、binder-区别与联系" tabindex="-1"><a class="header-anchor" href="#_4、message、aidl、messenger、binder-区别与联系" aria-hidden="true">#</a> 4、Message、AIDL、Messenger、Binder 区别与联系</h2><p><strong>Message</strong></p><p>用来在线程间传递数据，与Handler配合使用，本身支持序列化，可以跨进程传递Message对象。</p><p><strong>AIDL</strong></p><p>用来简化进程间通信时客户端、服务端代码的编写。 需跨进程且需多线程时，则使用AIDL。</p><p><strong>Messenger</strong></p><p>在AIDL 的基础上，进一步封装服务端暴露的接口，将服务端收到Message通过Handlder发送到目标线程。 需要跨进程且无需多线程处理时，使用Messager</p><p><strong>Binder类</strong></p><p>无需跨进程实现绑定服务，同一进程之间通信则使用Binder类即可。</p><p><strong>AIDL 与 Messenger 在进程间通信区别：</strong><br> 使用AIDL优点：</p><blockquote><p>1、可以灵活的编写服务端的接口，并且能够自定义方法形参类型、数据流向、方法返回值。<br> 2、服务端方法实现里可以开启多线程处理数据。</p></blockquote><p>使用AIDL 缺点：</p><blockquote><p>1、需要编写AIDL 文件定义服务端接口。<br> 2、如果是自定义数据类型，还需要编写对应的AIDL 文件。</p></blockquote><p>使用Messenger 优点：</p><blockquote><p>1、无需定义AIDL 文件，直接构造Message发送。<br> 2、快速实现双向通信（严格上来说AIDL也能实现，只是Messenger封装好了IBinder的传递)</p></blockquote><p>使用Messenger缺点：</p><blockquote><p>参考上方，AIDL 优点即是Messenger缺点。</p></blockquote><p><strong>适用场合</strong></p><blockquote><p>如果是简单的通信，并且服务端是单线程顺序处理客户端的消息，建议使用Messenger。</p></blockquote>`,80),c=[t];function o(l,i){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","IPC-zhiMessenger-yuanlijiyingyong.html.vue"]]);export{d as default};
