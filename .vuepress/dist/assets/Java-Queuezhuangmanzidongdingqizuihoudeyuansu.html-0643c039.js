import{_ as e,r as p,o as t,c,b as a,d as n,e as o,a as u}from"./app-52856ff7.js";const i={},l=u(`<h2 id="java-queue-装满自动丢弃最后的元素" tabindex="-1"><a class="header-anchor" href="#java-queue-装满自动丢弃最后的元素" aria-hidden="true">#</a> Java Queue 装满自动丢弃最后的元素</h2><p>在Java编程中，Queue（队列）是一种常用的数据结构，用于存储和管理一系列元素。它遵循先进先出（FIFO）原则，即最先进入队列的元素也将最先被取出。</p><p>在某些情况下，我们可能需要限制队列的大小并在队列已满时自动丢弃最后的元素。这种功能在处理实时数据流、消息队列等场景中非常有用。</p><p>本文将介绍如何使用Java中的Queue实现装满自动丢弃最后的功能，并提供相应的代码示例。</p><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><p>在开始之前，让我们先了解一些基本概念。</p><ol><li>队列（Queue）</li></ol><p>队列是一种线性数据结构，可用于存储一系列元素。它遵循先进先出（FIFO）原则，即最先进入队列的元素也将最先被取出。</p><p>在Java中，Queue接口定义了队列的基本操作，如插入、删除和查询等。常见的Queue实现类有LinkedList和ArrayDeque等。</p><ol start="2"><li>容量（Capacity）</li></ol><p>队列的容量表示队列可以存储的元素个数。当队列已满时，如果我们尝试向队列中插入新的元素，就需要进行一些处理。</p><ol start="3"><li>自动丢弃（Automatic Discard）</li></ol><p>自动丢弃的意思是，在队列已满的情况下，如果我们尝试向队列中插入新的元素，最后一个元素将被自动丢弃。</p><h2 id="实现自动丢弃功能的queue" tabindex="-1"><a class="header-anchor" href="#实现自动丢弃功能的queue" aria-hidden="true">#</a> 实现自动丢弃功能的Queue</h2><p>要实现队列装满自动丢弃最后的元素功能，我们可以通过继承现有的Queue实现类并覆盖相关方法来实现。</p><p>以下是一个示例代码，展示了如何实现一个装满自动丢弃最后元素的队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoDiscardQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AutoDiscardQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果队列已满，则移除最先入队的元素</span>
            <span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，我们创建了一个<code>AutoDiscardQueue</code>类，它继承自<code>LinkedList</code>。我们还定义了一个私有成员变量<code>capacity</code>，用于表示队列的容量。</p><p>覆盖了<code>offer</code>方法，该方法用于向队列中插入元素。在方法内部，我们首先检查队列的大小是否已达到容量。如果是，则调用<code>poll</code>方法移除队列中的第一个元素，以保证队列始终保持在容量范围内。然后，我们调用<code>super.offer(e)</code>方法将新的元素插入队列。</p><h2 id="使用自动丢弃队列" tabindex="-1"><a class="header-anchor" href="#使用自动丢弃队列" aria-hidden="true">#</a> 使用自动丢弃队列</h2><p>下面我们来介绍如何使用刚刚实现的自动丢弃队列。</p><p>首先，我们需要创建一个自动丢弃队列的实例，并指定队列的容量。例如，我们可以创建一个容量为10的队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AutoDiscardQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoDiscardQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后，我们可以像使用普通的队列一样使用这个自动丢弃队列。例如，我们可以使用<code>offer</code>方法向队列中插入元素：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们尝试向队列中插入超过容量的元素，最后一个元素将被自动丢弃：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在上面的代码中，当我们尝试插入元素4时，由于队列已满，最先入队的元素1将被自动丢弃。</p>`,28),d={href:"https://blog.51cto.com/u_16213415/7285414",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const s=p("ExternalLinkIcon");return t(),c("div",null,[l,a("p",null,[n("本文转自 "),a("a",d,[n("https://blog.51cto.com/u_16213415/7285414"),o(s)]),n("，如有侵权，请联系删除。")])])}const b=e(i,[["render",r],["__file","Java-Queuezhuangmanzidongdingqizuihoudeyuansu.html.vue"]]);export{b as default};
