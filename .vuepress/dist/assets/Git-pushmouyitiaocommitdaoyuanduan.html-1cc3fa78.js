import{_ as a,o as e,c as s,a as n}from"./app-f541e591.js";const i={},t=n(`<h2 id="默认情况下" tabindex="-1"><a class="header-anchor" href="#默认情况下" aria-hidden="true">#</a> 默认情况下</h2><p><code>git push</code>会推送暂存区所有提交（也即<code>HEAD</code>及其之前的提交），使用下面的命令可以改变此默认行为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">git</span> push <span class="token operator">&lt;</span>remotename<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>commit SHA<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>remotebranchname<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> push origin 248ed23e2:branchname
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h2 id="推送某一条提交" tabindex="-1"><a class="header-anchor" href="#推送某一条提交" aria-hidden="true">#</a> 推送某一条提交：</h2><h3 id="第一种方式" tabindex="-1"><a class="header-anchor" href="#第一种方式" aria-hidden="true">#</a> 第一种方式</h3><p>即符合git操作的规则，从<strong>最初的commit</strong>开始一个一个提交，但是不能实现指定某一个commit,基本满足日常的开发异常情况了**（只能按顺序提交）**</p><p>图一</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/d61420705ce243819ac2b119bb22bb1b.png" alt=""></p><p>本地commit了3次提交但是并不想一下push到远程，根据功能或者时间的原因，想一个一个提交</p><p>此时可以使用：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 最下面的 一条为最老的一条，优先推送
<span class="token function">git</span> push origin 9267dd9:test  
// 接着第二条同样的命令，commit换掉即可
<span class="token function">git</span> push origin 9267dd9:test

// <span class="token punctuation">..</span>. 依次按顺序一个一个提交<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第二种方式" tabindex="-1"><a class="header-anchor" href="#第二种方式" aria-hidden="true">#</a> 第二种方式</h3><p>采用cherry-pick用新分支去拉取当前分支的指定commit记录，之后推送到当前分支远程仓库实现推送指定历史提交的功能</p><p><strong>1. 创建临时分支</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// localbranch 为本地分支名  origin/feat 为远程目标分支
 <span class="token function">git</span> checkout <span class="token parameter variable">-b</span>  localbranch  <span class="token parameter variable">--track</span> origin/feat
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>2.  执行cherry-pick，将修改bug的记录同步过来</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick fcf254130f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后续操作就是将临时分支记录推到目标分支！！！</p>`,21),r=[t];function c(d,o){return e(),s("div",null,r)}const p=a(i,[["render",c],["__file","Git-pushmouyitiaocommitdaoyuanduan.html.vue"]]);export{p as default};
