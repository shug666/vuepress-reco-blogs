import{_ as s,r as e,o as t,c as p,b as n,d as i,e as o,a as l}from"./app-ee4ba21e.js";const c={},r=l(`<h2 id="_2853r配置遥控器" tabindex="-1"><a class="header-anchor" href="#_2853r配置遥控器" aria-hidden="true">#</a> 2853R配置遥控器</h2><p>直接在RTD2853R\\customer\\IR目录下创建相应的.config文件，然后编译脚本source build.sh ，需注意的是在要编译的脚本里面指定.config文件，目前已经适配过的IR协议有：NEC、KONKA、SONY、三星</p><p><a data-fancybox title="image-20220817175130793" href="https://raw.githubusercontent.com/shug666/image/master/images/image-20220817175130793.png"><img src="https://raw.githubusercontent.com/shug666/image/master/images/image-20220817175130793.png" alt="image-20220817175130793"></a></p><p>.config文由三部分组成，</p><ul><li>第一个列是protocol，遥控器的协议。</li><li>第二列是按键的码值，</li><li>第三列是keycode，也就是我们要上报的值</li></ul><p><a data-fancybox title="image-20220817174302882" href="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220817174302882.png"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220817174302882.png" alt="image-20220817174302882"></a></p><h2 id="查看和设置协议的方式" tabindex="-1"><a class="header-anchor" href="#查看和设置协议的方式" aria-hidden="true">#</a> 查看和设置协议的方式</h2><p>在配置遥控器之前，需要设置对应的协议，目前已经配置过的遥控器协议有NEC、KONKA,C03.</p><p>在串口下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /sys/venus_ir/ir_protocol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a data-fancybox title="img" href="https://cdn.jsdelivr.net/gh/shug666/image/images/wps2.jpg"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/wps2.jpg" alt="img"></a></p><p>同时也可以设置需要的遥控协议，比如</p><p><strong>无权限时需要输入su命令</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">&gt;</span> /sys/venus_ir/ir_protocol
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="查看遥控器码值" tabindex="-1"><a class="header-anchor" href="#查看遥控器码值" aria-hidden="true">#</a> 查看遥控器码值</h2><p>串口下输入：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token number">1</span> <span class="token operator">&gt;</span>/sys/venus_ir/ir_decode_debug
<span class="token builtin class-name">echo</span> <span class="token number">8</span> <span class="token operator">&gt;</span> /proc/sys/kernel/printk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>按下遥控按键，看到如下<strong>REG_IR_RP</strong> = [A45BFB04] 就是 得到的ir 键值。</p><p><a data-fancybox title="img" href="https://cdn.jsdelivr.net/gh/shug666/image/images/wps3.jpg"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/wps3.jpg" alt="img"></a></p><h2 id="编译时的操作" tabindex="-1"><a class="header-anchor" href="#编译时的操作" aria-hidden="true">#</a> 编译时的操作</h2><p>在main_process.sh脚本中的set_IR_Protocol方法里</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token parameter variable">-f</span> <span class="token variable">\${ir_config_file}</span> <span class="token variable">\${ir_bin_tool}</span>/customer/ir_table.config
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token string">&quot;<span class="token variable">\${ir_bin_tool}</span>/out/&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">\${ir_bin_tool}</span>/out/
<span class="token function">make</span> <span class="token parameter variable">-C</span> <span class="token variable">\${ir_bin_tool}</span> ir_table_bin

perl <span class="token variable">\${toptech_config_path}</span>/scripts/generate_ir_c.pl <span class="token variable">\${ir_config_file}</span>  <span class="token variable">\${toptech_config_path}</span>/tmp/<span class="token variable">\${config_remote_name}</span>.c <span class="token operator">||</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">cp</span> <span class="token parameter variable">-f</span> <span class="token variable">\${toptech_config_path}</span>/tmp/<span class="token variable">\${config_remote_name}</span>.c <span class="token variable">\${root_path}</span>/kernel/linux/linux-4.14/drivers/rtk_kdriver/ir/ir_table/ir_table_default.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>将RTD2853R\\customer\\IR目录下的xxx.config文件拷贝到kernel/android/R/vendor/realtek/tool/image_file_creator/ir_bin_tool/customer/ir_table.config，并清空\\ir_bin_tool\\out目录（先删除再创建）</li><li>在ir_bin_tool目录下执行make ir_table_bin命令会在ir_bin_tool/out产生ir_table.bin文件,同时也会拷贝到kernel/android/R/vendor/realtek/common/ATV/data/factory_ro目录下</li><li>在ir_bin_tool 路径下cmd: make ir_def_table, 自动产生/kernel/linux/linux-4.14/drivers/rtk_kdriver/ir/ir_table/ir_table_default.c文件。（脚本中调用了generate_ir_c.pl将xxx.config生成xxx.c并拷贝到/kernel/linux/linux-4.14/drivers/rtk_kdriver/ir/ir_table/ir_table_default.c）</li></ol><blockquote><p>注意：IR的默认协议取决于ir_table.config文件最上面的协议，脚本在编译时候会解析该协议，写入到000Bootparam.h，所以我们在有不同协议的ir_table.config文件里面需要根据需要调整码值位置。</p></blockquote><h2 id="根据按键码值判断协议" tabindex="-1"><a class="header-anchor" href="#根据按键码值判断协议" aria-hidden="true">#</a> 根据按键码值判断协议</h2><p>1 代表ir 协议，也就是nec 码，0xf40b（0b 是码值，f4按位或0b ==ff）头码低高八位反码，头码低八位反码，这个应该也适用于三星码</p><p>10 ir协议，konka码，0x四个0，加上头码低八位，加上码值，因为konka 码目前只配过这一次，目前只能找到这个规律。</p><h2 id="按键复用问题" tabindex="-1"><a class="header-anchor" href="#按键复用问题" aria-hidden="true">#</a> 按键复用问题</h2><p>复用的配置文件_tv_keys.xml放在customers/IR/下面。文件里面修改的话key ir 填入遥控器的名字。</p><p>Linkedname表示需要复用的这个按键的实际码值。Key name代表的是需要被复用成的按键。例如</p><p><a data-fancybox title="img" href="https://cdn.jsdelivr.net/gh/shug666/image/images/wps1.jpg"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/wps1.jpg" alt="img"></a></p><p>linkedName = KEYCODE_MEDIA_PLAY_PAUSE代表这个按键的实际keycode 是这个播放暂停键。Key name =KEYCODE_TIMESHIFT.代表这个播放暂停按键要复用时移按键。</p><p>目前已经复用的按键都在xml 注释中体现出来了，如果没有体现出来的，那么需要改代码了，这个就建议让RD协助添加这部分。</p><h2 id="_2851添加遥控器按键流程" tabindex="-1"><a class="header-anchor" href="#_2851添加遥控器按键流程" aria-hidden="true">#</a> 2851添加遥控器按键流程</h2><p><strong>1.在\\RTD2853R\\customer\\IR\\xxx.config 中添加未定义的keycode</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> 示例：<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0XB9469F00</span><span class="token punctuation">,</span>KEY_ZERO_FACTORY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>2.在\\RTD2853R\\kernel\\linux\\linux-4.14\\include\\uapi\\linux\\input-event-codes.h文件中添加示例：</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY_ZERO_FACTORY</span>   <span class="token expression"><span class="token number">0x393</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>(<strong>添加这个 值时建议按照顺序添加，方便以后添加按键以及进行代码维护)</strong></p><p><a data-fancybox title="image-20220819114747152" href="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220819114747152.png"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220819114747152.png" alt="image-20220819114747152"></a></p><p><strong>3.在\\RTD2853R\\kernel\\android\\R\\device\\realtek\\common\\keylayout\\venus_IR_input.kl 中添加一个Key值 keycode</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code> 示例：key <span class="token number">915</span> ZERO_FACTORY
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><a data-fancybox title="image-20220819114505445" href="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220819114505445.png"><img src="https://cdn.jsdelivr.net/gh/shug666/image/images/image-20220819114505445.png" alt="image-20220819114505445"></a></p><blockquote><p>注:venus_IR_input.kl文件是一个映射文件，是标准 linux 与android 的键值映射文件，可以有很多个。如 0x393 是在 input-event-codes.h 中定义的，kernel 层传到 android 中的值就是 915(0x393 的十进制)。</p></blockquote><p><strong>4.在\\RTD2853R\\kernel\\android\\R\\frameworks\\native\\include\\input\\InputEventLabels.h 文件的</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">static</span> <span class="token keyword">const</span> InputEventLabel KEYCODES<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>数组中添加 keylable<span class="token punctuation">.</span>如：
<span class="token function">DEFINE_KEYCODE</span><span class="token punctuation">(</span>ZERO_FACTORY<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>5.在Z:\\RTD2853R\\kernel\\android\\R\\frameworks\\native\\include\\android\\keycodes.h文件中enum{}中添加 keycode.</strong></p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>示例： <span class="token keyword">enum</span><span class="token punctuation">{</span>
	AKEYCODE_ZERO_FACTORY<span class="token operator">=</span><span class="token number">461</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注：(添加这个值时建议按照顺序添加，方便以后添加按键以及进行代码维护)</strong></p><p><strong>此处keycodes.h 里的值即是上面keylable定义在数组中的位 置(index)</strong></p><blockquote><p>这个文件映射的是Android中的键值，这个键值和InputEventLabel.h文件中数组添加的键名有一个映射关系，Android也是借此实现了从Linux键值到Android键值的映射</p><p>修改这个文件很简单，只要在enum中添加如下值就好了</p></blockquote><p><strong>6.在 \\RTD2853R\\kernel\\android\\R\\frameworks\\base\\core\\java\\android\\view\\KeyEvent.java中</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KeyEvent</span> <span class="token keyword">extends</span> <span class="token class-name">InputEvent</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>类中去添加变量

示例：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">KEYCODE_ZERO_FACTORY</span> <span class="token operator">=</span> <span class="token number">461</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**<em>*注：*<em>修改public static final int TOPTECH_ADD_END = KEYCODE_ZERO_FACTORY;</em></em></p><blockquote><p>Andriod借此文件把键值从c语言转到java语言。</p><p>变量名字与keycodes.h中比较少了开头的A，键值保持不变。</p></blockquote><p><strong>7.在\\RTD2853R\\kernel\\android\\R\\frameworks\\base\\core\\res\\res\\values\\attrs.xml文件中</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attr</span><span class="token punctuation">&gt;</span></span>标签中添加示例：
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enum</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>KEYCODE_ZERO_FACTORY<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>461<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>8.两种方式测试：</strong></p><p>（1）在AS的任一demo中MainActicity中添加onKeyup方法（这种方式便于测试按键）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>示例：<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onKeyUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> keyCode<span class="token punctuation">,</span> <span class="token class-name">KeyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyCode <span class="token operator">==</span><span class="token number">461</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;------add key successfully...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>通过adb connect ip(板卡ip，在串口ifconfig)命令连接板卡，在AS中直接安装到TV平台</strong></p><p>（2）\\RTD2853R\\kernel\\android\\R\\external\\replicaisland\\src\\com\\replica\\replicaisland\\MainMenuActivity.java</p><p>在 MainMenuActivity 代码的 onKeyup()方法中添加打印，方便测试添加按键是否成功。(也可以在其他活动中添加打印，注意导包)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>示例： <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onKeyUp</span><span class="token punctuation">(</span><span class="token keyword">int</span> keyCode<span class="token punctuation">,</span> <span class="token class-name">KeyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token comment">// TODO Auto-generated method stub</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>keyCode<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token keyword">case</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span><span class="token constant">KEYCODE_ZERO_FACTORY</span><span class="token operator">:</span><span class="token punctuation">{</span>

            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;zero&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;------add key successfully...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>9.PhoneWindowManager 添加按键功能</strong></p><p>接下来就是处理自己的功能了，此时按键已经通过 onKeyEvent()拿到，如果你想全局处理，可以在 PhoneWindowManager 的</p><p>interceptKeyBeforeQueueing 方法添加功能，如:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/a2090e03b7dd4c1a8d110d3e36b72475.png" alt="img"></p><p><strong>10.添加完成后需要在\\RTD2853R\\kernel\\android\\R目录下使用<em>make update-api</em>命令对current.txt（/kernel/android/R/frameworks/base/api/current.txt目录下文件）进行更新。</strong></p><p>可用git status 查看文件修改(不更新编译时会报错)</p><p><strong>注意：提交代码时需要提交current.txt</strong>**</p><p><strong>11.用对应客户脚本编译代码（脚本里的遥控器编号需与\\RTD2853R\\customer\\IR下编写的对应），编译无误后将系统烧到板子上</strong></p><p>在串口中输入 <em><strong>*logcat -s &quot;tag值&quot;*</strong></em> 查看打印结果。结果正确表示添加按键成功</p><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><p>编译build.sh的时候会提示下面三个命令，每次提示错误后，依次执行编译即可</p><p>执行make命令如果报错找不到命令则要执行source build/envsetup.sh，然后输入lunch命令</p>`,76),d={href:"https://blog.csdn.net/a567890k/article/details/79412382",target:"_blank",rel:"noopener noreferrer"},u=n("p",null,"make api-stubs-docs-non-updatable-update-current-api",-1),k=n("p",null,"make api-stubs-docs-update-current-api",-1),m=n("p",null,"make test-api-stubs-docs-update-current-api",-1),g=n("p",null,"使用git clone克隆时可以先使用武汉地址拉下来，然后修改.git/config文件为深圳地址然后pull命令更新这样更节省时间",-1),v=n("p",null,"武汉地址ssh://git@162.168.0.245/RTD2853R",-1),b=n("p",null,"深圳地址ssh://git@58.250.251.47:20111RTD2853R",-1);function h(_,f){const a=e("ExternalLinkIcon");return t(),p("div",null,[r,n("p",null,[n("a",d,[i("可参考build/envsetup.sh 简介"),o(a)])]),u,k,m,g,v,b])}const x=s(c,[["render",h],["__file","yaokongqipeizhi.html.vue"]]);export{x as default};
