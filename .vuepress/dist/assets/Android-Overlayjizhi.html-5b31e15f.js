import{_ as a,o as s,c as n,a as e}from"./app-ee4ba21e.js";const l={},t=e(`<h2 id="android-overlay机制" tabindex="-1"><a class="header-anchor" href="#android-overlay机制" aria-hidden="true">#</a> Android Overlay机制</h2><p><strong>Android Overlay</strong> 是一种资源替换机制，它能在不重新打包 apk 的情况下，覆盖替换 res/ 下的字符和图片等资源。</p><p>分为 静态Overlay (Static Resource Overlay) 和 运行时 Overlay (Runtime Resource Overlay) 。</p><p>两种 Overlay 方式，都需要资源 id 对应上。大白话就是要替换的资源名称一样、字符串的 id 一样。</p><p><strong>静态Overlay （SRO）</strong>：发生在编译时，需要在 Aosp 源码中配置。</p><p><strong>运行时Overlay （RRO</strong>）：发生在运行时，可以直接覆盖替换其他 apk 的资源而不需要其源码。</p><h2 id="静态overlay-sro" tabindex="-1"><a class="header-anchor" href="#静态overlay-sro" aria-hidden="true">#</a> 静态Overlay （SRO）</h2><p>可以替换 string.xml 、图片、layout、anim、xml目录中的 xml 文件 。</p><p>常用场景：覆盖替换 frameworks/ 、packages/ 目录下的资源文件。如改翻译词条、图片、改默认值等。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>frameworks/base/core/res/res/drawable-xxxhdpi/
frameworks/base/core/res/res/layout-xxxhdpi/
frameworks/base/core/res/res/values/
frameworks/base/packages/SettingsProvider/res/values/defaults.xml
packages/apps/Bluetooth/res/values/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-配置-overlay-目录" tabindex="-1"><a class="header-anchor" href="#_1-配置-overlay-目录" aria-hidden="true">#</a> 1.配置 overlay 目录</h3><p>在 Aosp 源码下下找到 <code>PRODUCT_PACKAGE_OVERLAYS</code> 的定义，一般都配置在 device 目录下，如 device/xxx/yyy/device.mk ，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># overlay</span>
PRODUCT_PACKAGE_OVERLAYS :<span class="token operator">=</span> <span class="token punctuation">\\</span>device/xxx/yyy/overlay
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-替换资源文件" tabindex="-1"><a class="header-anchor" href="#_2-替换资源文件" aria-hidden="true">#</a> 2.替换资源文件</h3><p>在 device/xxx/yyy/overlay 下按照 frameworks 目录新建对应的文件夹，放入要替换的文件即可。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>device/xxx/yyy/overlay/frameworks/
device/xxx/yyy/overlay/packages/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-全编译验证" tabindex="-1"><a class="header-anchor" href="#_3-全编译验证" aria-hidden="true">#</a> 3.全编译验证</h3><p>全编译验证即可。</p><h2 id="运行时-overlay-rro" tabindex="-1"><a class="header-anchor" href="#运行时-overlay-rro" aria-hidden="true">#</a> 运行时 Overlay (RRO)</h2><p>可以替换 string.xml 、图片，不能替换 layout、anim、xml 目录中的 xml 文件 。</p><p>常用场景：覆盖替换目标 apk 的翻译词条、图片资源等。</p><p>假设当前已有 Test.apk ，包名是 com.test 。我们用 运行时 Overlay 的形式替换它的 翻译词条和图片。</p><h3 id="_1-新建-xxxoverlay-目录-创建-android-mk" tabindex="-1"><a class="header-anchor" href="#_1-新建-xxxoverlay-目录-创建-android-mk" aria-hidden="true">#</a> 1.新建 xxxOverlay 目录，创建 Android.mk</h3><p>新建 TestOverlay 目录，在目录下创建 Android.mk ，</p><p>写入这些内容，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>LOCAL_PATH :<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>call my-dir<span class="token variable">)</span></span>

package_name :<span class="token operator">=</span> com.zeasn.ru_toptech
customer_overlay :<span class="token operator">=</span> vendor/toptech/.build/overlay
include <span class="token variable"><span class="token variable">$(</span>CLEAR_VARS<span class="token variable">)</span></span>

LOCAL_IS_RUNTIME_RESOURCE_OVERLAY :<span class="token operator">=</span> <span class="token boolean">true</span>
LOCAL_PACKAGE_NAME :<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>package_name<span class="token variable">)</span></span>.overlay
LOCAL_CERTIFICATE :<span class="token operator">=</span> platform
LOCAL_MODULE_PATH :<span class="token operator">=</span> <span class="token variable"><span class="token variable">$(</span>TARGET_OUT_VENDOR<span class="token variable">)</span></span>/overlay
LOCAL_RESOURCE_DIR :<span class="token operator">=</span>
ifeq <span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>shell <span class="token builtin class-name">test</span> <span class="token parameter variable">-e</span> <span class="token punctuation">$(</span>customer_overlay<span class="token punctuation">)</span>/<span class="token punctuation">$(</span>package_name<span class="token punctuation">)</span>/res <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> <span class="token function">yes</span><span class="token variable">)</span></span>,yes<span class="token punctuation">)</span>
LOCAL_RESOURCE_DIR <span class="token operator">+=</span> <span class="token variable"><span class="token variable">$(</span>customer_overlay<span class="token variable">)</span></span>/<span class="token variable"><span class="token variable">$(</span>package_name<span class="token variable">)</span></span>/res
endif
LOCAL_RESOURCE_DIR <span class="token operator">+=</span> <span class="token variable"><span class="token variable">$(</span>LOCAL_PATH<span class="token variable">)</span></span>/res
LOCAL_AAPT_INCLUDE_ALL_RESOURCES :<span class="token operator">=</span> <span class="token boolean">true</span>
LOCAL_SDK_VERSION :<span class="token operator">=</span> system_current
LOCAL_AAPT_FLAGS <span class="token operator">+=</span> --auto-add-overlay
include <span class="token variable"><span class="token variable">$(</span>BUILD_PACKAGE<span class="token variable">)</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LOCAL_CERTIFICATE 可以写 shared 、platform ，取决于对签名的要求。</p><p>LOCAL_MODULE_PATH := $(TARGET_OUT_VENDOR)/overlay ，说明编译后生成的 apk 路径在 vendor/overlay/com.zeasn.ru_toptech.overlay.apk 。这个路径可以根据不同方案进行调整。</p><h3 id="_2-创建-androidmanifest-xml" tabindex="-1"><a class="header-anchor" href="#_2-创建-androidmanifest-xml" aria-hidden="true">#</a> 2.创建 AndroidManifest.xml</h3><p>创建 AndroidManifest.xml ，写入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.zeasn.ru_toptech.overlay<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>versionCode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name"><span class="token namespace">android:</span>versionName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>overlay</span>
        <span class="token attr-name"><span class="token namespace">android:</span>priority</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.zeasn.ru_toptech<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name"><span class="token namespace">android:</span>isStatic</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>package=“com.zeasn.ru_toptech.overlay” 是后面编译生成的 TestOverlay.apk 的包名。</p><p>targetPackage 是目标 apk 的包名。</p><h3 id="_3-放入资源文件" tabindex="-1"><a class="header-anchor" href="#_3-放入资源文件" aria-hidden="true">#</a> 3.放入资源文件</h3><p>创建 xxxOverlay/res/ 目录，放入对应的文件即可，目录机构如 apk 源码目录结构是一样的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>xxxOverlay/res/values/strings.xml
xxxOverlay/res/values-fa/strings.xml
xxxOverlay/res/drawable-hdpi/pic1.png
xxxOverlay/res/mipmap-hdpi/mip1.png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要留意，即使只是想替换 values-fa/strings.xml 里的字符串，values/strings.xml 里也要加上对应的字符串，要不然会替换不成功。</p><h2 id="_4-编译" tabindex="-1"><a class="header-anchor" href="#_4-编译" aria-hidden="true">#</a> 4.编译</h2><p>修改 device/xxx/yyy/device.mk ，把 xxxOverlay 加入编译，</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PRODUCT_PACKAGES <span class="token operator">+=</span> <span class="token punctuation">\\</span>FileManagerOverlay <span class="token punctuation">\\</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>单编得到 xxxOverlay.apk , push 到机器上验证即可。</p>`,41),p=[t];function r(i,o){return s(),n("div",null,p)}const d=a(l,[["render",r],["__file","Android-Overlayjizhi.html.vue"]]);export{d as default};
