import{_ as p,r as o,o as c,c as i,b as n,d as a,e as t,a as s}from"./app-e8f85126.js";const l={},d=s(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>上一期我已经简单说过， <code>Canvas</code> 的 <code>drawXXX()</code> 方法配合 <code>Paint</code> 的几个常用方法可以实现最常见的绘制需求；而如果你只会基本的绘制， <code>Paint</code> 的完全功能的掌握，能让你更进一步，做出一些更加细致、炫酷的效果</p><p><code>Paint</code> 的 API 大致可以分为 4 类：</p><ul><li>颜色</li><li>效果</li><li>drawText() 相关</li><li>初始化</li></ul><p>下面我就对这 4 类分别进行介绍：</p><h2 id="_1-颜色" tabindex="-1"><a class="header-anchor" href="#_1-颜色" aria-hidden="true">#</a> 1 颜色</h2><p><code>Canvas</code> 绘制的内容，有三层对颜色的处理：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesee6edbeccefe2.jpg" alt="52eb2279ly1fig6dcywn2j20j909yabu.jpg"></p><blockquote><p>这图大概看看就行，不用钻研明白再往下看，因为等这章讲完你就懂了。</p></blockquote><h3 id="基本颜色" tabindex="-1"><a class="header-anchor" href="#基本颜色" aria-hidden="true">#</a> 基本颜色</h3><p>像素的基本颜色，根据绘制内容的不同而有不同的控制方式： <code>Canvas</code> 的颜色填充类方法 <code>drawColor/RGB/ARGB()</code> 的颜色，是直接写在方法的参数里，通过参数来设置的（上期讲过了）； <code>drawBitmap()</code> 的颜色，是直接由 <code>Bitmap</code> 对象来提供的（上期也讲过了）；除此之外，是图形和文字的绘制，它们的颜色就需要使用 <code>paint</code> 参数来额外设置了（下面要讲的）。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesa13147ca9e180.jpg" alt="3.jpg"></p><p><code>Paint</code> 设置颜色的方法有两种：一种是直接用 <code>Paint.setColor/ARGB()</code> 来设置颜色，另一种是使用 <code>Shader</code> 来指定着色方案。</p><h3 id="直接设置颜色" tabindex="-1"><a class="header-anchor" href="#直接设置颜色" aria-hidden="true">#</a> 直接设置颜色</h3><h4 id="setcolor-int-color" tabindex="-1"><a class="header-anchor" href="#setcolor-int-color" aria-hidden="true">#</a> <strong><code>setColor(int color)</code></strong></h4><p>方法名和使用方法都非常简单直接，而且这个方法在上期已经介绍过了，不再多说。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#009688&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>

paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#FF9800&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">450</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>

paint<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#E91E63&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span><span class="token string">&quot;HenCoder&quot;</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>setColor()</code> 对应的 get 方法是 <code>getColor()</code></p></blockquote><h4 id="setargb-int-a-int-r-int-g-int-b" tabindex="-1"><a class="header-anchor" href="#setargb-int-a-int-r-int-g-int-b" aria-hidden="true">#</a> <strong><code>setARGB(int a, int r, int g, int b)</code></strong></h4><p>其实和 <code>setColor(color)</code> 都是一样一样儿的，只是它的参数用的是更直接的三原色与透明度的值。实际运用中，<code>setColor()</code> 和 <code>setARGB()</code> 哪个方便和顺手用哪个吧。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setARGB</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setARGB</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置shader" tabindex="-1"><a class="header-anchor" href="#设置shader" aria-hidden="true">#</a> 设置Shader</h3><p><strong><code>setShader(Shader shader) </code></strong></p><p>除了直接设置颜色， <code>Paint</code> 还可以使用 <code>Shader</code> 。</p><p>Shader 这个英文单词很多人没有见过，它的中文叫做「着色器」，也是用于设置绘制颜色的。「着色器」不是 Android 独有的，它是图形领域里一个通用的概念，它和直接设置颜色的区别是，着色器设置的是一个颜色方案，或者说是一套着色规则。当设置了 <code>Shader</code> 之后，<code>Paint</code> 在绘制图形和文字时就不使用 <code>setColor/ARGB()</code> 设置的颜色了，而是使用 <code>Shader</code> 的方案中的颜色。</p><p>在 Android 的绘制里使用 <code>Shader</code> ，并不直接用 <code>Shader</code> 这个类，而是用它的几个子类。具体来讲有 <code>LinearGradient</code> <code>RadialGradient</code> <code>SweepGradient</code> <code>BitmapShader</code> <code>ComposeShader</code> 这么几个：</p><h4 id="lineargradient-线性渐变" tabindex="-1"><a class="header-anchor" href="#lineargradient-线性渐变" aria-hidden="true">#</a> LinearGradient 线性渐变</h4><p>设置两个点和两种颜色，以这两个点作为端点，使用两种颜色的渐变来绘制颜色。就像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Shader</span> shader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinearGradient</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#E91E63&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#2196F3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Shader<span class="token punctuation">.</span>TileMode</span><span class="token punctuation">.</span><span class="token constant">CLAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setShader</span><span class="token punctuation">(</span>shader<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>设置了 <code>Shader</code> 之后，绘制出了渐变颜色的圆。（其他形状以及文字都可以这样设置颜色，我只是没给出图。）</p><p>注意：在设置了 <code>Shader</code> 的情况下， <code>Paint.setColor/ARGB()</code> 所设置的颜色就不再起作用。</p></blockquote><p>构造方法：</p><p><code>LinearGradient(float x0, float y0, float x1, float y1, int color0, int color1, Shader.TileMode tile)</code> 。</p><p>参数：<br><code>x0</code> <code>y0</code> <code>x1</code> <code>y1</code>：渐变的两个端点的位置</p><p><code>color0</code> <code>color1</code> 是端点的颜色</p><p><code>tile</code>：端点范围之外的着色规则，类型是 <code>TileMode</code>。<code>TileMode</code> 一共有 3 个值可选： <code>CLAMP</code>, <code>MIRROR</code> 和 <code>REPEAT</code>。<code>CLAMP</code> （夹子模式？？？算了这个词我不会翻）会在端点之外延续端点处的颜色；<code>MIRROR</code> 是镜像模式；<code>REPEAT</code> 是重复模式。具体的看一下例子就明白。</p><p><code>CLAMP</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images135d8694ca273.jpg" alt="6.jpg"></p><p><code>MIRROR</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images054b536d7bb13.jpg" alt="7.jpg"></p><p><code>REPEAT</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images14e2819914ec2.jpg" alt="8.jpg"></p><h4 id="radialgradient-辐射渐变" tabindex="-1"><a class="header-anchor" href="#radialgradient-辐射渐变" aria-hidden="true">#</a> RadialGradient 辐射渐变</h4><p>辐射渐变很好理解，就是从中心向周围辐射状的渐变。大概像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Shader</span> shader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RadialGradient</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#E91E63&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#2196F3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Shader<span class="token punctuation">.</span>TileMode</span><span class="token punctuation">.</span><span class="token constant">CLAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setShader</span><span class="token punctuation">(</span>shader<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造方法：</p><p><code>RadialGradient(float centerX, float centerY, float radius, int centerColor, int edgeColor, TileMode tileMode)</code>。</p><p>参数：</p><p><code>centerX</code> <code>centerY</code>：辐射中心的坐标</p><p><code>radius</code>：辐射半径<br><code>centerColor</code>：辐射中心的颜色</p><p><code>edgeColor</code>：辐射边缘的颜色</p><p><code>tileMode</code>：辐射范围之外的着色模式。</p><p><code>CLAMP</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesa796a7ec48654.jpg" alt="10.jpg"></p><p><code>MIRROR</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images17808ff0c021b.jpg" alt="11.jpg"></p><p><code>REPEAT</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images908c28bc0f74f.jpg" alt="12.jpg"></p><h4 id="sweepgradient-扫描渐变" tabindex="-1"><a class="header-anchor" href="#sweepgradient-扫描渐变" aria-hidden="true">#</a> SweepGradient 扫描渐变</h4><p>又是一个渐变。「扫描渐变」这个翻译我也不知道精确不精确。大概是这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Shader</span> shader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SweepGradient</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#E91E63&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#2196F3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setShader</span><span class="token punctuation">(</span>shader<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造方法：</p><p><code>SweepGradient(float cx, float cy, int color0, int color1)</code></p><p>参数：</p><p><code>cx</code> <code>cy</code> ：扫描的中心</p><p><code>color0</code>：扫描的起始颜色</p><p><code>color1</code>：扫描的终止颜色</p><h4 id="bitmapshader" tabindex="-1"><a class="header-anchor" href="#bitmapshader" aria-hidden="true">#</a> BitmapShader</h4><p>用 <code>Bitmap</code> 来着色（终于不是渐变了）。其实也就是用 <code>Bitmap</code> 的像素来作为图形或文字的填充。大概像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Bitmap</span> bitmap <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>batman<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Shader</span> shader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapShader</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token class-name">Shader<span class="token punctuation">.</span>TileMode</span><span class="token punctuation">.</span><span class="token constant">CLAMP</span><span class="token punctuation">,</span> <span class="token class-name">Shader<span class="token punctuation">.</span>TileMode</span><span class="token punctuation">.</span><span class="token constant">CLAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setShader</span><span class="token punctuation">(</span>shader<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>嗯，看着跟 <code>Canvas.drawBitmap()</code> 好像啊？事实上也是一样的效果。如果你想绘制圆形的 <code>Bitmap</code>，就别用 <code>drawBitmap()</code> 了，改用 <code>drawCircle()</code> + <code>BitmapShader</code> 就可以了（其他形状同理）。</p></blockquote><p>构造方法：</p><p><code>BitmapShader(Bitmap bitmap, Shader.TileMode tileX, Shader.TileMode tileY)</code></p><p>参数：</p><p><code>bitmap</code>：用来做模板的 <code>Bitmap</code> 对象</p><p><code>tileX</code>：横向的 <code>TileMode</code></p><p><code>tileY</code>：纵向的 <code>TileMode</code>。</p><p><code>CLAMP</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagese283d8d982c24.jpg" alt="15.jpg"></p><p><code>MIRROR</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images0ed7aaa6a3693.jpg" alt="16.jpg"></p><p><code>REPEAT</code>:</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imageseed9cee4598ab.jpg" alt="17.jpg"></p><h4 id="composeshader-混合着色器" tabindex="-1"><a class="header-anchor" href="#composeshader-混合着色器" aria-hidden="true">#</a> ComposeShader 混合着色器</h4><p>所谓混合，就是把两个 <code>Shader</code> 一起使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 第一个 Shader：头像的 Bitmap</span>
<span class="token class-name">Bitmap</span> bitmap1 <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>batman<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Shader</span> shader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapShader</span><span class="token punctuation">(</span>bitmap1<span class="token punctuation">,</span> <span class="token class-name">Shader<span class="token punctuation">.</span>TileMode</span><span class="token punctuation">.</span><span class="token constant">CLAMP</span><span class="token punctuation">,</span> <span class="token class-name">Shader<span class="token punctuation">.</span>TileMode</span><span class="token punctuation">.</span><span class="token constant">CLAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 第二个 Shader：从上到下的线性渐变（由透明到黑色）</span>
<span class="token class-name">Bitmap</span> bitmap2 <span class="token operator">=</span> <span class="token class-name">BitmapFactory</span><span class="token punctuation">.</span><span class="token function">decodeResource</span><span class="token punctuation">(</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">R</span><span class="token punctuation">.</span>drawable<span class="token punctuation">.</span>batman_logo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Shader</span> shader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitmapShader</span><span class="token punctuation">(</span>bitmap2<span class="token punctuation">,</span> <span class="token class-name">Shader<span class="token punctuation">.</span>TileMode</span><span class="token punctuation">.</span><span class="token constant">CLAMP</span><span class="token punctuation">,</span> <span class="token class-name">Shader<span class="token punctuation">.</span>TileMode</span><span class="token punctuation">.</span><span class="token constant">CLAMP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ComposeShader：结合两个 Shader</span>
<span class="token class-name">Shader</span> shader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComposeShader</span><span class="token punctuation">(</span>shader1<span class="token punctuation">,</span> shader2<span class="token punctuation">,</span> <span class="token class-name">PorterDuff<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">SRC_OVER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setShader</span><span class="token punctuation">(</span>shader<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：上面这段代码中我使用了两个 <code>BitmapShader</code> 来作为 <code>ComposeShader()</code> 的参数，而 <code>ComposeShader()</code> 在硬件加速下是不支持两个相同类型的 <code>Shader</code> 的，所以这里也需要关闭硬件加速才能看到效果。</p></blockquote><p><img src="https://raw.githubusercontent.com/shug666/image/main/images61e5eb3b47089.jpg" alt="18.jpg"></p><p>构造方法：<code>ComposeShader(Shader shaderA, Shader shaderB, PorterDuff.Mode mode)</code></p><p>参数：</p><p><code>shaderA</code>, <code>shaderB</code>：两个相继使用的 <code>Shader</code></p><p><code>mode</code>: 两个 <code>Shader</code> 的叠加模式，即 <code>shaderA</code> 和 <code>shaderB</code> 应该怎样共同绘制。它的类型是 <code>PorterDuff.Mode</code> 。</p>`,91),u=s('<p>PorterDuff.Mode</p><p><code>PorterDuff.Mode</code> 是用来指定两个图像共同绘制时的颜色策略的。它是一个 enum，不同的 <code>Mode</code> 可以指定不同的策略。「颜色策略」的意思，就是说把源图像绘制到目标图像处时应该怎样确定二者结合后的颜色，而对于 <code>ComposeShader(shaderA, shaderB, mode)</code> 这个具体的方法，就是指应该怎样把 <code>shaderB</code> 绘制在 <code>shaderA</code> 上来得到一个结合后的 <code>Shader</code>。</p><p>没有听说过 <code>PorterDuff.Mode</code> 的人，看到这里很可能依然会一头雾水：「什么怎么结合？就……两个图像一叠加，结合呗？还能怎么结合？」你还别说，还真的是有很多种策略来结合。</p><p>最符合直觉的结合策略，就是我在上面这个例子中使用的 <code>Mode</code>: <code>SRC_OVER</code>。它的算法非常直观：就像上面图中的那样，把源图像直接铺在目标图像上。不过，除了这种，其实还有一些其他的结合方式。例如如果我把上面例子中的参数 <code>mode</code> 改为 <code>PorterDuff.Mode.DST_OUT</code>，就会变成挖空效果：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images39a51991b7d7f.jpg" alt="19.jpg"></p><p>而如果再把 <code>mode</code> 改为 <code>PorterDuff.Mode.DST_IN</code>，就会变成蒙版抠图效果：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images4c0a1c67aeb74.jpg" alt="20.jpg"></p><p>这下明白了吧？</p><p>具体来说， <code>PorterDuff.Mode</code> 一共有 17 个，可以分为两类：</p><ol><li>Alpha 合成 (Alpha Compositing)</li><li>混合 (Blending)</li></ol><p>第一类，Alpha 合成，其实就是 「PorterDuff」 这个词所指代的算法。 「PorterDuff」 并不是一个具有实际意义的词组，而是两个人的名字（准确讲是姓）。这两个人当年共同发表了一篇论文，描述了 12 种将两个图像共同绘制的操作（即算法）。而这篇论文所论述的操作，都是关于 Alpha 通道（也就是我们通俗理解的「透明度」）的计算的，后来人们就把这类计算称为<strong>Alpha 合成</strong> ( Alpha Compositing ) 。</p>',11),r={href:"https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},k=s('<p>源图像和目标图像：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesb988b791cb9f3.jpg" alt="21.jpg"></p><p>Alpha 合成：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images84ecb62410792.jpg" alt="22.jpg"></p><p>第二类，混合，也就是 Photoshop 等制图软件里都有的那些混合模式（<code>multiply</code> <code>darken</code> <code>lighten</code> 之类的）。这一类操作的是颜色本身而不是 <code>Alpha</code> 通道，并不属于 <code>Alpha</code> 合成，所以和 Porter 与 Duff 这两个人也没什么关系，不过为了使用的方便，它们同样也被 Google 加进了 <code>PorterDuff.Mode</code> 里。</p>',5),m={href:"https://developer.android.com/reference/android/graphics/PorterDuff.Mode.html?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},h=s('<p><img src="https://raw.githubusercontent.com/shug666/image/main/images3c75cc8283065.jpg" alt="23.jpg"></p><h5 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h5><p>从效果图可以看出，Alpha 合成类的效果都比较直观，基本上可以使用简单的口头表达来描述它们的算法（起码对于不透明的源图像和目标图像来说是可以的），例如 <code>SRC_OVER</code> 表示「二者都绘制，但要源图像放在目标图像的上面」，<code>DST_IN</code> 表示「只绘制目标图像，并且只绘制它和源图像重合的区域」。</p><p>而混合类的效果就相对抽象一些，只从效果图不太能看得出它们的着色算法，更看不出来它们有什么用。不过没关系，你如果拿着这些名词去问你司的设计师，他们八成都能给你说出来个 123。</p><p>所以对于这些 <code>Mode</code>，正确的做法是：<strong>对于 Alpha 合成类的操作，掌握他们，并在实际开发中灵活运用；而对于混合类的，你只要把它们的名字记住就好了，这样当某一天设计师告诉你「我要做这种混合效果」的时候，你可以马上知道自己能不能做，怎么做。</strong></p><p>另外：<code>PorterDuff.Mode</code> 建议你动手用一下试试，对加深理解有帮助。</p>',6),f=s(`<p>好了，这些就是几个 <code>Shader</code> 的具体介绍。</p><p>除了使用 <code>setColor/ARGB()</code> 和 <code>setShader()</code> 来设置基本颜色， <code>Paint</code> 还可以来设置 <code>ColorFilter</code>，来对颜色进行第二层处理。</p><h3 id="setcolorfilter-colorfilter-colorfilter" tabindex="-1"><a class="header-anchor" href="#setcolorfilter-colorfilter-colorfilter" aria-hidden="true">#</a> setColorFilter(ColorFilter colorFilter)</h3><p><code>ColorFilter</code> 这个类，它的名字已经足够解释它的作用：为绘制设置颜色过滤。颜色过滤的意思，就是为绘制的内容设置一个统一的过滤策略，然后 <code>Canvas.drawXXX()</code> 方法会对每个像素都进行过滤后再绘制出来。举几个现实中比较常见的颜色过滤的例子：</p><ul><li>有色光照射：</li></ul><p><img src="https://raw.githubusercontent.com/shug666/image/main/images076819e4a8455.jpg" alt=""></p><ul><li><p>有色玻璃透视：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images728c161cbbca7.jpg" alt=""></p></li><li><p>胶卷：</p></li></ul><p><img src="https://raw.githubusercontent.com/shug666/image/main/images34ebbd744647e.jpg" alt="26.jpg"></p><p>在 <code>Paint</code> 里设置 <code>ColorFilter</code> ，使用的是 <code>Paint.setColorFilter(ColorFilter filter)</code> 方法。 <code>ColorFilter</code> 并不直接使用，而是使用它的子类。它共有三个子类：<code>LightingColorFilter</code> <code>PorterDuffColorFilter</code> 和 <code>ColorMatrixColorFilter</code>。</p><h4 id="lightingcolorfilter" tabindex="-1"><a class="header-anchor" href="#lightingcolorfilter" aria-hidden="true">#</a> LightingColorFilter</h4><p>这个 <code>LightingColorFilter</code> 是用来模拟简单的光照效果的。</p><p><code>LightingColorFilter</code> 的构造方法是 <code>LightingColorFilter(int mul, int add)</code> ，参数里的 <code>mul</code> 和 <code>add</code> 都是和颜色值格式相同的 int 值，其中 <code>mul</code> 用来和目标像素相乘，<code>add</code> 用来和目标像素相加：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">R</span>&#39; <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">mul<span class="token punctuation">.</span></span>R</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">add<span class="token punctuation">.</span></span>R</span>
<span class="token class-name">G</span>&#39; <span class="token operator">=</span> <span class="token class-name">G</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">mul<span class="token punctuation">.</span></span>G</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">add<span class="token punctuation">.</span></span>G</span>
<span class="token class-name">B</span>&#39; <span class="token operator">=</span> <span class="token class-name">B</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">mul<span class="token punctuation">.</span></span>B</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token class-name"><span class="token namespace">add<span class="token punctuation">.</span></span>B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个「保持原样」的「基本 <code>LightingColorFilter</code> 」，<code>mul</code> 为 <code>0xffffff</code>，<code>add</code> 为 <code>0x000000</code>（也就是0），那么对于一个像素，它的计算过程就是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">R</span>&#39; <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">*</span> <span class="token number">0xff</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token comment">// R&#39; = R</span>
<span class="token class-name">G</span>&#39; <span class="token operator">=</span> <span class="token class-name">G</span> <span class="token operator">*</span> <span class="token number">0xff</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token operator">=</span> <span class="token class-name">G</span> <span class="token comment">// G&#39; = G</span>
<span class="token class-name">B</span>&#39; <span class="token operator">=</span> <span class="token class-name">B</span> <span class="token operator">*</span> <span class="token number">0xff</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token operator">=</span> <span class="token class-name">B</span> <span class="token comment">// B&#39; = B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基于这个「基本 <code>LightingColorFilter</code> 」，你就可以修改一下做出其他的 filter。比如，如果你想去掉原像素中的红色，可以把它的 <code>mul</code> 改为 <code>0x00ffff</code> （红色部分为 0 ） ，那么它的计算过程就是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">R</span>&#39; <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">*</span> <span class="token number">0x0</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// 红色被移除</span>
<span class="token class-name">G</span>&#39; <span class="token operator">=</span> <span class="token class-name">G</span> <span class="token operator">*</span> <span class="token number">0xff</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token operator">=</span> <span class="token class-name">G</span>
<span class="token class-name">B</span>&#39; <span class="token operator">=</span> <span class="token class-name">B</span> <span class="token operator">*</span> <span class="token number">0xff</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token operator">=</span> <span class="token class-name">B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体效果是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ColorFilter</span> lightingColorFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightingColorFilter</span><span class="token punctuation">(</span><span class="token number">0x00ffff</span><span class="token punctuation">,</span> <span class="token number">0x000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setColorFilter</span><span class="token punctuation">(</span>lightingColorFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images587619c461a90.jpg" alt=""></p><blockquote><p>表情忽然变得阴郁了</p></blockquote><p>或者，如果你想让它的绿色更亮一些，就可以把它的 <code>add</code> 改为 <code>0x003000</code> （绿色部分为 0x30 ），那么它的计算过程就是：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">R</span>&#39; <span class="token operator">=</span> <span class="token class-name">R</span> <span class="token operator">*</span> <span class="token number">0xff</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token operator">=</span> <span class="token class-name">R</span>
<span class="token class-name">G</span>&#39; <span class="token operator">=</span> <span class="token class-name">G</span> <span class="token operator">*</span> <span class="token number">0xff</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x30</span> <span class="token operator">=</span> <span class="token class-name">G</span> <span class="token operator">+</span> <span class="token number">0x30</span> <span class="token comment">// 绿色被加强</span>
<span class="token class-name">B</span>&#39; <span class="token operator">=</span> <span class="token class-name">B</span> <span class="token operator">*</span> <span class="token number">0xff</span> <span class="token operator">/</span> <span class="token number">0xff</span> <span class="token operator">+</span> <span class="token number">0x0</span> <span class="token operator">=</span> <span class="token class-name">B</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果是这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ColorFilter</span> lightingColorFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LightingColorFilter</span><span class="token punctuation">(</span><span class="token number">0xffffff</span><span class="token punctuation">,</span> <span class="token number">0x003000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setColorFilter</span><span class="token punctuation">(</span>lightingColorFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesd3aa0883c2074.jpg" alt="28.jpg"></p><blockquote><p>这样的表情才阳光</p></blockquote><p>至于怎么修改参数来模拟你想要的某种具体光照效果，你就别问我了，还是跟你司设计师讨论吧，这个我不专业……</p><h4 id="porterduffcolorfilter" tabindex="-1"><a class="header-anchor" href="#porterduffcolorfilter" aria-hidden="true">#</a> PorterDuffColorFilter</h4><p>这个 <code>PorterDuffColorFilter</code> 的作用是使用一个指定的颜色和一种指定的 <code>PorterDuff.Mode</code> 来与绘制对象进行合成。它的构造方法是 <code>PorterDuffColorFilter(int color, PorterDuff.Mode mode)</code> 其中的 <code>color</code> 参数是指定的颜色， <code>mode</code> 参数是指定的 <code>Mode</code>。同样也是 <code>PorterDuff.Mode</code> ，不过和 <code>ComposeShader</code> 不同的是，<code>PorterDuffColorFilter</code> 作为一个 <code>ColorFilter</code>，只能指定一种颜色作为源，而不是一个 <code>Bitmap</code>。</p><p><code>PorterDuff.Mode</code> 前面已经讲过了，而 <code>PorterDuffColorFilter</code> 本身的使用是非常简单的，所以不再展开讲。</p><h4 id="colormatrixcolorfilter" tabindex="-1"><a class="header-anchor" href="#colormatrixcolorfilter" aria-hidden="true">#</a> ColorMatrixColorFilter</h4><p>这个就厉害了。<code>ColorMatrixColorFilter</code> 使用一个 <code>ColorMatrix</code> 来对颜色进行处理。 <code>ColorMatrix</code> 这个类，内部是一个 4x5 的矩阵：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">[</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">,</span>
  f<span class="token punctuation">,</span> g<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span>
  k<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> o<span class="token punctuation">,</span>
  p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过计算， <code>ColorMatrix</code> 可以把要绘制的像素进行转换。对于颜色 [R, G, B, A] ，转换算法是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">R</span>’ <span class="token operator">=</span> a<span class="token operator">*</span><span class="token class-name">R</span> <span class="token operator">+</span> b<span class="token operator">*</span><span class="token class-name">G</span> <span class="token operator">+</span> c<span class="token operator">*</span><span class="token class-name">B</span> <span class="token operator">+</span> d<span class="token operator">*</span><span class="token class-name">A</span> <span class="token operator">+</span> e<span class="token punctuation">;</span>
<span class="token class-name">G</span>’ <span class="token operator">=</span> f<span class="token operator">*</span><span class="token class-name">R</span> <span class="token operator">+</span> g<span class="token operator">*</span><span class="token class-name">G</span> <span class="token operator">+</span> h<span class="token operator">*</span><span class="token class-name">B</span> <span class="token operator">+</span> i<span class="token operator">*</span><span class="token class-name">A</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>
<span class="token class-name">B</span>’ <span class="token operator">=</span> k<span class="token operator">*</span><span class="token class-name">R</span> <span class="token operator">+</span> l<span class="token operator">*</span><span class="token class-name">G</span> <span class="token operator">+</span> m<span class="token operator">*</span><span class="token class-name">B</span> <span class="token operator">+</span> n<span class="token operator">*</span><span class="token class-name">A</span> <span class="token operator">+</span> o<span class="token punctuation">;</span>
<span class="token class-name">A</span>’ <span class="token operator">=</span> p<span class="token operator">*</span><span class="token class-name">R</span> <span class="token operator">+</span> q<span class="token operator">*</span><span class="token class-name">G</span> <span class="token operator">+</span> r<span class="token operator">*</span><span class="token class-name">B</span> <span class="token operator">+</span> s<span class="token operator">*</span><span class="token class-name">A</span> <span class="token operator">+</span> t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),g=n("code",null,"ColorMatrix",-1),b=n("code",null,"setSaturation(float sat)",-1),v={href:"https://github.com/chengdazhi/StyleImageView?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},P=s(`<p>!<img src="https://raw.githubusercontent.com/shug666/image/main/images0f53d98cd265f.gif" alt="29.gif"></p><p>以上，就是 <code>Paint</code> 对颜色的第二层处理：通过 <code>setColorFilter(colorFilter)</code> 来加工颜色。</p><p>除了基本颜色的设置（ <code>setColor/ARGB()</code>, <code>setShader()</code> ）以及基于原始颜色的过滤（ <code>setColorFilter()</code> ）之外，<code>Paint</code> 最后一层处理颜色的方法是 <code>setXfermode(Xfermode xfermode)</code> ，它处理的是「当颜色遇上 View」的问题。</p><h3 id="setxfermode-xfermode-xfermode" tabindex="-1"><a class="header-anchor" href="#setxfermode-xfermode-xfermode" aria-hidden="true">#</a> setXfermode(Xfermode xfermode)</h3><p>&quot;Xfermode&quot; 其实就是 &quot;Transfer mode&quot;，用 &quot;X&quot; 来代替 &quot;Trans&quot; 是一些美国人喜欢用的简写方式。严谨地讲， <code>Xfermode</code> 指的是你要绘制的内容和 <code>Canvas</code> 的目标位置的内容应该怎样结合计算出最终的颜色。但通俗地说，其实就是要你以绘制的内容作为源图像，以 View 中已有的内容作为目标图像，选取一个 <code>PorterDuff.Mode</code> 作为绘制内容的颜色处理方案。就像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Xfermode</span> xfermode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PorterDuffXfermode</span><span class="token punctuation">(</span><span class="token class-name">PorterDuff<span class="token punctuation">.</span>Mode</span><span class="token punctuation">.</span><span class="token constant">DST_IN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>rectBitmap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 画方</span>
paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span>xfermode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 Xfermode</span>
canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>circleBitmap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 画圆</span>
paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用完及时清除 Xfermode</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images0ee498ffb2b22.jpg" alt="30.jpg"></p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images999bf6c3755e6.gif" alt="31.gif"></p><p>又是 <code>PorterDuff.Mode</code> 。 <code>PorterDuff.Mode</code> 在 <code>Paint</code> 一共有三处 API ，它们的工作原理都一样，只是用途不同：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images137ef84ed838a.jpg" alt="32.jpg"></p><p>另外，从上面的示例代码可以看出，创建 <code>Xfermode</code> 的时候其实是创建的它的子类 <code>PorterDuffXfermode</code>。而事实上，<code>Xfermode</code> 也只有这一个子类。所以在设置 <code>Xfermode</code> 的时候不用多想，直接用 <code>PorterDuffXfermode</code> 吧。</p><blockquote><p>「只有一个子类？？？什么设计？」</p><p>其实在更早的 Android 版本中，<code>Xfermode</code> 还有别的子类，但别的子类现在已经 <code>deprecated</code> 了，如今只剩下了 <code>PorterDuffXfermode</code>。所以目前它的使用看起来好像有点啰嗦，但其实是由于历史遗留问题。</p></blockquote><h4 id="xfermode-注意事项" tabindex="-1"><a class="header-anchor" href="#xfermode-注意事项" aria-hidden="true">#</a> Xfermode 注意事项</h4><p><code>Xfermode</code> 使用很简单，不过有两点需要注意：</p><h5 id="_1-使用离屏缓冲-off-screen-buffer" tabindex="-1"><a class="header-anchor" href="#_1-使用离屏缓冲-off-screen-buffer" aria-hidden="true">#</a> 1. 使用离屏缓冲（Off-screen Buffer）</h5><p>实质上，上面这段例子代码，如果直接执行的话是不会绘制出图中效果的，程序的绘制也不会像上面的动画那样执行，而是会像这样：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images4467ebe4bd231.jpg" alt="34.jpg"></p><blockquote><p>为什么会这样？</p></blockquote><p>按照逻辑我们会认为，在第二步画圆的时候，跟它共同计算的是第一步绘制的方形。但实际上，却是整个 <code>View</code> 的显示区域都在画圆的时候参与计算，并且 <code>View</code> 自身的底色并不是默认的透明色，而且是遵循一种迷之逻辑，导致不仅绘制的是整个圆的范围，而且在范围之外都变成了黑色。就像这样：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images7615c4e22af6a.gif" alt="35.gif"></p><blockquote><p>这……那可如何是好？</p></blockquote><p>要想使用 <code>setXfermode()</code> 正常绘制，必须使用离屏缓存 (Off-screen Buffer) 把内容绘制在额外的层上，再把绘制好的内容贴回 View 中。也就是这样：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images9ef3dde83f85e.gif" alt="36.gif"></p><p>通过使用离屏缓冲，把要绘制的内容单独绘制在缓冲层， <code>Xfermode</code> 的使用就不会出现奇怪的结果了。使用离屏缓冲有两种方式：</p><ul><li><code>Canvas.saveLayer()</code></li></ul><p><code>saveLayer()</code> 可以做短时的离屏缓冲。使用方法很简单，在绘制代码的前后各加一行代码，在绘制之前保存，绘制之后恢复：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> saved <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">saveLayer</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">Canvas</span><span class="token punctuation">.</span><span class="token constant">ALL_SAVE_FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>rectBitmap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 画方</span>
paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span>xfermode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置 Xfermode</span>
canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>circleBitmap<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 画圆</span>
paint<span class="token punctuation">.</span><span class="token function">setXfermode</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用完及时清除 Xfermode</span>

canvas<span class="token punctuation">.</span><span class="token function">restoreToCount</span><span class="token punctuation">(</span>saved<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>View.setLayerType()</code></li></ul><p><code>View.setLayerType()</code> 是直接把整个 <code>View</code> 都绘制在离屏缓冲中。 <code>setLayerType(LAYER_TYPE_HARDWARE)</code> 是使用 GPU 来缓冲， <code>setLayerType(LAYER_TYPE_SOFTWARE)</code> 是直接直接用一个 <code>Bitmap</code> 来缓冲。</p><blockquote><p>关于 <code>Canvas.saveLayer()</code> 和 <code>View.setLayerType()</code> ，这里就不细讲它们的意义和原理了，后面也许我会专门用一期来讲它们。</p></blockquote>`,30),w=n("code",null,"Canvas.saveLayer()",-1),x={href:"https://developer.android.com/guide/topics/graphics/hardware-accel.html?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},j=s(`<h5 id="_2-控制好透明区域" tabindex="-1"><a class="header-anchor" href="#_2-控制好透明区域" aria-hidden="true">#</a> 2. 控制好透明区域</h5><p>使用 Xfermode 来绘制的内容，除了注意使用离屏缓冲，还应该注意控制它的透明区域不要太小，要让它足够覆盖到要和它结合绘制的内容，否则得到的结果很可能不是你想要的。我用图片来具体说明一下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesb44c4c4a77903.jpg" alt="37.jpg"></p><blockquote><p>如图所示，由于透明区域过小而覆盖不到的地方，将不会受到 Xfermode 的影响。</p></blockquote><p>好，到此为止，前面讲的就是 <code>Paint</code> 的第一类 API——关于颜色的三层设置：直接设置颜色的 API 用来给图形和文字设置颜色； <code>setColorFilter()</code> 用来基于颜色进行过滤处理； <code>setXfermode()</code> 用来处理源图像和 <code>View</code> 已有内容的关系。</p><h2 id="_2-效果" tabindex="-1"><a class="header-anchor" href="#_2-效果" aria-hidden="true">#</a> 2 效果</h2><p>效果类的 API ，指的就是抗锯齿、填充/轮廓、线条宽度等等这些。</p><h3 id="setantialias-boolean-aa-设置抗锯齿" tabindex="-1"><a class="header-anchor" href="#setantialias-boolean-aa-设置抗锯齿" aria-hidden="true">#</a> setAntiAlias (boolean aa) 设置抗锯齿</h3><p>抗锯齿默认是关闭的，如果需要抗锯齿，需要显式地打开。另外，除了 <code>setAntiAlias(aa)</code> 方法，打开抗锯齿还有一个更方便的方式：构造方法。创建 <code>Paint</code> 对象的时候，构造方法的参数里加一个 <code>ANTI_ALIAS_FLAG</code> 的 flag，就可以在初始化的时候就开启抗锯齿。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Paint</span> paint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Paint</span><span class="token punctuation">(</span><span class="token class-name">Paint</span><span class="token punctuation">.</span><span class="token constant">ANTI_ALIAS_FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="setstyle-paint-style-style" tabindex="-1"><a class="header-anchor" href="#setstyle-paint-style-style" aria-hidden="true">#</a> setStyle(Paint.Style style)</h3><p><code>setStyle(style)</code> 也在上一节讲过了，用来设置图形是线条风格还是填充风格的（也可以二者并用）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// FILL 模式，填充</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// STROKE 模式，画线</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">FILL_AND_STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// FILL_AND_STROKE 模式，填充 + 画线</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FILL</code> 模式是默认模式，所以如果之前没有设置过其他的 <code>Style</code>，可以不用 <code>setStyle(Paint.Style.FILL)</code> 这句。</p><h3 id="线条形状" tabindex="-1"><a class="header-anchor" href="#线条形状" aria-hidden="true">#</a> 线条形状</h3><p>设置线条形状的一共有 4 个方法：<code>setStrokeWidth(float width)</code>, <code>setStrokeCap(Paint.Cap cap)</code>, <code>setStrokeJoin(Paint.Join join)</code>, <code>setStrokeMiter(float miter)</code> 。</p><h4 id="setstrokewidth-float-width" tabindex="-1"><a class="header-anchor" href="#setstrokewidth-float-width" aria-hidden="true">#</a> setStrokeWidth(float width)</h4><p>设置线条宽度。单位为像素，默认值是 0。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setStyle</span><span class="token punctuation">(</span><span class="token class-name">Paint<span class="token punctuation">.</span>Style</span><span class="token punctuation">.</span><span class="token constant">STROKE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setStrokeWidth</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>线条宽度 0 和 1 的区别</p><p>默认情况下，线条宽度为 0，但你会发现，这个时候它依然能够画出线，线条的宽度为 1 像素。那么它和线条宽度为 1 有什么区别呢？</p><p>其实这个和后面要讲的一个「几何变换」有关：你可以为 <code>Canvas</code> 设置 <code>Matrix</code> 来实现几何变换（如放大、缩小、平移、旋转），在几何变换之后 <code>Canvas</code> 绘制的内容就会发生相应变化，包括线条也会加粗，例如 2 像素宽度的线条在 <code>Canvas</code> 放大 2 倍后会被以 4 像素宽度来绘制。而当线条宽度被设置为 0 时，它的宽度就被固定为 1 像素，就算 <code>Canvas</code> 通过几何变换被放大，它也依然会被以 1 像素宽度来绘制。Google 在文档中把线条宽度为 0 时称作「hairline mode（发际线模式）」。</p></blockquote><h4 id="setstrokecap-paint-cap-cap" tabindex="-1"><a class="header-anchor" href="#setstrokecap-paint-cap-cap" aria-hidden="true">#</a> setStrokeCap(Paint.Cap cap)</h4><p>设置线头的形状。线头形状有三种：<code>BUTT</code> 平头、<code>ROUND</code> 圆头、<code>SQUARE</code> 方头。默认为 <code>BUTT</code>。</p><blockquote><p>放出「平头」「圆头」「方头」这种翻译我始终有点纠结：既觉得自己翻译得简洁清晰尽显机智，同时又担心用词会不会有点太过通俗，让人觉得我不够高贵冷艳？</p></blockquote><p>当线条的宽度是 1 像素时，这三种线头的表现是完全一致的，全是 1 个像素的点；而当线条变粗的时候，它们就会表现出不同的样子：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesd69bf651e53e7.jpg" alt="44.jpg"></p><p>虚线是额外加的，虚线左边是线的实际长度，虚线右边是线头。有了虚线作为辅助，可以清楚地看出 <code>BUTT</code> 和 <code>SQUARE</code> 的区别。</p><h4 id="setstrokejoin-paint-join-join" tabindex="-1"><a class="header-anchor" href="#setstrokejoin-paint-join-join" aria-hidden="true">#</a> setStrokeJoin(Paint.Join join)</h4><p>设置拐角的形状。有三个值可以选择：<code>MITER</code> 尖角、 <code>BEVEL</code> 平角和 <code>ROUND</code> 圆角。默认为 <code>MITER</code>。</p><h4 id="setstrokemiter-float-miter" tabindex="-1"><a class="header-anchor" href="#setstrokemiter-float-miter" aria-hidden="true">#</a> setStrokeMiter(float miter)</h4><p>这个方法是对于 <code>setStrokeJoin()</code> 的一个补充，它用于设置 <code>MITER</code> 型拐角的延长线的最大值。所谓「延长线的最大值」，是这么一回事：</p><p>当线条拐角为 <code>MITER</code> 时，拐角处的外缘需要使用延长线来补偿：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images5a62600b44d0d.jpg" alt="48.jpg"></p><p>而这种补偿方案会有一个问题：如果拐角的角度太小，就有可能由于出现连接点过长的情况。比如这样：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesb44fb365c55c2.jpg" alt="49.jpg"></p><p>所以为了避免意料之外的过长的尖角出现， <code>MITER</code> 型连接点有一个额外的规则：当尖角过长时，自动改用 <code>BEVEL</code> 的方式来渲染连接点。例如上图的这个尖角，在默认情况下是不会出现的，而是会由于延长线过长而被转为 <code>BEVEL</code> 型连接点：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images0b3543fa721c4.jpg" alt="50.jpg"></p><p>至于多尖的角属于过于尖，尖到需要转为使用 <code>BEVEL</code> 来绘制，则是由一个属性控制的，而这个属性就是 <code>setStrokeMiter(miter)</code> 方法中的 <code>miter</code> 参数。<code>miter</code> 参数是对于转角长度的限制，具体来讲，是指尖角的外缘端点和内部拐角的距离与线条宽度的比。也就是下面这两个长度的比：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images31ad822b53a9d.jpg" alt="51.jpg"></p><p>用几何知识很容易得出这个比值的计算公式：如果拐角的大小为 θ ，那么这个比值就等于 1 / sin ( θ / 2 ) 。</p><p>这个 miter limit 的默认值是 4，对应的是一个大约 29° 的锐角：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images0df82b864d6aa.jpg" alt="52.jpg"></p><blockquote><p>默认情况下，大于这个角的尖角会被保留，而小于这个夹角的就会被「削成平头」</p></blockquote><blockquote><p>所以，这个方法虽然名叫 <code>setStrokeMiter(miter)</code> ，但它其实设置的是「 线条在 <code>Join</code> 类型为 <code>MITER</code> 时对于 <code>MITER</code> 的长度限制」。它的这个名字虽然短，但却存在一定的迷惑性，如果叫 <code>setStrokeJoinMiterLimit(limit)</code> 就更准确了。 Google 的工程师没有这么给它命名，大概也是不想伤害大家的手指吧，毕竟程序员何苦为难程序员。</p></blockquote><p>以上就是 4 个关于线条形状的方法： <code>setStrokeWidth(width)</code> <code>setStrokeCap(cap)</code> <code>setStrokeJoint(join)</code> 和 <code>setStrokeMiter(miter)</code>。</p><h3 id="色彩优化" tabindex="-1"><a class="header-anchor" href="#色彩优化" aria-hidden="true">#</a> 色彩优化</h3><p><code>Paint</code> 的色彩优化有两个方法： <code>setDither(boolean dither)</code> 和 <code>setFilterBitmap(boolean filter)</code> 。它们的作用都是让画面颜色变得更加「顺眼」，但原理和使用场景是不同的。</p><h4 id="setdither-boolean-dither" tabindex="-1"><a class="header-anchor" href="#setdither-boolean-dither" aria-hidden="true">#</a> setDither(boolean dither)</h4><p>设置图像的抖动。</p><p>在介绍抖动之前，先来看一个猥琐男：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesaf6bee36b9b68.jpg" alt=""></p><p>注意毛利小五郎脸上的红晕，它们并不是使用一片淡红色涂抹出来的，而是画了三道深色的红线。这三道深色红线放在脸上，给人的视觉效果就成了「淡淡的红晕」。</p><p>抖动的原理和这个类似。所谓抖动（注意，它就叫抖动，不是防抖动，也不是去抖动，有些人在翻译的时候自作主张地加了一个「防」字或者「去」字，这是不对的），是指把图像从较高色彩深度（即可用的颜色数）向较低色彩深度的区域绘制时，在图像中有意地插入噪点，通过有规律地扰乱图像来让图像对于肉眼更加真实的做法。</p><p>比如向 1 位色彩深度的区域中绘制灰色，由于 1 位深度只包含黑和白两种颜色，在默认情况下，即不加抖动的时候，只能选择向上或向下选择最接近灰色的白色或黑色来绘制，那么显示出来也只能是一片白或者一片黑。而加了抖动后，就可以绘制出让肉眼识别为灰色的效果了：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images5d05ab860d0f9.jpg" alt="56.jpg"></p><p>瞧，像上面这样，用黑白相间的方式来绘制，就可以骗过肉眼，让肉眼辨别为灰色了。</p><p>嗯？你说你看不出灰色，只看出黑白相间？没关系，那是因为像素颗粒太大，我把像素颗粒缩小，看到完整效果你就会发现变灰了：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagescf4f3add361ad.jpg" alt="57.jpg"></p><p>这下变灰了吧？</p><p>什么，还没有变灰？那一定是你看图的姿势不对了。</p>`,61),C={href:"https://en.wikipedia.org/wiki/Dither?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},E=s(`<p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesfdaef38874a0f.jpg" alt="59.jpg"></p><p>看着很牛逼对吧？确实很牛逼，而且在 Android 里使用起来也很简单，一行代码就搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setDither</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>只要加这么一行代码，之后的绘制就是加抖动的了。</p><p>不过对于现在（2017年）而言， <code>setDither(dither)</code> 已经没有当年那么实用了，因为现在的 Android 版本的绘制，默认的色彩深度已经是 32 位的 <code>ARGB_8888</code> ，效果已经足够清晰了。只有当你向自建的 <code>Bitmap</code> 中绘制，并且选择 16 位色的 <code>ARGB_4444</code> 或者 <code>RGB_565</code> 的时候，开启它才会有比较明显的效果。</p><h4 id="setfilterbitmap-boolean-filter" tabindex="-1"><a class="header-anchor" href="#setfilterbitmap-boolean-filter" aria-hidden="true">#</a> setFilterBitmap(boolean filter)</h4><p>设置是否使用双线性过滤来绘制 <code>Bitmap</code> 。</p>`,7),S={href:"https://zh.wikipedia.org/wiki/%E5%8F%8C%E7%BA%BF%E6%80%A7%E8%BF%87%E6%BB%A4?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},y=s(`<p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesac9565099ce53.jpg" alt="60.jpg"></p><p>牛逼吧？而且它的使用同样也很简单：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setFilterBitmap</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加上这一行，在放大绘制 <code>Bitmap</code> 的时候就会使用双线性过滤了。</p><p>以上就是 <code>Paint</code> 的两个色彩优化的方法： <code>setDither(dither)</code> ，设置抖动来优化色彩深度降低时的绘制效果； <code>setFilterBitmap(filterBitmap)</code> ，设置双线性过滤来优化 <code>Bitmap</code> 放大绘制的效果。</p><h4 id="setpatheffect-patheffect-effect" tabindex="-1"><a class="header-anchor" href="#setpatheffect-patheffect-effect" aria-hidden="true">#</a> setPathEffect(PathEffect effect)</h4><p>使用 <code>PathEffect</code> 来给图形的轮廓设置效果。对 <code>Canvas</code> 所有的图形绘制有效，也就是 <code>drawLine()</code> <code>drawCircle()</code> <code>drawPath()</code> 这些方法。大概像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PathEffect</span> pathEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DashPathEffect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setPathEffect</span><span class="token punctuation">(</span>pathEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawCircle</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images7a49cf7b0f0d4.jpg" alt="006tNc79ly1fig7diyn5jj308h089mx5.jpg"></p><p>下面就具体说一下 Android 中的 6 种 <code>PathEffect</code>。<code>PathEffect</code> 分为两类，单一效果的 <code>CornerPathEffect</code> <code>DiscretePathEffect</code> <code>DashPathEffect</code> <code>PathDashPathEffect</code> ，和组合效果的 <code>SumPathEffect</code> <code>ComposePathEffect</code>。</p><h4 id="cornerpatheffect" tabindex="-1"><a class="header-anchor" href="#cornerpatheffect" aria-hidden="true">#</a> CornerPathEffect</h4><p>把所有拐角变成圆角。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PathEffect pathEffect = new CornerPathEffect(20);
paint.setPathEffect(pathEffect);

...

canvas.drawPath(path, paint);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images10422f5d5a492.jpg" alt="61.jpg"></p><p>它的构造方法 <code>CornerPathEffect(float radius)</code> 的参数 <code>radius</code> 是圆角的半径。</p><h4 id="discretepatheffect" tabindex="-1"><a class="header-anchor" href="#discretepatheffect" aria-hidden="true">#</a> DiscretePathEffect</h4><p>把线条进行随机的偏离，让轮廓变得乱七八糟。乱七八糟的方式和程度由参数决定。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PathEffect</span> pathEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiscretePathEffect</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setPathEffect</span><span class="token punctuation">(</span>pathEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images818dc9d861809.jpg" alt="62.jpg"></p><p><code>DiscretePathEffect</code> 具体的做法是，把绘制改为使用定长的线段来拼接，并且在拼接的时候对路径进行随机偏离。它的构造方法 <code>DiscretePathEffect(float segmentLength, float deviation)</code> 的两个参数中， <code>segmentLength</code> 是用来拼接的每个线段的长度， <code>deviation</code> 是偏离量。这两个值设置得不一样，显示效果也会不一样，具体的你自己多试几次就明白了，这里不再贴更多的图。</p><h4 id="dashpatheffect" tabindex="-1"><a class="header-anchor" href="#dashpatheffect" aria-hidden="true">#</a> DashPathEffect</h4><p>使用虚线来绘制线条。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PathEffect</span> pathEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DashPathEffect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
paint<span class="token punctuation">.</span><span class="token function">setPathEffect</span><span class="token punctuation">(</span>pathEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images72ec01c5204a0.jpg" alt="63.jpg"></p><p>它的构造方法 <code>DashPathEffect(float[] intervals, float phase)</code> 中， 第一个参数 <code>intervals</code> 是一个数组，它指定了虚线的格式：数组中元素必须为偶数（最少是 2 个），按照「画线长度、空白长度、画线长度、空白长度」……的顺序排列，例如上面代码中的 <code>20, 5, 10, 5</code> 就表示虚线是按照「画 20 像素、空 5 像素、画 10 像素、空 5 像素」的模式来绘制；第二个参数 <code>phase</code> 是虚线的偏移量。</p><h4 id="pathdashpatheffect" tabindex="-1"><a class="header-anchor" href="#pathdashpatheffect" aria-hidden="true">#</a> PathDashPathEffect</h4><p>这个方法比 <code>DashPathEffect</code> 多一个前缀 <code>Path</code> ，所以顾名思义，它是使用一个 <code>Path</code> 来绘制「虚线」。具体看图吧：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Path dashPath = ...; // 使用一个三角形来做 dash
PathEffect pathEffect = new PathDashPathEffect(dashPath, 40, 0,
        PathDashPathEffectStyle.TRANSLATE);
paint.setPathEffect(pathEffect);

...

canvas.drawPath(path, paint);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesfba1f767baf4a.jpg" alt="64.jpg"></p><p>它的构造方法 <code>PathDashPathEffect(Path shape, float advance, float phase, PathDashPathEffect.Style style)</code> 中， <code>shape</code> 参数是用来绘制的 <code>Path</code> ； <code>advance</code> 是两个相邻的 <code>shape</code> 段之间的间隔，不过注意，这个间隔是两个 <code>shape</code> 段的起点的间隔，而不是前一个的终点和后一个的起点的距离； <code>phase</code> 和 <code>DashPathEffect</code> 中一样，是虚线的偏移；最后一个参数 <code>style</code>，是用来指定拐弯改变的时候 <code>shape</code> 的转换方式。<code>style</code> 的类型为 <code>PathDashPathEffect.Style</code> ，是一个 <code>enum</code> ，具体有三个值：</p><ul><li><code>TRANSLATE</code>：位移</li><li><code>ROTATE</code>：旋转</li><li><code>MORPH</code>：变体</li><li><img src="https://raw.githubusercontent.com/shug666/image/main/images79399279c397d.jpg" alt=""></li></ul><h4 id="sumpatheffect" tabindex="-1"><a class="header-anchor" href="#sumpatheffect" aria-hidden="true">#</a> SumPathEffect</h4><p>这是一个组合效果类的 <code>PathEffect</code> 。它的行为特别简单，就是分别按照两种 <code>PathEffect</code> 分别对目标进行绘制。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PathEffect</span> dashEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DashPathEffect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PathEffect</span> discreteEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiscretePathEffect</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
pathEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SumPathEffect</span><span class="token punctuation">(</span>dashEffect<span class="token punctuation">,</span> discreteEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesf10dee24e41df.jpg" alt=""></p><h4 id="composepatheffect" tabindex="-1"><a class="header-anchor" href="#composepatheffect" aria-hidden="true">#</a> ComposePathEffect</h4><p>这也是一个组合效果类的 <code>PathEffect</code> 。不过它是先对目标 <code>Path</code> 使用一个 <code>PathEffect</code>，然后再对这个改变后的 <code>Path</code> 使用另一个 <code>PathEffect</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PathEffect</span> dashEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DashPathEffect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PathEffect</span> discreteEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiscretePathEffect</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
pathEffect <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComposePathEffect</span><span class="token punctuation">(</span>dashEffect<span class="token punctuation">,</span> discreteEffect<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawPath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images70600e18182aa.jpg" alt="67.jpg"></p><p>它的构造方法 <code>ComposePathEffect(PathEffect outerpe, PathEffect innerpe)</code> 中的两个 <code>PathEffect</code> 参数， <code>innerpe</code> 是先应用的， <code>outerpe</code> 是后应用的。所以上面的代码就是「先偏离，再变虚线」。而如果把两个参数调换，就成了「先变虚线，再偏离」。至于具体的视觉效果……我就不贴图了，你自己试试看吧！</p><p>上面这些就是 <code>Paint</code> 中的 6 种 <code>PathEffect</code>。它们有的是有独立效果的，有的是用来组合不同的 <code>PathEffect</code> 的，功能各不一样。</p><blockquote><p>注意： <code>PathEffect</code> 在有些情况下不支持硬件加速，需要关闭硬件加速才能正常使用：</p><ol><li><code>Canvas.drawLine()</code> 和 <code>Canvas.drawLines()</code> 方法画直线时，<code>setPathEffect()</code> 是不支持硬件加速的；</li><li><code>PathDashPathEffect</code> 对硬件加速的支持也有问题，所以当使用 <code>PathDashPathEffect</code> 的时候，最好也把硬件加速关了。</li></ol></blockquote><p>剩下的两个效果类方法：<code>setShadowLayer()</code> 和 <code>setMaskFilter()</code> ，它们和前面的效果类方法有点不一样：它们设置的是「附加效果」，也就是基于在绘制内容的额外效果。</p><h3 id="setshadowlayer-float-radius-float-dx-float-dy-int-shadowcolor" tabindex="-1"><a class="header-anchor" href="#setshadowlayer-float-radius-float-dx-float-dy-int-shadowcolor" aria-hidden="true">#</a> setShadowLayer(float radius, float dx, float dy, int shadowColor)</h3><p>在之后的绘制内容下面加一层阴影。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setShadowLayer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images6a14bfe413ecf.jpg" alt=""></p><p>效果就是上面这样。方法的参数里， <code>radius</code> 是阴影的模糊范围； <code>dx</code> <code>dy</code> 是阴影的偏移量； <code>shadowColor</code> 是阴影的颜色。</p><p>如果要清除阴影层，使用 <code>clearShadowLayer()</code> 。</p><p>注意：</p><ul><li><p>在硬件加速开启的情况下， <code>setShadowLayer()</code> 只支持文字的绘制，文字之外的绘制必须关闭硬件加速才能正常绘制阴影。</p></li><li><p>如果 <code>shadowColor</code> 是半透明的，阴影的透明度就使用 <code>shadowColor</code> 自己的透明度；而如果 <code>shadowColor</code> 是不透明的，阴影的透明度就使用 <code>paint</code> 的透明度。</p></li></ul><h3 id="setmaskfilter-maskfilter-maskfilter" tabindex="-1"><a class="header-anchor" href="#setmaskfilter-maskfilter-maskfilter" aria-hidden="true">#</a> setMaskFilter(MaskFilter maskfilter)</h3><p>为之后的绘制设置 <code>MaskFilter</code>。上一个方法 <code>setShadowLayer()</code> 是设置的在绘制层下方的附加效果；而这个 <code>MaskFilter</code> 和它相反，设置的是在绘制层上方的附加效果。</p><blockquote><p>到现在已经有两个 <code>setXxxFilter(filter)</code> 了。前面有一个 <code>setColorFilter(filter)</code> ，是对每个像素的颜色进行过滤；而这里的 <code>setMaskFilter(filter)</code> 则是基于整个画面来进行过滤。</p></blockquote><p><code>MaskFilter</code> 有两种： <code>BlurMaskFilter</code> 和 <code>EmbossMaskFilter</code>。</p><h4 id="blurmaskfilter" tabindex="-1"><a class="header-anchor" href="#blurmaskfilter" aria-hidden="true">#</a> BlurMaskFilter</h4><p>模糊效果的 <code>MaskFilter</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setMaskFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BlurMaskFilter</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token class-name">BlurMaskFilter<span class="token punctuation">.</span>Blur</span><span class="token punctuation">.</span><span class="token constant">NORMAL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagese1d436c9b224c.jpg" alt="006tNc79ly1fig7f17yu0j30kl0b2q3w.jpg"></p><p>它的构造方法 <code>BlurMaskFilter(float radius, BlurMaskFilter.Blur style)</code> 中， <code>radius</code> 参数是模糊的范围， <code>style</code> 是模糊的类型。一共有四种：</p><ul><li><code>NORMAL</code>: 内外都模糊绘制</li><li><code>SOLID</code>: 内部正常绘制，外部模糊</li><li><code>INNER</code>: 内部模糊，外部不绘制</li><li><code>OUTER</code>: 内部不绘制，外部模糊（什么鬼？）</li></ul><p><img src="https://raw.githubusercontent.com/shug666/image/main/images4fd51b3111b29.jpg" alt="006tNc79ly1fig7fr4dwgj30lk0mbgne.jpg"></p><h4 id="embossmaskfilter" tabindex="-1"><a class="header-anchor" href="#embossmaskfilter" aria-hidden="true">#</a> EmbossMaskFilter</h4><p>浮雕效果的 <code>MaskFilter</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setMaskFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EmbossMaskFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0.2f</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

canvas<span class="token punctuation">.</span><span class="token function">drawBitmap</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesdb6fb27f0fb56.jpg" alt=""></p><p>它的构造方法 <code>EmbossMaskFilter(float[] direction, float ambient, float specular, float blurRadius)</code> 的参数里， <code>direction</code> 是一个 3 个元素的数组，指定了光源的方向； <code>ambient</code> 是环境光的强度，数值范围是 0 到 1； <code>specular</code> 是炫光的系数； <code>blurRadius</code> 是应用光线的范围。</p><p>不过由于我没有在项目中使用过 <code>EmbossMaskFilter</code>，对它的每个参数具体调节方式并不熟，你有兴趣的话自己研究一下吧。</p><h3 id="获取绘制的-path" tabindex="-1"><a class="header-anchor" href="#获取绘制的-path" aria-hidden="true">#</a> 获取绘制的 Path</h3><p>这是效果类的最后一组方法，也是效果类唯一的一组 <code>get</code> 方法。</p><p>这组方法做的事是，根据 <code>paint</code> 的设置，计算出绘制 <code>Path</code> 或文字时的<strong>实际 Path</strong>。</p><p>这里你可能会冒出两个问题：</p><ol><li>什么叫「实际 <code>Path</code>」？ <code>Path</code> 就是 <code>Path</code>，这加上个「实际」是什么意思？</li><li>文字的 <code>Path</code> ？文字还有 <code>Path</code>？</li></ol><p>这两个问题（咦好像有四个问号）的答案就在后面的内容里。</p><h4 id="getfillpath-path-src-path-dst" tabindex="-1"><a class="header-anchor" href="#getfillpath-path-src-path-dst" aria-hidden="true">#</a> getFillPath(Path src, Path dst)</h4><p>首先解答第一个问题：「实际 <code>Path</code>」。所谓实际 <code>Path</code> ，指的就是 <code>drawPath()</code> 的绘制内容的轮廓，要算上线条宽度和设置的 <code>PathEffect</code>。</p><p>默认情况下（线条宽度为 0、没有 <code>PathEffect</code>），原 <code>Path</code> 和实际 <code>Path</code> 是一样的；而在线条宽度不为 0 （并且模式为 <code>STROKE</code> 模式或 <code>FLL_AND_STROKE</code> ），或者设置了 <code>PathEffect</code> 的时候，实际 <code>Path</code> 就和原 <code>Path</code> 不一样了：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesf4d37b31290e0.jpg" alt="68.jpg"></p><blockquote><p>看明白了吗？</p></blockquote><p>通过 <code>getFillPath(src, dst)</code> 方法就能获取这个实际 <code>Path</code>。方法的参数里，<code>src</code> 是原 <code>Path</code> ，而 <code>dst</code> 就是实际 <code>Path</code> 的保存位置。 <code>getFillPath(src, dst)</code> 会计算出实际 <code>Path</code>，然后把结果保存在 <code>dst</code> 里。</p><h4 id="gettextpath-string-text-int-start-int-end-float-x-float-y-path-path-gettextpath-char-text-int-index-int-count-float-x-float-y-path-path" tabindex="-1"><a class="header-anchor" href="#gettextpath-string-text-int-start-int-end-float-x-float-y-path-path-gettextpath-char-text-int-index-int-count-float-x-float-y-path-path" aria-hidden="true">#</a> getTextPath(String text, int start, int end, float x, float y, Path path) / getTextPath(char[] text, int index, int count, float x, float y, Path path)</h4><p>这里就回答第二个问题：「文字的 <code>Path</code>」。文字的绘制，虽然是使用 <code>Canvas.drawText()</code> 方法，但其实在下层，文字信息全是被转化成图形，对图形进行绘制的。 <code>getTextPath()</code> 方法，获取的就是目标文字所对应的 <code>Path</code> 。这个就是所谓「文字的 <code>Path</code>」。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesc0a6f2c79dedb.jpg" alt=""></p>`,83),_=n("code",null,"getFillPath()",-1),B=n("code",null,"getTextPath()",-1),R=n("code",null,"Path",-1),M={href:"https://medium.com/google-developers/a-better-underline-for-android-90ba3a2e4fb?ref=rengwuxian.com",target:"_blank",rel:"noopener noreferrer"},A=s(`<p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesd0dbf03d99f4c.jpg" alt="70.jpg"></p><p>到此为止， <code>Paint</code> 的第二类方法——效果类，就也介绍完了。</p><h2 id="_3-drawtext-相关" tabindex="-1"><a class="header-anchor" href="#_3-drawtext-相关" aria-hidden="true">#</a> 3 drawText() 相关</h2><p><code>Paint</code> 有些设置是文字绘制相关的，即和 <code>drawText()</code> 相关的。</p><p>比如设置文字大小</p><p>比如设置文字间隔</p><p>比如设置各种文字效果</p><p>除此之外，<code>Paint</code> 还有很多与文字绘制相关的设置或计算的方法，非常详细。不过由于太详细了，相关方法太多了（<code>Paint</code> 超过一半的方法都是 <code>drawText()</code> 相关的，算不算多？），如果放在这里讲它们的话，内容会显得有点过量。所以这一节我就不讲它们了，把它们放在下一节里单独讲。</p><h2 id="_4-初始化类" tabindex="-1"><a class="header-anchor" href="#_4-初始化类" aria-hidden="true">#</a> 4 初始化类</h2><p>这一类方法很简单，它们是用来初始化 <code>Paint</code> 对象，或者是批量设置 <code>Paint</code> 的多个属性的方法。</p><h3 id="reset" tabindex="-1"><a class="header-anchor" href="#reset" aria-hidden="true">#</a> reset()</h3><p>重置 <code>Paint</code> 的所有属性为默认值。相当于重新 <code>new</code> 一个，不过性能当然高一些啦。</p><h3 id="set-paint-src" tabindex="-1"><a class="header-anchor" href="#set-paint-src" aria-hidden="true">#</a> set(Paint src)</h3><p>把 <code>src</code> 的所有属性全部复制过来。相当于调用 <code>src</code> 所有的 <code>get</code> 方法，然后调用这个 <code>Paint</code> 的对应的 <code>set</code> 方法来设置它们。</p><h3 id="setflags-int-flags" tabindex="-1"><a class="header-anchor" href="#setflags-int-flags" aria-hidden="true">#</a> setFlags(int flags)</h3><p>批量设置 flags。相当于依次调用它们的 <code>set</code> 方法。例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>paint<span class="token punctuation">.</span><span class="token function">setFlags</span><span class="token punctuation">(</span><span class="token class-name">Paint</span><span class="token punctuation">.</span><span class="token constant">ANTI_ALIAS_FLAG</span> <span class="token operator">|</span> <span class="token class-name">Paint</span><span class="token punctuation">.</span><span class="token constant">DITHER_FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这行代码，和下面这两行是等价的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>paint.setAntiAlias(true);
paint.setDither(true);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setFlags(flags)</code> 对应的 <code>get</code> 方法是 <code>int getFlags()</code>。</p><p>好了，这些就是 <code>Paint</code> 的四类方法：<strong>颜色类</strong>、<strong>效果类</strong>、<strong>文字绘制相关</strong>以及<strong>初始化类</strong>。其中颜色类、效果类和初始化类都已经在这节里面讲过了，剩下的一类——文字绘制类，下一节单独讲。</p><p>最后再强调一遍：<strong>这期的内容没必要全部背会，只要看懂、理解，记住有这么个东西就行了。以后在用到的时候，再拐回来翻一翻就行了。</strong></p>`,22),F={href:"https://rengwuxian.com/ui-1-2/",target:"_blank",rel:"noopener noreferrer"};function L(T,D){const e=o("ExternalLinkIcon");return c(),i("div",null,[d,n("blockquote",null,[u,n("p",null,[a("看下效果吧。效果直接盗 Google 的"),n("a",r,[a("官方文档"),t(e)]),a("了。")]),k,n("p",null,[a("效果依然盗 "),n("a",m,[a("官方文档"),t(e)]),a("。")]),h]),f,n("p",null,[g,a(" 有一些自带的方法可以做简单的转换，例如可以使用 "),b,a(" 来设置饱和度；另外你也可以自己去设置它的每一个元素来对转换效果做精细调整。具体怎样设置会有怎样的效果，我就不讲了（其实是我也不太会😅）。如果你有需求，可以试一下程大治同学做的这个库："),n("a",v,[a("StyleImageView"),t(e)])]),P,n("p",null,[a("如果没有特殊需求，可以选用第一种方法 "),w,a(" 来设置离屏缓冲，以此来获得更高的性能。更多关于离屏缓冲的信息，可以看"),n("a",x,[a("官方文档"),t(e)]),a("中对于硬件加速的介绍。")]),j,n("p",null,[a("不过，抖动可不只可以用在纯色的绘制。在实际的应用场景中，抖动更多的作用是在图像降低色彩深度绘制时，避免出现大片的色带与色块。效果盗一下"),n("a",C,[a("维基百科"),t(e)]),a("的图：")]),E,n("p",null,[a("图像在放大绘制的时候，默认使用的是最近邻插值过滤，这种算法简单，但会出现马赛克现象；而如果开启了双线性过滤，就可以让结果图像显得更加平滑。效果依然盗"),n("a",S,[a("维基百科"),t(e)]),a("的图：")]),y,n("p",null,[a("这两个方法， "),_,a(" 和 "),B,a(" ，就是获取绘制的 "),R,a(" 的方法。之所以把它们归类到「效果」类方法，是因为它们主要是用于图形和文字的装饰效果的位置计算，比如"),n("a",M,[a("自定义的下划线效果"),t(e)]),a("。")]),A,n("p",null,[a("本文转自 "),n("a",F,[a("https://rengwuxian.com/ui-1-2/"),t(e)]),a("，如有侵权，请联系删除。")])])}const G=p(l,[["render",L],["__file","zidingyiView1-2-Paintxiangjie.html.vue"]]);export{G as default};
