import{_ as e,r as t,o as p,c as o,b as s,d as n,e as c,a as i}from"./app-e8f85126.js";const l={},u=i(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景：</h2><p>看SystemUI的锁屏相关代码时候发现SystemUI有一个日志打印相关的方法调用，相比于常规的<code>Log.i</code>直接可以logcat查看方式还是比较新颖。</p><p>具体日志打印代码如下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesec8dff5381d7446eb0d8d47590a0d7ad.png" alt="在这里插入图片描述"></p><p>下面就来介绍一下这个ShadeLogger到底是如何打印的。</p><h2 id="分析源码" tabindex="-1"><a class="header-anchor" href="#分析源码" aria-hidden="true">#</a> 分析源码：</h2><p>源码位置：</p><p><code>frameworks/base/packages/SystemUI/src/com/android/systemui/shade/ShadeLogger.kt</code></p><p>明显是一个kt类，这里就只拿一个logEndMotionEvent方法来进行源码分析</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">logEndMotionEvent</span><span class="token punctuation">(</span>
    msg<span class="token operator">:</span> String<span class="token punctuation">,</span>
    forceCancel<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
    expand<span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    buffer<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
        TAG<span class="token punctuation">,</span>
        LogLevel<span class="token punctuation">.</span>VERBOSE<span class="token punctuation">,</span>
        <span class="token punctuation">{</span>
            str1 <span class="token operator">=</span> msg
            bool1 <span class="token operator">=</span> forceCancel
            bool2 <span class="token operator">=</span> expand
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">str1</span></span><span class="token string">; force=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">bool1</span></span><span class="token string">; expand=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">bool2</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里看到实际是调用的buffer.log方法，也有对应TAG和LogLevel等级。</p><p>那么下面来看看这个buffer.log中的buffer哪里来的，但是因为这构造都是采用了很多注解drag2方式，所以不方便找，这里找到了一个NotificationPanelViewControllerBaseTest一个测试类有手动进行构造，这里也可以看出相关过程</p><p><code>frameworks/base/packages/SystemUI/tests/src/com/android/systemui/shade/NotificationPanelViewControllerBaseTest.java</code></p><p>具体过程如下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesdc2fcc9eb52f4d2582b907661faff28d.png" alt="在这里插入图片描述"></p><p>再看看mShadeLog构造</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesa01d2e2e49e2406ab2ef4bae98148919.png" alt="在这里插入图片描述"></p><p>再看看logcatLogBuffer方法</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images8ff6806b307e4c95ab03367aef6a0bba.png" alt="在这里插入图片描述"></p><p>这里调用到了LogBuffer类,注意这里test类给的是50，实际的Shader类给的是500</p><p>frameworks/base/packages/SystemUI/log/src/com/android/systemui/log/LogBuffer.kt</p><p>看看log方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>
    tag<span class="token operator">:</span> String<span class="token punctuation">,</span>
    level<span class="token operator">:</span> LogLevel<span class="token punctuation">,</span>
    messageInitializer<span class="token operator">:</span> MessageInitializer<span class="token punctuation">,</span>
    <span class="token keyword">noinline</span> messagePrinter<span class="token operator">:</span> MessagePrinter<span class="token punctuation">,</span>
    exception<span class="token operator">:</span> Throwable<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> message <span class="token operator">=</span> <span class="token function">obtain</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> level<span class="token punctuation">,</span> messagePrinter<span class="token punctuation">,</span> exception<span class="token punctuation">)</span>
    <span class="token function">messageInitializer</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token function">commit</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看obtain方法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Synchronized</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">obtain</span><span class="token punctuation">(</span>
        tag<span class="token operator">:</span> String<span class="token punctuation">,</span>
        level<span class="token operator">:</span> LogLevel<span class="token punctuation">,</span>
        messagePrinter<span class="token operator">:</span> MessagePrinter<span class="token punctuation">,</span>
        exception<span class="token operator">:</span> Throwable<span class="token operator">?</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token operator">:</span> LogMessage <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mutable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> FROZEN_MESSAGE
        <span class="token punctuation">}</span>
        <span class="token keyword">val</span> message <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">advance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//可以看到这里是buffer中获取，</span>
        message<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> level<span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> messagePrinter<span class="token punctuation">,</span> exception<span class="token punctuation">)</span>
        <span class="token keyword">return</span> message
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里其实只是看出来了buffer中搞出了一个message，根据传递来的tag和msg<br> 接下来重点看看commit方法</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">commit</span><span class="token punctuation">(</span>message<span class="token operator">:</span> LogMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>echoMessageQueue <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> echoMessageQueue<span class="token punctuation">.</span><span class="token function">remainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            echoMessageQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token comment">//主要就是放入队列</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> InterruptedException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// the background thread has been shut down, so just log on this one</span>
            <span class="token function">echoToDesiredEndpoints</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">echoToDesiredEndpoints</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>commit主要就是实现对message放入到echoMessageQueue，那么什么时候取这个队列呢？</p><p>这里要看最开始的init方法中有启动一个线程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">init</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>logcatEchoTracker<span class="token punctuation">.</span>logInBackgroundThread <span class="token operator">&amp;&amp;</span> echoMessageQueue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">thread</span><span class="token punctuation">(</span>start <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;LogBuffer-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">name</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> priority <span class="token operator">=</span> Thread<span class="token punctuation">.</span>NORM_PRIORITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//死循环的取出队列</span>
                    <span class="token function">echoToDesiredEndpoints</span><span class="token punctuation">(</span>echoMessageQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//调用echoToDesiredEndpoints来处理消息</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> InterruptedException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体echoToDesiredEndpoints方法如下：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code> <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">echoToDesiredEndpoints</span><span class="token punctuation">(</span>message<span class="token operator">:</span> LogMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">//获取log打印level，即其实可以通过命令来控制打印level，这里的level本质是来自settings，具体啥settings值下面操作时候会讲解</span>
        <span class="token keyword">val</span> includeInLogcat <span class="token operator">=</span>
            logcatEchoTracker<span class="token punctuation">.</span><span class="token function">isBufferLoggable</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> message<span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token operator">||</span>
                logcatEchoTracker<span class="token punctuation">.</span><span class="token function">isTagLoggable</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> message<span class="token punctuation">.</span>level<span class="token punctuation">)</span>
        <span class="token function">echo</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> toLogcat <span class="token operator">=</span> includeInLogcat<span class="token punctuation">,</span> toSystrace <span class="token operator">=</span> systrace<span class="token punctuation">)</span><span class="token comment">//有了上面level后，echo开始处理</span>
    <span class="token punctuation">}</span>
   <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">echo</span><span class="token punctuation">(</span>message<span class="token operator">:</span> LogMessage<span class="token punctuation">,</span> toLogcat<span class="token operator">:</span> Boolean<span class="token punctuation">,</span> toSystrace<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>toLogcat <span class="token operator">||</span> toSystrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> strMessage <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">messagePrinter</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>toSystrace<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">echoToSystrace</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> strMessage<span class="token punctuation">)</span><span class="token comment">//可以看这个日志还支持systrace相关</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>toLogcat<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">echoToLogcat</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> strMessage<span class="token punctuation">)</span><span class="token comment">//这里就是最普通的logcat打印出来</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token comment">//具体的echoToLogcat其实就是根据传递进来的等级进行普通log打印</span>
  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">echoToLogcat</span><span class="token punctuation">(</span>message<span class="token operator">:</span> LogMessage<span class="token punctuation">,</span> strMessage<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>level<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            LogLevel<span class="token punctuation">.</span>VERBOSE <span class="token operator">-&gt;</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> strMessage<span class="token punctuation">,</span> message<span class="token punctuation">.</span>exception<span class="token punctuation">)</span>
            LogLevel<span class="token punctuation">.</span>DEBUG <span class="token operator">-&gt;</span> Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> strMessage<span class="token punctuation">,</span> message<span class="token punctuation">.</span>exception<span class="token punctuation">)</span>
            LogLevel<span class="token punctuation">.</span>INFO <span class="token operator">-&gt;</span> Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> strMessage<span class="token punctuation">,</span> message<span class="token punctuation">.</span>exception<span class="token punctuation">)</span>
            LogLevel<span class="token punctuation">.</span>WARNING <span class="token operator">-&gt;</span> Log<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> strMessage<span class="token punctuation">,</span> message<span class="token punctuation">.</span>exception<span class="token punctuation">)</span>
            LogLevel<span class="token punctuation">.</span>ERROR <span class="token operator">-&gt;</span> Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> strMessage<span class="token punctuation">,</span> message<span class="token punctuation">.</span>exception<span class="token punctuation">)</span>
            LogLevel<span class="token punctuation">.</span>WTF <span class="token operator">-&gt;</span> Log<span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>tag<span class="token punctuation">,</span> strMessage<span class="token punctuation">,</span> message<span class="token punctuation">.</span>exception<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此LogBuffer源码也就大概分析完成，可以得出以下几个结论：</p><p>1、所有的埋点日志会保存到buffer中，这个buffer只是在内存中的一个环形buffer，有固定大小</p><p>2、buffer中的日志是可以 实现输出到logcat和systrace的功能</p><p>那么具体如何控制输出到logcat，还有如何看buffer中的日志呢？接下来看看使用方法</p><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式" aria-hidden="true">#</a> 使用方式：</h2><p>在类的最开始部分有如下的使用注释：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * A simple ring buffer of recyclable log messages
 *
 * The goal of this class is to enable logging that is both extremely chatty and extremely
 * lightweight. If done properly, logging a message will not result in any heap allocations or
 * string generation. Messages are only converted to strings if the log is actually dumped (usually
 * as the result of taking a bug report).
 *
 * You can dump the entire buffer at any time by running:
 * \`\`\`
 * $ adb shell dumpsys activity service com.android.systemui/.SystemUIService <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bufferName</span><span class="token punctuation">&gt;</span></span>
 * \`\`\`
 *
 * ...where \`bufferName\` is the (case-sensitive) [name] passed to the constructor.
 *
 * By default, only messages of WARN level or higher are echoed to logcat, but this can be adjusted
 * locally (usually for debugging purposes).
 *
 * To enable logcat echoing for an entire buffer:
 * \`\`\`
 * $ adb shell settings put global systemui/buffer/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bufferName</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>
 * \`\`\`
 *
 * To enable logcat echoing for a specific tag:
 * \`\`\`
 * $ adb shell settings put global systemui/tag/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tag</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">&gt;</span></span>
 * \`\`\`
 *
 * In either case, \`level\` can be any of \`verbose\`, \`debug\`, \`info\`, \`warn\`, \`error\`, \`assert\`, or
 * the first letter of any of the previous.
 *
 * In SystemUI, buffers are provided by LogModule. Instances should be created using a SysUI
 * LogBufferFactory.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">name</span> The name of this buffer, printed when the buffer is dumped and in some other
 *   situations.
 * <span class="token keyword">@param</span> <span class="token parameter">maxSize</span> The maximum number of messages to keep in memory at any one time. Buffers start
 *   out empty and grow up to [maxSize] as new messages are logged. Once the buffer&#39;s size reaches
 *   the maximum, it behaves like a ring buffer.
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实上面已经写的很详细了，主要就是2个核心点，一个可以通过dumpsys看所有日志，一个是可以控制logcat输出</p><p>控制dumpsys查看方法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ adb shell dumpsys activity <span class="token function">service</span> com.android.systemui/.SystemUIService <span class="token operator">&lt;</span>bufferName<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如这里的对ShadeLog</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ adb shell dumpsys activity <span class="token function">service</span> com.android.systemui/.SystemUIService ShadeLog
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>dumpsys后可以查看到相关的Log：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesfdb02083afd141ec8ef30861bcaf6b41.png" alt="在这里插入图片描述"><br> 看到这个dump日志就感觉非常详细的记录了Shade锁屏相关的操作，相关的tag等也是在ShadeLogger.kt定义的</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesffe01336befa4c08a5633bfcc1b528ae.png" alt="在这里插入图片描述"></p><p>如果想要普通logcat输出呢？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ adb shell settings put global systemui/tag/ShadeLog <span class="token function">v</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里其实就是配置一个settings，然后上面的提到的echoToDesiredEndpoints的 logcatEchoTracker.isBufferLoggable就会去查询这个settings值。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images66b52f250a454a39b5745f8385355cd3.png" alt="在这里插入图片描述"></p><h2 id="总结图" tabindex="-1"><a class="header-anchor" href="#总结图" aria-hidden="true">#</a> 总结图</h2><p><img src="https://raw.githubusercontent.com/shug666/image/main/images3bb7b3e522d842b6a920a4e5cd111bd7.png" alt="在这里插入图片描述"></p>`,53),r={href:"https://blog.csdn.net/liaosongmao1/article/details/143355879",target:"_blank",rel:"noopener noreferrer"};function d(k,m){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("本文转自 "),s("a",r,[n("https://blog.csdn.net/liaosongmao1/article/details/143355879"),c(a)]),n("，如有侵权，请联系删除。")])])}const g=e(l,[["render",d],["__file","SystemUIdeShadeLogger_LogBufferrizhidongtaikongzhishu.html.vue"]]);export{g as default};
