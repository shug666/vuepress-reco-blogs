import{_ as t,r as i,o,c as p,b as n,d as s,e,a as c}from"./app-ee4ba21e.js";const r={},l=c(`<h2 id="_1、前言" tabindex="-1"><a class="header-anchor" href="#_1、前言" aria-hidden="true">#</a> 1、前言</h2><blockquote><p>内核是很庞大的，其中的打印信息也很多，太多的打印信息会拖慢内核的启动速度，也不利于我们查找有用的打印信息。于是内核有了打印优先级的机制，在用printk()打印信息时需要设置优先级，如果不设置优先级也会有一个默认的优先级。只有打印优先级高于控制台输出的优先级时打印信息才会被打印出来，于是我们可以通过修改控制台输出的优先级来控制打印信息的多少，根据想要查看的打印信息的优先级来修改控制台输出的优先级，这样可以确保能打印出我们想要的打印信息，又尽可能少的打印不需要的信息。</p></blockquote><h2 id="_2、console-printk数组" tabindex="-1"><a class="header-anchor" href="#_2、console-printk数组" aria-hidden="true">#</a> 2、console_printk数组</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//内核打印等级</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">KERN_EMERG</span>		<span class="token string">&quot;&lt;0&gt;&quot;</span>	<span class="token comment">/* system is unusable	最高级别，一般只用来打印崩溃信息*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">KERN_ALERT</span>		<span class="token string">&quot;&lt;1&gt;&quot;</span>	<span class="token comment">/* action must be taken immediately	 需要立即处理的信息*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">KERN_CRIT</span>		<span class="token string">&quot;&lt;2&gt;&quot;</span>	<span class="token comment">/* critical conditions	关键信息：严重的硬件和软件错误	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">KERN_ERR</span>		<span class="token string">&quot;&lt;3&gt;&quot;</span>	<span class="token comment">/* error conditions		 用来显示硬件错误	*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">KERN_WARNING</span>	<span class="token string">&quot;&lt;4&gt;&quot;</span>	<span class="token comment">/* warning conditions	显示不会造成严重错误的警告信息		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">KERN_NOTICE</span>		<span class="token string">&quot;&lt;5&gt;&quot;</span>	<span class="token comment">/* normal but significant condition	 显示需要引起注意的信息*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">KERN_INFO</span>		<span class="token string">&quot;&lt;6&gt;&quot;</span>	<span class="token comment">/* informational	　显示一般信息，例如驱动所发现的硬件列表		*/</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token macro-name">KERN_DEBUG</span>		<span class="token string">&quot;&lt;7&gt;&quot;</span>	<span class="token comment">/* debug-level messages		用来显示调试信息	*/</span></span>

<span class="token comment">/* printk&#39;s without a loglevel use this.. */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_MESSAGE_LOGLEVEL</span> <span class="token expression"><span class="token number">4</span> </span><span class="token comment">/* KERN_WARNING */</span></span>

<span class="token comment">/* We show everything that is MORE important than this.. */</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MINIMUM_CONSOLE_LOGLEVEL</span> <span class="token expression"><span class="token number">1</span> </span><span class="token comment">/* Minimum loglevel we let people use */</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_CONSOLE_LOGLEVEL</span> <span class="token expression"><span class="token number">7</span> </span><span class="token comment">/* anything MORE serious than KERN_DEBUG */</span></span>

<span class="token keyword">int</span> console_printk<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
	DEFAULT_CONSOLE_LOGLEVEL<span class="token punctuation">,</span>	<span class="token comment">/* console_loglevel */</span>
	DEFAULT_MESSAGE_LOGLEVEL<span class="token punctuation">,</span>	<span class="token comment">/* default_message_loglevel */</span>
	MINIMUM_CONSOLE_LOGLEVEL<span class="token punctuation">,</span>	<span class="token comment">/* minimum_console_loglevel */</span>
	DEFAULT_CONSOLE_LOGLEVEL<span class="token punctuation">,</span>	<span class="token comment">/* default_console_loglevel */</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>console_printk数组在kernel/printk.c里定义，其中4个元素是默认的优先级。</p><p>(1)<strong>DEFAULT_CONSOLE_LOGLEVEL</strong>:控制台日志级别，优先级高于该值的消息将被打印至控制台;</p><p>(2)<strong>DEFAULT_MESSAGE_LOGLEVEL</strong>:默认的消息日志级别，将用该优先级来打印没有指定优先级的消息。</p><p>(3)<strong>MINIMUM_CONSOLE_LOGLEVEL</strong>:控制台日志级别可被设置的最小值(最高优先级)。</p><p>(4)<strong>DEFAULT_CONSOLE_LOGLEVEL</strong>:默认的控制台日志级别，控制台日志级别的缺省值。</p></blockquote><h2 id="_3、源代码修改控制台输出级别" tabindex="-1"><a class="header-anchor" href="#_3、源代码修改控制台输出级别" aria-hidden="true">#</a> 3、源代码修改控制台输出级别</h2><blockquote><p>将DEFAULT_CONSOLE_LOGLEVEL修改为你想要的等级，一般设置成你想要打印出的消息的等级，这样可以确保打印出你需要的信息，又尽可能少的打印无用信息。</p></blockquote><h2 id="_4、动态修改控制台输出等级" tabindex="-1"><a class="header-anchor" href="#_4、动态修改控制台输出等级" aria-hidden="true">#</a> 4、动态修改控制台输出等级</h2><h3 id="_4-1、查看当前的控制台输出等级" tabindex="-1"><a class="header-anchor" href="#_4-1、查看当前的控制台输出等级" aria-hidden="true">#</a> 4.1、查看当前的控制台输出等级</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /proc/sys/kernel/printk 
<span class="token number">7</span>                            <span class="token number">4</span>                    <span class="token number">1</span>                  <span class="token number">7</span>
当前的日志级别	未明确指定日志级别的默认消息级别	最小允许的日志级别	引导时的默认日志级别
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2、修改当前的输出等级" tabindex="-1"><a class="header-anchor" href="#_4-2、修改当前的输出等级" aria-hidden="true">#</a> 4.2、修改当前的输出等级</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token number">4</span> <span class="token operator">&gt;</span> proc/sys/kernel/printk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>上面就是通过echo命令往printk文件写数据，将当前的日志级别改为4；</p></blockquote><h2 id="_5、频繁打印带来的问题" tabindex="-1"><a class="header-anchor" href="#_5、频繁打印带来的问题" aria-hidden="true">#</a> 5、频繁打印带来的问题</h2><blockquote><p>(1)慢速控制台设备输出过多的消息导致系统变慢，因为控制台会频繁的占用CPU；</p><p>(2)当程序出错后会不停的打印出错信息。虽然我们设置的输出等级，但是一般都会运行printk输出出错打印，程序正常运行时不会有打印，但是当程序出错后，程序有可能会不停的打印出错信息，这样也会造成输出巨量消息；</p></blockquote><h2 id="_6、限制频繁打印信息的措施" tabindex="-1"><a class="header-anchor" href="#_6、限制频繁打印信息的措施" aria-hidden="true">#</a> 6、限制频繁打印信息的措施</h2><h3 id="_6-1、printk-ratelimit-函数" tabindex="-1"><a class="header-anchor" href="#_6-1、printk-ratelimit-函数" aria-hidden="true">#</a> 6.1、printk_ratelimit()函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">printk_ratelimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>	
<span class="token function">printk</span><span class="token punctuation">(</span>KERN_NOTICE <span class="token string">&quot;The printer is still on fire\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>printk_ratelimit()通过跟踪发送到控制台的消息数量，如果输出的速度超过一个阈值则返回零，从而避免发送重复消息；</p></blockquote><h3 id="_6-2、printk-ratelimit和printk-ratelimit-burst" tabindex="-1"><a class="header-anchor" href="#_6-2、printk-ratelimit和printk-ratelimit-burst" aria-hidden="true">#</a> 6.2、printk_ratelimit和printk_ratelimit_burst</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>~ <span class="token comment"># cat /proc/sys/kernel/printk_ratelimit</span>
<span class="token number">5</span>
~ <span class="token comment"># </span>
~ <span class="token comment"># </span>
~ <span class="token comment"># cat /proc/sys/kernel/printk_ratelimit_burst </span>
<span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>(1)printk_ratelimit文件：在重新打开消息之前应该等待的秒数；<br> (2)printk_ratelimit_burst文件：在进行速度限制之前可以接受的消息数；</p></blockquote>`,22),d={id:"printk-和printf-的比较",tabindex:"-1"},u=n("a",{class:"header-anchor",href:"#printk-和printf-的比较","aria-hidden":"true"},"#",-1),k={href:"https://blog.csdn.net/weixin_42031299/article/details/121448380",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"但是在Android中，直接使用printf是无法将信息输出到串口中显示的（除非直接通过串口运行可执行程序）。为了继续使用printf，可以使用重定向的方式，将printf的输出从STDOUT转到文件中，同时方便串口输入命令调试，也不影响日志的记录。",-1),h=n("p",null,'freopen("/data/flash/stdout.txt","w",stdout);',-1),v=n("p",null,"仅需在使用printf前调用上面的函数即可，同时在使用printf后为了保证输出及时写入文件，需要使用fflush函数。当然，也有说可以调用 setvbuf(stdout,NULL,_IONBF,0)来完成缓冲区的设置，但是不一定有效。",-1),_={href:"https://blog.csdn.net/weixin_42031299/article/details/121734876",target:"_blank",rel:"noopener noreferrer"};function b(E,g){const a=i("ExternalLinkIcon");return o(),p("div",null,[l,n("h2",d,[u,s(),n("a",k,[s("printk()和printf()的比较"),e(a)])]),m,h,v,n("p",null,[s("本文转自 "),n("a",_,[s("https://blog.csdn.net/weixin_42031299/article/details/121734876"),e(a)]),s("，如有侵权，请联系删除。")])])}const f=t(r,[["render",b],["__file","xiugainaheprintkhanshudayindengji.html.vue"]]);export{f as default};
