import{_ as t,r as e,o as p,c as o,b as s,d as n,e as c,a as i}from"./app-e8f85126.js";const l={},u=i(`<h1 id="sharedpreferences异常断电数据丢失的问题" tabindex="-1"><a class="header-anchor" href="#sharedpreferences异常断电数据丢失的问题" aria-hidden="true">#</a> SharedPreferences异常断电数据丢失的问题</h1><p><strong>现象：</strong></p><p>连续几次将数据写入SharedPreferences保存后断电。断电前可以看到<code>/data/data/package\\_name/shared\\_prefs/\\*.xml</code> 文件内容已修改为最后一次写入数据。上电后在执行读取数据操作前，<code>/data/data/package\\_name/shared\\_prefs/\\*.xml</code>的内容始终为最后一次写入内容，但执行读取操作时，xml中内容改变，变为最后一次写入之前的数据</p><p><strong>原因：</strong></p><p>使用sharedpreference保存文件后掉电会出现异常，是由于sharedpreference在保存记录的时候会生成一个bak文件，当保存完成后会删除这个文件，但是删除的时机不确定，这个时候掉电会导致文件没有删除，再次开机后使用sharedpreference时会将源文件删除，将bak文件替换成源文件，就会出现文件没有保存上的情况。</p><p>**对策：**在数据提交后，执行shelll命令sync会立刻更新，bak文件将会被删除</p><div class="language-JAVA line-numbers-mode" data-ext="JAVA"><pre class="language-JAVA"><code>SharedPreferences.Editor editor = sharedPreferences.edit();
editor.putString(KeyName, floatArrayToStr(array));
editor.apply();

try {
    /* 對應斷電數據保存丟失問題 */
    Runtime.getRuntime().exec(&quot;sync&quot;);
}
catch (IOException e)
{
    e.printStackTrace();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**拓展：**关于SharedPreferences的更多详细内容学习</p><p>原文链接：https://blog.csdn.net/fanxudonggreat/article/details/80877469</p><h1 id="settings异常断电数据丢失的问题" tabindex="-1"><a class="header-anchor" href="#settings异常断电数据丢失的问题" aria-hidden="true">#</a> Settings异常断电数据丢失的问题</h1><p>在应用开发过程中，经常会做持久化保存，持久化一般分为SharedPreferences和Settings。但是遇到大屏等产品异常断电时，往往存储的数据会丢失甚至损坏。手机或平板没有这个问题是因为该类产品一般都有电池，不会出现异常断电的情况。</p><blockquote><p>修改在最下面，主要修改底层文件系统。</p></blockquote><p>对于SharedPreferences而言，只需要执行sync()操作就能强制把内容写到真是的屋里内存。但是Settings这种方式就不行，往往需要修改驱动才能解决。</p><p>在Android12中，Settings写操作在以下路径下，它是采用了AtomicFile的方式，这种方式可以避免断电文件损坏，但是避免不了刚写入的数据丢失。</p><blockquote><p>路径：<code>frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsState.java</code></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doWriteState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">boolean</span> wroteState <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> version<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Setting</span><span class="token punctuation">&gt;</span></span> settings<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> namespaceBannedHashes<span class="token punctuation">;</span>

        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            version <span class="token operator">=</span> mVersion<span class="token punctuation">;</span>
            settings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>mSettings<span class="token punctuation">)</span><span class="token punctuation">;</span>
            namespaceBannedHashes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>mNamespaceBannedHashes<span class="token punctuation">)</span><span class="token punctuation">;</span>
            mDirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            mWriteScheduled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mWriteLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG_PERSISTENCE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">LOG_TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;[PERSIST START]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//此处使用的是AtomicFile </span>
            <span class="token class-name">AtomicFile</span> destination <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicFile</span><span class="token punctuation">(</span>mStatePersistFile<span class="token punctuation">,</span> mStatePersistTag<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FileOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                out <span class="token operator">=</span> destination<span class="token punctuation">.</span><span class="token function">startWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">TypedXmlSerializer</span> serializer <span class="token operator">=</span> <span class="token class-name">Xml</span><span class="token punctuation">.</span><span class="token function">resolveSerializer</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
                serializer<span class="token punctuation">.</span><span class="token function">startDocument</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                serializer<span class="token punctuation">.</span><span class="token function">startTag</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">TAG_SETTINGS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                serializer<span class="token punctuation">.</span><span class="token function">attributeInt</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">ATTR_VERSION</span><span class="token punctuation">,</span> version<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">final</span> <span class="token keyword">int</span> settingCount <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> settingCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Setting</span> setting <span class="token operator">=</span> settings<span class="token punctuation">.</span><span class="token function">valueAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writeSingleSetting</span><span class="token punctuation">(</span>mVersion<span class="token punctuation">,</span> serializer<span class="token punctuation">,</span> setting<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setting<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            setting<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setting<span class="token punctuation">.</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setting<span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            setting<span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setting<span class="token punctuation">.</span><span class="token function">isDefaultFromSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            setting<span class="token punctuation">.</span><span class="token function">isValuePreservedInRestore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG_PERSISTENCE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">LOG_TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;[PERSISTED]&quot;</span> <span class="token operator">+</span> setting<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;=&quot;</span>
                                    <span class="token operator">+</span> setting<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                serializer<span class="token punctuation">.</span><span class="token function">endTag</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">TAG_SETTINGS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                serializer<span class="token punctuation">.</span><span class="token function">startTag</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">TAG_NAMESPACE_HASHES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> namespaceBannedHashes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> namespace <span class="token operator">=</span> namespaceBannedHashes<span class="token punctuation">.</span><span class="token function">keyAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">String</span> bannedHash <span class="token operator">=</span> namespaceBannedHashes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">writeSingleNamespaceHash</span><span class="token punctuation">(</span>serializer<span class="token punctuation">,</span> namespace<span class="token punctuation">,</span> bannedHash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG_PERSISTENCE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">LOG_TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;[PERSISTED] namespace=&quot;</span> <span class="token operator">+</span> namespace
                                    <span class="token operator">+</span> <span class="token string">&quot;, bannedHash=&quot;</span> <span class="token operator">+</span> bannedHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                serializer<span class="token punctuation">.</span><span class="token function">endTag</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">TAG_NAMESPACE_HASHES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                serializer<span class="token punctuation">.</span><span class="token function">endDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                destination<span class="token punctuation">.</span><span class="token function">finishWrite</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>

                wroteState <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG_PERSISTENCE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">LOG_TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;[PERSIST END]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">wtf</span><span class="token punctuation">(</span><span class="token constant">LOG_TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Failed to write settings, restoring backup&quot;</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">IOException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// we failed to create a directory, so log the permissions and existence</span>
                    <span class="token comment">// state for the settings file and directory</span>
                    <span class="token function">logSettingsDirectoryInformation</span><span class="token punctuation">(</span>destination<span class="token punctuation">.</span><span class="token function">getBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;Couldn&#39;t create directory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// attempt to create the directory with Files.createDirectories, which</span>
                        <span class="token comment">// throws more informative errors than File.mkdirs.</span>
                        <span class="token class-name">Path</span> parentPath <span class="token operator">=</span> destination<span class="token punctuation">.</span><span class="token function">getBaseFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">try</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>parentPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token constant">LOG_TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Successfully created &quot;</span> <span class="token operator">+</span> parentPath<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">Slog</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">LOG_TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Failed to write &quot;</span> <span class="token operator">+</span> parentPath
                                    <span class="token operator">+</span> <span class="token string">&quot; with Files.writeDirectories&quot;</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                destination<span class="token punctuation">.</span><span class="token function">failWrite</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token class-name">IoUtils</span><span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>wroteState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">addHistoricalOperationLocked</span><span class="token punctuation">(</span><span class="token constant">HISTORICAL_OPERATION_PERSIST</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因如下：</p><blockquote><p>​ android的这个AtomicFile不能保证finishWrite操作完成后掉电，再开机数据一定是全部写完后的，以上面的例子来讲：在假设掉电 位置掉电，则开机后这个文件的 stats 还是可能完全没写入。原因是 finishWrite 中的删除备份文件操作 并不能保证写回磁盘，导致重新开机后进 openRead 操作会发现备份文件还在，就会把实际已经写好的 新文件删掉，重新用备份文件来覆盖。所以说，android 的 AtomicFile 只保证这个文件 startWrite 和 finishWrite 之间的写数据原子性，即要么全部完成，要么全部失败。</p><p>​ 对于 android 来说，AtomicFile 符合它的设计目标，但是如果有时候你确实想要在 finishWrite 完成后 掉电能看到新数据，其实也是有办法的，目前主要有两种方式：在文件系统挂载的时候加上 MS_DIRSYNC 参数，通过 ioctl 命令配置文件的父目录位 DIRSYNC 模式。前者更方便，缺点是这个挂 载点下的所有目录都会进 DIRSYNC 模式，在文件创建和删除非常频繁的情况下，会有明显的性能损 失；后者通过精确控制需要保护的目录来减少性能损失，但是缺点是要非常清楚哪些目录需要保护，并 且不同文件系统的命令和标志都不一样，需要把你可能用到的所有文件系统的 ioctl 都写一遍，并且有 些文件系统可能不支持这种方式(f2fs 和 ext4 都是两种方式都支持，而 fat 则不支持 ioctl 方式)。 -rk文档介绍</p></blockquote><p>具体修改如下：</p><div class="language-diff line-numbers-mode" data-ext="diff"><pre class="language-diff"><code>//路径：system/core/fs_mgr/fs_mgr_fstab.cpp
diff --git a/fs_mgr/fs_mgr_fstab.cpp b/fs_mgr/fs_mgr_fstab.cpp
index f5ab5571f..5a0f49c1d 100644
<span class="token coord">--- a/fs_mgr/fs_mgr_fstab.cpp</span>
<span class="token coord">+++ b/fs_mgr/fs_mgr_fstab.cpp</span>
@@ -74,6 +74,7 @@ FlagList kMountFlagsList[] = {
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">        {&quot;slave&quot;, MS_SLAVE},
</span><span class="token prefix unchanged"> </span><span class="token line">        {&quot;shared&quot;, MS_SHARED},
</span><span class="token prefix unchanged"> </span><span class="token line">        {&quot;defaults&quot;, 0},
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">        { &quot;dirsync&quot;, MS_DIRSYNC},
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">};
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">off64_t CalculateZramSize(int percentage) {
</span></span>
//路径：device/rockchip/common/scripts/fstab_tools/fstab.in
//注意：可以参考这个来添加flag，可能不一定是这个文件，需要根据你的产品device来确定
diff --git a/scripts/fstab_tools/fstab.in b/scripts/fstab_tools/fstab.in
index 2ec6c26..325da43 100755
<span class="token coord">--- a/scripts/fstab_tools/fstab.in</span>
<span class="token coord">+++ b/scripts/fstab_tools/fstab.in</span>
@@ -23,6 +23,6 @@ \${_block_prefix}odm     /odm      ext4 ro,barrier=1 \${_flags},first_stage_mount
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"># For sdmmc
</span><span class="token prefix unchanged"> </span><span class="token line">/devices/platform/\${_sdmmc_device}/mmc_host*        auto  auto    defaults        voldmanaged=sdcard1:auto
</span><span class="token prefix unchanged"> </span><span class="token line">#  Full disk encryption has less effect on rk3326, so default to enable this.
</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">/dev/block/by-name/userdata /data f2fs noatime,nosuid,nodev,discard,reserve_root=32768,resgid=1065 latemount,wait,check,fileencryption=aes-256-xts:aes-256-cts:v2+inlinecrypt_optimized,keydirectory=/metadata/vold/metadata_encryption,quota,formattable,reservedsize=128M,checkpoint=fs
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">/dev/block/by-name/userdata /data f2fs noatime,nosuid,nodev,discard,reserve_root=32768,resgid=1065,dirsync latemount,wait,check,fileencryption=aes-256-xts:aes-256-cts:v2+inlinecrypt_optimized,keydirectory=/metadata/vold/metadata_encryption,quota,formattable,reservedsize=128M,checkpoint=fs
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"># for ext4
</span><span class="token prefix unchanged"> </span><span class="token line">#/dev/block/by-name/userdata    /data      ext4    discard,noatime,nosuid,nodev,noauto_da_alloc,data=ordered,user_xattr,barrier=1    latemount,wait,formattable,check,fileencryption=software,quota,reservedsize=128M,checkpoint=block
</span></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),r={href:"https://blog.csdn.net/qq_36476119/article/details/105832937",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("本文转自 "),s("a",r,[n("https://blog.csdn.net/qq_36476119/article/details/105832937"),c(a)]),n("，如有侵权，请联系删除。")])])}const b=t(l,[["render",k],["__file","SharedPreferencesheSettingsyichangduandianshujudingshidewenti.html.vue"]]);export{b as default};
