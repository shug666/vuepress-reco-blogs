import{_ as e,r as i,o as t,c as l,b as a,d as n,e as o,a as p}from"./app-e8f85126.js";const r={},d=p(`<h2 id="_1-构建编译环境" tabindex="-1"><a class="header-anchor" href="#_1-构建编译环境" aria-hidden="true">#</a> <strong>1.构建编译环境</strong></h2><h3 id="_1-1-执行envsetup-sh" tabindex="-1"><a class="header-anchor" href="#_1-1-执行envsetup-sh" aria-hidden="true">#</a> 1.1.执行envsetup.sh</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token builtin class-name">source</span> build/envsetup.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用source来执行envsetup.sh，使这个脚本中的定义变量和函数在这个文件执行完后一直在当前的shell环境中都是有效的。envsetup.sh是用来加载函数和变量的，有很多变量定义是放在函数里面，所以还没有生效。</p><p>envsetup.sh中主要定义了以下环境变量：</p><p><strong>表1：环境变量</strong></p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>ANDROID_JAVA_TOOLCHAIN</td><td>JAVA的安装目录</td></tr><tr><td>ANDROID_BUILD_PATHS</td><td>Android的build目录</td></tr><tr><td>ANDROID_PRE_BUILD_PATHS</td><td>Prebuilt目录</td></tr><tr><td>ANDROID_TOOLCHAIN</td><td>Android的编译工具目录</td></tr><tr><td>ANDROID_PRODUCT_OUT</td><td>编译的产品目录</td></tr><tr><td>ANDROID_HOST_OUT</td><td>编译出来的运行的本机的文件目录</td></tr></tbody></table><p><strong>表2：envsetup.sh中定义的函数</strong></p><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>lunch</td><td>选择编译板型</td></tr><tr><td>croot</td><td>切换到源码树的根目录</td></tr><tr><td>godir</td><td>转到包含某个文件的目录路径</td></tr><tr><td>m</td><td>在源码树的根目录执行 make</td></tr><tr><td>mm</td><td>build 当前目录下的模块</td></tr><tr><td>mmm</td><td>build 指定目录下的模块</td></tr><tr><td>mma</td><td>编译当前目录和它的依赖模块</td></tr><tr><td>mmma</td><td>编译指定目录和它的依赖模块</td></tr><tr><td>cgrep</td><td>在所有 C/C++ 文件上执行 grep</td></tr><tr><td>ggrep</td><td>在所有 gradle 文件上执行 grep</td></tr><tr><td>jgrep</td><td>在所有 java文件上执行 grep</td></tr><tr><td>resgrep</td><td>在所有 res/*.xml 文件上执行 grep</td></tr><tr><td>mgrep</td><td>在所有 makefile 文件上执行 grep</td></tr><tr><td>sepgrep</td><td>在所有 sepolicy文件上执行 grep</td></tr><tr><td>sgrep</td><td>在所有 源码文件上执行 grep</td></tr><tr><td>printconfig</td><td>显示当前 Build 的配置信息</td></tr><tr><td>add_lunch_combo</td><td>在 lunch 函数的菜单中添加一个条目</td></tr></tbody></table><p><strong>增加产品配置</strong></p><p>envsetup.sh里加了一些产品配置。其它的大部分是在device目录下通过vendorsetup.sh来加的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Execute the contents of any vendorsetup.sh files we can find.</span>
<span class="token keyword">for</span> <span class="token for-or-select variable">f</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">test</span> <span class="token parameter variable">-d</span> device <span class="token operator">&amp;&amp;</span> <span class="token function">find</span> <span class="token parameter variable">-L</span> device <span class="token parameter variable">-maxdepth</span> <span class="token number">4</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;vendorsetup.sh&#39;</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /dev/null <span class="token operator">|</span> <span class="token function">sort</span><span class="token variable">\`</span></span> <span class="token punctuation">\\</span>
         <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">test</span> <span class="token parameter variable">-d</span> vendor <span class="token operator">&amp;&amp;</span> <span class="token function">find</span> <span class="token parameter variable">-L</span> vendor <span class="token parameter variable">-maxdepth</span> <span class="token number">4</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;vendorsetup.sh&#39;</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /dev/null <span class="token operator">|</span> <span class="token function">sort</span><span class="token variable">\`</span></span> <span class="token punctuation">\\</span>
         <span class="token variable"><span class="token variable">\`</span><span class="token builtin class-name">test</span> <span class="token parameter variable">-d</span> product <span class="token operator">&amp;&amp;</span> <span class="token function">find</span> <span class="token parameter variable">-L</span> product <span class="token parameter variable">-maxdepth</span> <span class="token number">4</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;vendorsetup.sh&#39;</span> <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> /dev/null <span class="token operator">|</span> <span class="token function">sort</span><span class="token variable">\`</span></span>
<span class="token keyword">do</span>
    <span class="token builtin class-name">echo</span> <span class="token string">&quot;including <span class="token variable">$f</span>&quot;</span>
    <span class="token builtin class-name">.</span> <span class="token variable">$f</span>
<span class="token keyword">done</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码会搜索所有位于：device，vendor，product目录下的vendorsetup.sh文件并执行.</p><p>这段代码会搜索所有位于：device，vendor，product目录下的vendorsetup.sh文件并执行.</p><h3 id="_1-2-通常来说这个文件位于具体的项目配置目录下" tabindex="-1"><a class="header-anchor" href="#_1-2-通常来说这个文件位于具体的项目配置目录下" aria-hidden="true">#</a> 1.2.通常来说这个文件位于具体的项目配置目录下，</h3><p><strong>例如：device/google/dragon lunch</strong></p><p>lunch是执行envsetup.sh里的lunch函数。</p><p>执行lunch命令会列出项目中配置好的编译菜单。</p><p>通过执行add_lunch_combo函数来增加产品配置菜单</p><p>lunch最后会调用三个函数：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>set_stuff_for_environment printconfig  destroy_build_var_cache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>函数set_stuff_for_environment主要就是设置PROMPT_COMMAND，ANDROID_BUILD_PATHS，JAVA_HOME和BUILD_ENV_SEQUENCE_NUMBER等等环境变量；</p><p>函数printconfig用来打印最终准备好的环境变量，通常如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">PLATFORM_VERSION_CODENAME</span><span class="token operator">=</span>REL  
<span class="token assign-left variable">PLATFORM_VERSION</span><span class="token operator">=</span><span class="token number">7.0</span>  
<span class="token assign-left variable">TARGET_PRODUCT</span><span class="token operator">=</span>s900_RY_VR  
<span class="token assign-left variable">TARGET_BUILD_VARIANT</span><span class="token operator">=</span>userdebug  
<span class="token assign-left variable">TARGET_BUILD_TYPE</span><span class="token operator">=</span>release  
<span class="token assign-left variable">TARGET_BUILD_APPS</span><span class="token operator">=</span>  
<span class="token assign-left variable">TARGET_ARCH</span><span class="token operator">=</span>arm  
<span class="token assign-left variable">TARGET_ARCH_VARIANT</span><span class="token operator">=</span>armv7-a-neon  
<span class="token assign-left variable">TARGET_CPU_VARIANT</span><span class="token operator">=</span>cortex-a53  
<span class="token assign-left variable">TARGET_2ND_ARCH</span><span class="token operator">=</span>  
<span class="token assign-left variable">TARGET_2ND_ARCH_VARIANT</span><span class="token operator">=</span>  
<span class="token assign-left variable">TARGET_2ND_CPU_VARIANT</span><span class="token operator">=</span>  
<span class="token assign-left variable">HOST_ARCH</span><span class="token operator">=</span>x86_64  
<span class="token assign-left variable">HOST_2ND_ARCH</span><span class="token operator">=</span>x86  
<span class="token assign-left variable">HOST_OS</span><span class="token operator">=</span>linux  
<span class="token assign-left variable">HOST_OS_EXTRA</span><span class="token operator">=</span>Linux-3.2.0-29-generic-x86_64-with-Ubuntu-12.04-precise  
<span class="token assign-left variable">HOST_CROSS_OS</span><span class="token operator">=</span>windows  
<span class="token assign-left variable">HOST_CROSS_ARCH</span><span class="token operator">=</span>x86  
<span class="token assign-left variable">HOST_CROSS_2ND_ARCH</span><span class="token operator">=</span>x86_64  
<span class="token assign-left variable">HOST_BUILD_TYPE</span><span class="token operator">=</span>release  
<span class="token assign-left variable">BUILD_ID</span><span class="token operator">=</span>NRD90M  
<span class="token assign-left variable">OUT_DIR</span><span class="token operator">=</span>out
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数destroy_build_var_cache用来清除不再需要的中间环节产生的变量的值。</p><h2 id="_2-make流程分析" tabindex="-1"><a class="header-anchor" href="#_2-make流程分析" aria-hidden="true">#</a> <strong>2.make流程分析</strong></h2><h3 id="_2-1-编译入口" tabindex="-1"><a class="header-anchor" href="#_2-1-编译入口" aria-hidden="true">#</a> <strong>2.1. 编译入口</strong></h3><p>当我们在Android源码根目录下执行make的时候，会查找当前目录下的Makefile文件或者makefile文件并且执行，在android/Makefile文件中，它只有一行有用的内容：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment">### DO NOT EDIT THIS FILE ### </span>
<span class="token keyword">include</span> build/core/main.mk 

<span class="token comment">### DO NOT EDIT THIS FILE ###</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，执行make时真正的入口是android/build/core/main.mk文件。</p><h3 id="_2-2-soong-build系统" tabindex="-1"><a class="header-anchor" href="#_2-2-soong-build系统" aria-hidden="true">#</a> <strong>2.2. soong build系统</strong></h3><h4 id="_2-2-1-编译系统变化" tabindex="-1"><a class="header-anchor" href="#_2-2-1-编译系统变化" aria-hidden="true">#</a> <strong>2.2.1.编译系统变化</strong></h4><p>随着android工程越来越大，包含的module越来越多，以makefile组织的项目编译花费的时间越来越多。谷歌在7.0开始引入了ninja进行编译系统的组织。相对于make来说ninja在大的项目管理中速度和并行方面有突出的优势，因此谷歌采用了ninja来取代之前使用的make。但是现有的android项目还是由makefile组织，因此谷歌引入了kati将makefile翻译成ninja文件。</p><p>从Android 7.0开始，android的编译系统发生了变化，之前依赖Makefile组织编译系统，从7.0开始逐步引入了kati soong(optional未正式使用，需要USE_SOONG=true开启)，将Android.mk文件转化成ninja文件，使用ninja文件对编译系统进行管理。</p><p>从8.0开始，android 引入了Android.bp文件来替代之前的Android.mk文件，不同于Android.mk，Android.bp只是纯粹的配置文件，不包括分支、循环等流程控制。在android项目上如何进行选择编译、解析配置、转换成ninja等，Soong就被创造出来，将Android.bp转换为ninja文件进行管理。</p><p>同时，Soong还会编译长生一个androidmk命令可以手动将Android.mk转换成Android.bp文件。</p><p>现在的代码里，Android.bp和Android.mk是共存的，不过Android.mk会被转换成ninja文件去编译。</p><h4 id="_2-2-2-ninja-kati-blueprint-soong" tabindex="-1"><a class="header-anchor" href="#_2-2-2-ninja-kati-blueprint-soong" aria-hidden="true">#</a> <strong>2.2.2. Ninja，Kati，Blueprint，Soong</strong></h4><p>Ninja是一个致力于速度的小型编译系统（类似于Make）；</p><p>如果把其他编译系统比做高级语言的话，Ninja就是汇编语言。ninja核心是由C/C++编写的，同时有一部分辅助功能由python和shell实现。</p><p><strong>主要有两个特点：</strong></p><p>1、可以通过其他高级的编译系统生成其输入文件；</p><p>2、它的设计就是为了更快的编译；</p><p>Kati的位置是在build/kati/中，平台也自带编译好的ckati。Kati用来将makefile转换成ninja文件。</p><p>Blueprint是生成、解析Android.bp的工具，是Soong的一部分。Soong则是专为Android编译而设计的工具，Blueprint只是解析文件的形式，而Soong则解释内容的含义。</p><p>Soong的位置在build/soong,它和build/blueprint同时期作用，他们之间的系统关系如下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images640" alt=""></p><p>Blueprint更像是一个库，专门来翻译blueprint文件，关于Blueprint文件格式可以参考build/blueprint/Blueprints文件，soong是在blueprint上面的扩展，基于blueprint的语法定制产生Android.bp语法，解析Android.bp文件生成ninja文件。</p><p>Blueprint和Soong都是有Go语言写的项目，从7.0开始在prebuilts/go/目录下新增了go语言的运行环境，在编译是使用。</p><h4 id="_2-2-3-android-ninja组织" tabindex="-1"><a class="header-anchor" href="#_2-2-3-android-ninja组织" aria-hidden="true">#</a> <strong>2.2.3.Android ninja组织</strong></h4><p>注意：build-aosp_arm.ninja在具体的项目中会被命名为：build-.ninja，而combined-aosp_arm.ninja也会是：combined-..ninja。</p><p>在编译过程中，将所有的android.bp文件搜集成out\\soong\\build.ninja.d , 并以此为基础生成out\\soong\\build.ninja规则。</p><p>由所有的Android.mk生成build-aosp_arm.ninja文件。通过combined-aosp_arm.ninja将两个文件组织起来。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>builddir <span class="token operator">=</span> out

<span class="token keyword">include</span> out/build-aosp_arm.ninja

<span class="token keyword">include</span> out/soong/build.ninja

<span class="token target symbol">build out/combined-aosp_arm.ninja</span><span class="token punctuation">:</span> phony out/soong/build.ninja
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过编译的LOG，首先搜集所有的bp文件生成build.ninja，然后搜集所有的mk文件生成build-aosp-arm.ninja文件。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>out/soong/.bootstrap/bin/soong_build out/soong/build.ninja

out/build-aosp_arm-cleanspec.ninja is missing, regenerating...

out/build-aosp_arm.ninja is missing, regenerating...

[1/894] including out/soong/Android-aosp_arm.mk ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>经过试验表明，soong处理后的bp文件生成build.ninja的同时还包含out/soong/Android-aosp_arm.mk，这个文件是编译完成后模块的安装脚本，负责将模块安装到对应位置。比如我们现在处理的vndk相关vendor处理就是在这个目录下进行的。</p><p>在out/soong目录下有两个文件.minibootstrap/build.ninja 和.bootstrap/build.ninja两个目录。.minibootstrap/build.ninja 主要是用来编译blueprint和生成.bootstrap/build.ninja。而.bootstrap/build.ninja主要是生成 soong相关工具和out/soong/build.ninja文件。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images640" alt=""></p><h4 id="_2-2-4-make-流程" tabindex="-1"><a class="header-anchor" href="#_2-2-4-make-流程" aria-hidden="true">#</a> <strong>2.2.4.make 流程</strong></h4><p>当我们在lunch之后执行make命令时，执行的是envsetup.sh里make函数。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>function make<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    _wrap_build <span class="token variable">$</span><span class="token punctuation">(</span>get_make_command<span class="token punctuation">)</span> <span class="token string">&quot;$@&quot;</span>
<span class="token punctuation">}</span>

function _wrap_build<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    local start_time<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>date +<span class="token string">&quot;%s&quot;</span><span class="token punctuation">)</span>
    <span class="token string">&quot;$@&quot;</span>
    local ret<span class="token operator">=</span><span class="token variable">$?</span>
    local end_time<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>date +<span class="token string">&quot;%s&quot;</span><span class="token punctuation">)</span>
    local tdiff<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$end_time-$start_time</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    local hours<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$tdiff</span> / 3600 <span class="token punctuation">)</span><span class="token punctuation">)</span>
    local mins<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$tdiff</span> % 3600<span class="token punctuation">)</span> / 60<span class="token punctuation">)</span><span class="token punctuation">)</span>
    local secs<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$tdiff</span> % 60<span class="token punctuation">)</span><span class="token punctuation">)</span>
    local ncolors<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>tput colors 2&gt;/dev/null<span class="token punctuation">)</span>
    if [ -n <span class="token string">&quot;$ncolors&quot;</span> ] &amp;&amp; [ <span class="token variable">$ncolors</span> -ge 8 ]<span class="token punctuation">;</span> then
        color_failed<span class="token operator">=</span>$<span class="token string">&#39;\\E&#39;</span><span class="token string">&quot;[0;31m&quot;</span>
        color_success<span class="token operator">=</span>$<span class="token string">&#39;\\E&#39;</span><span class="token string">&quot;[0;32m&quot;</span>
        color_reset<span class="token operator">=</span>$<span class="token string">&#39;\\E&#39;</span><span class="token string">&quot;[00m&quot;</span>
    <span class="token keyword">else</span>
        color_failed<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
        color_success<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
        color_reset<span class="token operator">=</span><span class="token string">&quot;&quot;</span>
    fi
    echo
    if [ <span class="token variable">$ret</span> -eq 0 ] <span class="token punctuation">;</span> then
        echo -n <span class="token string">&quot;\${color_success}#### build completed successfully &quot;</span>
    <span class="token keyword">else</span>
        echo -n <span class="token string">&quot;\${color_failed}#### failed to build some targets &quot;</span>
    fi
    if [ <span class="token variable">$hours</span> -gt 0 ] <span class="token punctuation">;</span> then
        printf <span class="token string">&quot;(%02g:%02g:%02g (hh:mm:ss))&quot;</span> <span class="token variable">$hours</span> <span class="token variable">$mins</span> <span class="token variable">$secs</span>
    elif [ <span class="token variable">$mins</span> -gt 0 ] <span class="token punctuation">;</span> then
        printf <span class="token string">&quot;(%02g:%02g (mm:ss))&quot;</span> <span class="token variable">$mins</span> <span class="token variable">$secs</span>
    elif [ <span class="token variable">$secs</span> -gt 0 ] <span class="token punctuation">;</span> then
        printf <span class="token string">&quot;(%s seconds)&quot;</span> <span class="token variable">$secs</span>
    fi
    echo <span class="token string">&quot; ####\${color_reset}&quot;</span>
    echo
    return <span class="token variable">$ret</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>make()函数用_wrap_build $(get_make_command) &quot;$@&quot;调用make工具来编译代码，并用其它的一些语句记录编译的时间。</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>function get_make_command<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment"># If we&#39;re in the top of an Android tree, use soong_ui.bash instead of make</span>
    if [ -f build/soong/soong_ui.bash ]<span class="token punctuation">;</span> then
        echo build/soong/soong_ui.bash --make-mode
    <span class="token keyword">else</span>
        echo command make
    fi
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数get_make_command将会调用soong_ui.bash来执行编译任务。</p><p>soong_ui.bash里执行microfactory.bash脚本，编译出可执行的microfactory_linux文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">source</span> <span class="token variable">\${TOP}</span>/build/soong/cmd/microfactory/microfactory.bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用microfactory_linux工具编译soong_ui</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>build_go soong_ui android/soong/cmd/soong_ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>microfactory.go里的Compile，Link也是封装了golang的编译命令。</p><p>使用soong_ui来处理后面的编译工作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> <span class="token variable">\${TOP}</span>\`\`exec <span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span>getoutdir<span class="token variable">)</span></span>/soong_ui&quot;</span> <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-2-5-mm流程" tabindex="-1"><a class="header-anchor" href="#_2-2-5-mm流程" aria-hidden="true">#</a> <strong>2.2.5. mm流程</strong></h4><p>当我们单独编译某个模块时，在这个模块目录下输入mm命令进行编译，在build/envsetup.sh看一下具体实现过程：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code>function mm<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">{</span>

local T<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>gettop<span class="token punctuation">)</span>

local DRV<span class="token operator">=</span><span class="token variable">$</span><span class="token punctuation">(</span>getdriver <span class="token variable">$T</span><span class="token punctuation">)</span>

<span class="token comment"># If we&#39;re sitting in the root of the build tree, just do a</span>

<span class="token comment"># normal build.</span>

if [ -f build/soong/soong_ui.bash ]<span class="token punctuation">;</span> then

_wrap_build <span class="token variable">$DRV</span> <span class="token variable">$T/build/soong/soong_ui.bash</span> --make-mode <span class="token variable">$@</span>

<span class="token keyword">else</span>

ONE_SHOT_MAKEFILE<span class="token operator">=</span><span class="token variable">$M</span> _wrap_build <span class="token variable">$DRV</span> <span class="token variable">$T/build/soong/soong_ui.bash</span> --make-mode <span class="token variable">$MODULES</span> <span class="token variable">$ARGS</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>流程上同make差不多只不过目标，是单独模块组成。</p><p>同时在mm一个单独模块是，生成独立的ninja文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>combined--aosp_arm-frameworks_native_libs_gui_Android.mk.ninja 和

build- aosp_arm-frameworks_native_libs_gui_Android.mk.ninja
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-6-soong流程" tabindex="-1"><a class="header-anchor" href="#_2-2-6-soong流程" aria-hidden="true">#</a> <strong>2.2.6.Soong流程</strong></h4><p>在介绍soong编译流程之前，先介绍几个命令以便我们后续编译流程的理解，在out/soong/host/linux-x86/bin目录下，有几个命令是soong用到的，</p><p>soong_ui: soong编译的入口</p><p>androidmk: 后面的Android.bp用到，Android.mk一键转换为android.bp</p><p>在out/soong/.bootstrap/bin目录下有几个</p><p>out/soong/.bootstrap/bin$ ls</p><p>bpglob gotestmain gotestrunner loadplugins minibp soong_build soong_env</p><p>minibp：在bootstrap是用到</p><p>soong_build ：这个很重要，主要是将bp文件转换为ninja文件</p><p>通过上文的分析，当我们make命令敲下去的时候，主要是执行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>prebuilts/build-tools/<span class="token variable"><span class="token variable">$(</span>host_prebuilts<span class="token variable">)</span></span>/bin/makeparallel <span class="token parameter variable">--ninja</span> build/soong/soong_ui.bash --make-mode <span class="token variable"><span class="token variable">$(</span>MAKECMDGOALS<span class="token variable">)</span></span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>soong_ui.bash脚本主要是执行如下：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>func <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

log :<span class="token operator">=</span> logger.New<span class="token punctuation">(</span>os.Stderr<span class="token punctuation">)</span>

defer log.Cleanup<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> len<span class="token punctuation">(</span>os.Args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token operator">!</span>inList<span class="token punctuation">(</span><span class="token string">&quot;--make-mode&quot;</span>, os.Args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

log.Fatalln<span class="token punctuation">(</span><span class="token string">&quot;The <span class="token variable"><span class="token variable">\`</span>soong<span class="token variable">\`</span></span> native UI is not yet available.&quot;</span><span class="token punctuation">)</span>

<span class="token punctuation">}</span>
build.Build<span class="token punctuation">(</span>buildCtx, config, build.BuildAll<span class="token punctuation">)</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要执行soong/ui/build/build.go，从build.go就可以看到执行soong的大体流程</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images640" alt=""></p><h4 id="_2-2-7-ninja使用" tabindex="-1"><a class="header-anchor" href="#_2-2-7-ninja使用" aria-hidden="true">#</a> <strong>2.2.7.ninja使用</strong></h4><p>我们可以使用ninja 和生成的combined-aosp_arm.ninja 编译工程或者某一个module.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./prebuilts/build-tools/linux-x86/bin/ninja <span class="token parameter variable">-f</span> out/combined-aosp_arm.ninja
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>同在工程中make一个效果</p><p>编译systemimage或者bootimage</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./prebuilts/build-tools/linux-x86/bin/ninja <span class="token parameter variable">-f</span> out/combined-aosp_arm.ninja  systemimage 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这样做的目的是，不用重新生成ninja文件，直接进行编译，节省部分时间。这是在没有修改Makefile的前提下</p><h4 id="_2-3-整体依赖" tabindex="-1"><a class="header-anchor" href="#_2-3-整体依赖" aria-hidden="true">#</a> <strong>2.3. 整体依赖</strong></h4><p>在引入了Soong和Ninjia以后，一部分模块的编译用Android.bp来进行，一部分还是用Android.mk来编译。两种编译文件最后都会转换成ninjia文件来进行最终的编译。所以编译的整体依赖还是和以前一样。</p><p>我们在Android源码根目录下执行make命令的时候，并没有传入目标，那么就会执行默认的目标。那默认的目标是什么呢？在android/build/core/main.mk中有这样几行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token variable"><span class="token variable">\`</span><span class="token comment"># This is the default target.  It must be the first declared target.</span><span class="token variable">\`</span></span> <span class="token variable"><span class="token variable">\`</span>.PHONY: droid<span class="token variable">\`</span></span> <span class="token variable"><span class="token variable">\`</span>DEFAULT_GOAL :<span class="token operator">=</span> droid<span class="token variable">\`</span></span> <span class="token variable"><span class="token variable">\`</span><span class="token variable">$(</span>DEFAULT_GOAL<span class="token punctuation">)</span>: droid_targets<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从注释可以看出，默认编译的就是droid这个伪目标，make工具遇到伪目标以后，会检查解析伪目标的依赖，如果伪目标存在依赖，就会检查这些依赖，如果这些依赖是伪目标，就继续检查这个伪目标的依赖，如果不是伪目标，就会生成这个目标，如此一层一层递归下去。</p><p>droid是makefile里的第一个target，make命令后面没有参数的话，它就是默认的编译目标。</p><p>另外，在android/build/core/main.mk中还有这样几行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token variable"><span class="token variable">\`</span><span class="token comment"># Building a full system-- the default is to build droidcore</span><span class="token variable">\`</span></span><span class="token variable"><span class="token variable">\`</span> droid_targets: droidcore dist_files<span class="token variable">\`</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就说明droid这个伪目标依赖droidcore和dist_files两大部分（整体编译时TARGET_BUILD_APPS为空），然后再将这两个依赖逐步解析下去，可以得到编译droid的整体依赖关系如下图：</p><p>注：可以用make showcommands来把编译过程详细的列出来。在出现编译问题时比较有用。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images640" alt=""></p><p><strong>有必要说明两点：</strong></p><p>1）有些依赖（比如INSTALLED_BOOTIMAGE_TARGET）在android/build/core/main.mk中没有定义，而是在android/build/core/Makefile中定义的；</p><p>2）上面dist_files也是个伪目标，并且它没有任何依赖，利用dist-for-goals方法来拷贝库文件，可忽略。</p>`,114),c={href:"https://mp.weixin.qq.com/s/C3IfATT6f6vwK1hrr35tFg",target:"_blank",rel:"noopener noreferrer"};function u(v,b){const s=i("ExternalLinkIcon");return t(),l("div",null,[d,a("p",null,[n("本文转自 "),a("a",c,[n("https://mp.weixin.qq.com/s/C3IfATT6f6vwK1hrr35tFg"),o(s)]),n("，如有侵权，请联系删除。")])])}const k=e(r,[["render",u],["__file","Android_Soong_buildbianyixitong.html.vue"]]);export{k as default};
