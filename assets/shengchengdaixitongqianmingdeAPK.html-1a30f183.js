import{_ as r,r as d,o as t,c as p,b as e,d as a,e as n,a as i}from"./app-e8f85126.js";const o={},l=i(`<p>有时候，我们开发的apk需要用到系统权限，需要在AndroidManifest.xml中添加共享系统进程属性：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>android:sharedUserId<span class="token operator">=</span><span class="token string">&quot;android.uid.system&quot;</span>
android:sharedUserId<span class="token operator">=</span><span class="token string">&quot;android.uid.shared&quot;</span>
android:sharedUserId<span class="token operator">=</span><span class="token string">&quot;android.media&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候apk的签名就需要是系统签名(platform、shared或media)才能正常使用。</p><h2 id="一、android源码环境下签名" tabindex="-1"><a class="header-anchor" href="#一、android源码环境下签名" aria-hidden="true">#</a> <strong>一、Android源码环境下签名</strong></h2><h3 id="_1-直接编译apk" tabindex="-1"><a class="header-anchor" href="#_1-直接编译apk" aria-hidden="true">#</a> 1.直接编译apk</h3><p>这种方式比较麻烦，你需要有编译过的源码环境，并按如下步骤：</p><p>1、拷贝App源码到Android源码的<code>packages/apps/</code>目录下，且App源码是普通(Eclipse)格式的<br> 2、配置Android.mk，在其中添加</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token constant">LOCAL_CERTIFICATE</span> <span class="token operator">:</span><span class="token operator">=</span> platform 或 shared 或 media
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、使用<code>mm</code>编译App，生成的apk即系统签名</p><h3 id="_2-源码编译生成签名" tabindex="-1"><a class="header-anchor" href="#_2-源码编译生成签名" aria-hidden="true">#</a> 2.源码编译生成签名</h3><p>1.进入系统目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>build/target/product/security
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.执行命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl pkcs8 <span class="token parameter variable">-inform</span> DER <span class="token parameter variable">-nocrypt</span> <span class="token parameter variable">-in</span> platform.pk8 <span class="token parameter variable">-out</span> platform.pem
<span class="token operator">&amp;&amp;</span> openssl pkcs12 <span class="token parameter variable">-export</span> <span class="token parameter variable">-in</span> platform.x509.pem <span class="token parameter variable">-out</span> platform.p12 <span class="token parameter variable">-inkey</span> platform.pem <span class="token parameter variable">-password</span> pass:android <span class="token parameter variable">-name</span> androiddebugkey
<span class="token operator">&amp;&amp;</span> keytool <span class="token parameter variable">-importkeystore</span> <span class="token parameter variable">-deststorepass</span> android <span class="token parameter variable">-destkeystore</span> platform.jks <span class="token parameter variable">-srckeystore</span> platform.p12 <span class="token parameter variable">-srcstoretype</span> PKCS12 <span class="token parameter variable">-srcstorepass</span> android
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成的platform.jks就是需要的系统签名文件</p><h2 id="二、对apk手动重新签名" tabindex="-1"><a class="header-anchor" href="#二、对apk手动重新签名" aria-hidden="true">#</a> 二、<strong>对apk手动重新签名</strong></h2><p>这种方式比在源码环境下签名简单，App可以在Eclipse或Android Studio下编译，然后给apk重新签名即可。<br> 但这种方式在频繁调试的时候比较痛苦，即使写成脚本，也需要重复一样的操作。</p><h3 id="相关文件" tabindex="-1"><a class="header-anchor" href="#相关文件" aria-hidden="true">#</a> <strong>相关文件</strong></h3><p>platform.x509.pem、platform.pk8、signapk.jar</p><h3 id="文件位置" tabindex="-1"><a class="header-anchor" href="#文件位置" aria-hidden="true">#</a> <strong>文件位置</strong></h3><p>platform.x509.pem、platform.pk8:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">..</span>/build/target/product/security
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>signapk.jar:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">..</span>/out/host/linux-x86/framework
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>signapk源码路径:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">..</span>/build/tools/signapk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="签名命令" tabindex="-1"><a class="header-anchor" href="#签名命令" aria-hidden="true">#</a> <strong>签名命令</strong></h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">java</span> <span class="token parameter variable">-jar</span> signapk.jar platform.x509.pem platform.pk8 old.apk new.apk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> <strong>步骤</strong></h3><p>1、将相关文件及源apk文件置于同一路径下</p><p>2、检查源apk包，去掉<code>META-INF/CERT.SF</code> 和 <code>META-INF/CERT.RSA</code> 文件</p><p>3、执行签名命令即可</p><h2 id="三、android-studio生成系统签名" tabindex="-1"><a class="header-anchor" href="#三、android-studio生成系统签名" aria-hidden="true">#</a> <strong>三、Android Studio生成系统签名</strong></h2><p>让Android Studio集成系统签名，需要用到一个工具<code>keytool-importkeypair</code>，详见下文。</p><h4 id="keytool-importkeypair" tabindex="-1"><a class="header-anchor" href="#keytool-importkeypair" aria-hidden="true">#</a> <strong>keytool-importkeypair</strong></h4><blockquote><p>keytool-importkeypair – A shell script to import key/certificate pairs into an existing Java keystore</p></blockquote>`,36),c={href:"https://github.com/getfatday/keytool-importkeypair",target:"_blank",rel:"noopener noreferrer"},u={href:"http://czj4451.iteye.com/blog/1487684",target:"_blank",rel:"noopener noreferrer"},m=i(`<h4 id="相关文件-1" tabindex="-1"><a class="header-anchor" href="#相关文件-1" aria-hidden="true">#</a> <strong>相关文件</strong></h4><p>platform.x509.pem、platform.pk8、keytool-importkeypair、demo.jks、signature.sh</p><p>我的做法是在App根目录新建Signature文件夹专门存放签名相关文件。</p><h4 id="步骤-1" tabindex="-1"><a class="header-anchor" href="#步骤-1" aria-hidden="true">#</a> <strong>步骤</strong></h4><p>1、生成demo.jks签名文件</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/image-20230629142000050.png" alt="image-20230629142000050"></p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/image-20230629142039888.png" alt="image-20230629142039888"></p><p>2、编写签名脚本signature.sh，内容如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/sh</span>

<span class="token comment"># 转换系统签名命令</span>
./keytool-importkeypair <span class="token parameter variable">-k</span> platform.jks <span class="token parameter variable">-p</span> android <span class="token parameter variable">-pk8</span> platform.pk8 <span class="token parameter variable">-cert</span> platform.x509.pem <span class="token parameter variable">-alias</span> androiddebugkey

<span class="token comment"># platform.jks : 签名文件</span>
<span class="token comment"># android : 签名文件密码</span>
<span class="token comment"># platform.pk8、platform.x509.pem : 系统签名文件</span>
<span class="token comment"># androiddebugkey : 签名文件别名</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为脚本文件添加可执行权限：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">sudo</span> <span class="token function">chmod</span> a+x signature.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行脚本：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ./signature.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3、配置builde.gradle</p><p>在android区域下(与defaultConfig同级)添加配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>signingConfigs <span class="token punctuation">{</span>
    release <span class="token punctuation">{</span>
        keyAlias <span class="token string">&#39;androiddebugkey&#39;</span>
        keyPassword <span class="token string">&#39;android&#39;</span>
        storePassword <span class="token string">&#39;android&#39;</span>

		storeFile file<span class="token punctuation">(</span><span class="token string">&quot;<span class="token variable">\${rootDir}</span>/.android/<span class="token variable">\${product_name}</span>/platform.jks&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    debug <span class="token punctuation">{</span>
        keyAlias <span class="token string">&#39;androiddebugkey&#39;</span>
        keyPassword <span class="token string">&#39;android&#39;</span>
        storePassword <span class="token string">&#39;android&#39;</span>

		storeFile file<span class="token punctuation">(</span><span class="token string">&quot;<span class="token variable">\${rootDir}</span>/.android/<span class="token variable">\${product_name}</span>/platform.jks&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样debug或release apk就带有系统签名了。</p><p>如果想直接<code>Run app</code>就是release版且带系统签名的apk，还需修改Build Variants为debug/release：</p><ol start="2"><li>修改<code>buildTypes</code>：</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>buildTypes <span class="token punctuation">{</span>
    release <span class="token punctuation">{</span>
        minifyEnabled <span class="token boolean">false</span>
        proguardFiles getDefaultProguardFile<span class="token punctuation">(</span><span class="token string">&#39;proguard-android.txt&#39;</span><span class="token punctuation">)</span>, <span class="token string">&#39;proguard-rules.txt&#39;</span>
        signingConfig signingConfigs.release
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样直接<code>Run app</code>就是带系统签名的release版apk了。</p><h2 id="查看签名" tabindex="-1"><a class="header-anchor" href="#查看签名" aria-hidden="true">#</a> 查看签名</h2><p>你可以使用 apksigner 或 keytool 工具来查看 APK 文件的签名信息。</p><h3 id="方法1-apksigner" tabindex="-1"><a class="header-anchor" href="#方法1-apksigner" aria-hidden="true">#</a> 方法1 apksigner</h3><p>apksigner 是 Android SDK 中的一部分，它可以用来检查 APK 文件的签名。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>~/Android/Sdk/build-tools/30.0.3/apksigner verify <span class="token parameter variable">--verbose</span> --print-certs your-app.apk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="方法2-keytool" tabindex="-1"><a class="header-anchor" href="#方法2-keytool" aria-hidden="true">#</a> 方法2 keytool</h3><p>如果你只需要查看 APK 的证书信息，可以使用 <code>keytool</code>。</p><ol><li><p>提取 APK 的证书文件**: APK 文件是一个压缩文件，你可以使用 <code>unzip</code> 命令来解压并提取证书文件。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">unzip</span> <span class="token parameter variable">-p</span> your-app.apk META-INF/CERT.RSA <span class="token operator">&gt;</span> CERT.RSA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><p>注意apk签名不一定是rsa算法，也可能使用EC算法，那么证书文件名就是CERT.EC</p><ol><li><p>使用 <code>keytool</code> 查看证书信息**:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>keytool <span class="token parameter variable">-printcert</span> <span class="token parameter variable">-file</span> CERT.RSA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个命令会输出证书的详细信息，包括颁发者、有效期等。</p><p><strong>总结</strong></p><ul><li>• <strong><code>apksigner</code></strong>: 更适合用于检查 APK 文件的完整签名信息。</li><li>• <strong><code>keytool</code></strong>: 主要用于查看证书的详细信息。</li></ul><p>选择合适的工具，根据你的需求来查看 APK 签名信息。</p></li></ol><h2 id="参考网址" tabindex="-1"><a class="header-anchor" href="#参考网址" aria-hidden="true">#</a> 参考网址</h2><p>https://blog.csdn.net/Donald_Zhuang/article/details/127472471在Android Studio中开发系统应用的环境配置</p><p>https://www.jianshu.com/p/10889088840e ：一次调用android.jar的internal与hideApi的解决方案 https://www.jianshu.com/p/10889088840e：开源带hide api的android.jar项目 https://hardiannicko.medium.com/create-your-own-android-hidden-apis-fa3cca02d345 ：自行创建 android.jar教程 https://blog.csdn.net/DKBDKBDKB/article/details/122347440 : Android11 全编译后无法生成framework.jar的解决方案 https://stackoverflow.com/questions/39657812/how-to-import-x509-pem-pk8-file-into-jks-keystore ：How to import x509.pem pk8 file</p>`,34),h={href:"https://blog.csdn.net/zhixuan322145/article/details/51277921",target:"_blank",rel:"noopener noreferrer"};function v(b,k){const s=d("ExternalLinkIcon");return t(),p("div",null,[l,e("p",null,[a("这个工具的作用是将系统签名的相关信息导入到已有的签名文件里。可从"),e("a",c,[a("这里"),n(s)]),a("下载。")]),e("p",null,[a("工具的使用方法可以通过–help或README.textile来寻求帮助，或参考"),e("a",u,[a("使用keytool工具"),n(s)]),a(" 这篇文章。")]),m,e("p",null,[a("本文转自 "),e("a",h,[a("https://blog.csdn.net/zhixuan322145/article/details/51277921"),n(s)]),a("，如有侵权，请联系删除。")])])}const f=r(o,[["render",v],["__file","shengchengdaixitongqianmingdeAPK.html.vue"]]);export{f as default};
