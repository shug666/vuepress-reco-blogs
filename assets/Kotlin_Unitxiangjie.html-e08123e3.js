import{_ as e,r as t,o as p,c as o,b as s,d as n,e as c,a as i}from"./app-e8f85126.js";const l={},u=i(`<h2 id="文案原稿" tabindex="-1"><a class="header-anchor" href="#文案原稿" aria-hidden="true">#</a> 文案原稿</h2><p>很多从 Java 转到 Kotlin 的人都会有一个疑惑：为什么 Kotlin 没有沿用 Java 的 <code>void</code> 关键字，而要引入这个叫 <code>Unit</code> 的新东西？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Java</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Kotlin</span>
<span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过这个问题一般也不会维持很久，因为就算你不明白，好像……也不影响写代码。</p><p>直到这两年，大家发现 Compose 的官方示例代码里竟然有把 <code>Unit</code> 填到函数参数里的情况：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">LaunchedEffect</span><span class="token punctuation">(</span>Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xxxx
  xxxxxx
  xxx
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们才觉得：「啊？还能这么写？」</p><h2 id="unit-的本质" tabindex="-1"><a class="header-anchor" href="#unit-的本质" aria-hidden="true">#</a> <code>Unit</code> 的本质</h2><p>大家好，我是扔物线朱凯。</p><p>今天来讲一讲 <code>Unit</code> 这个特殊的类型。</p><p>我们在刚学 Kotlin 的时候，就知道 Java 的 <code>void</code> 关键字在 Kotlin 里没有了，取而代之的是一个叫做 <code>Unit</code> 的东西：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Java</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Kotlin</span>
<span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而这个 <code>Unit</code>，和 Java 的 <code>void</code> 其实是不一样的。比如 <code>Unit</code> 的返回值类型，我们是可以省略掉不写的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Kotlin</span>
<span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过省略只是语法上的便利，实际上 Kotlin 还是会把它理解成 <code>Unit</code>。</p><p><code>Unit</code> 和 Java 的 <code>void</code> 真正的区别在于，<code>void</code> 是真的表示什么都不返回，而 Kotlin 的 <code>Unit</code> 却是一个真实存在的类型：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">object</span> Unit <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;kotlin.Unit&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它是一个 <code>object</code>，也就是 Kotlin 里的单例类型或者说单例对象。当一个函数的返回值类型是 <code>Unit</code> 的时候，它是需要返回一个 <code>Unit</code> 类型的对象的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Kotlin</span>
<span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Unit
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只不过因为它是个 <code>object</code> ，所以唯一能返回的值就是 <code>Unit</code> 本身。</p><p>另外，这一行 <code>return</code> 我们也可以省略不写：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Kotlin</span>
<span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为就像返回值类型一样，这一行 <code>return</code>，Kotlin 也会帮我们自动加上：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Kotlin</span>
<span class="token keyword">fun</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">{</span>
  <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello!&quot;</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> Unit
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这两个 <code>Unit</code> 是不一样的，上面的是 <code>Unit</code> 这个类型，下面的是 <code>Unit</code> 这个单例对象，它俩长得一样但是是不同的东西。注意了，这个并不是 Kotlin 给 <code>Unit</code> 的特权，而是 <code>object</code> 本来就有的语法特性。你如果有需要，也可以用同样的格式来使用别的单例对象，是不会报错的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">object</span> Rengwuxian

<span class="token keyword">fun</span> <span class="token function">getRengwuxian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Rengwuxian <span class="token punctuation">{</span>
  <span class="token keyword">return</span> Rengwuxian
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>包括你也可以这样写：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> unit<span class="token operator">:</span> Unit <span class="token operator">=</span> Unit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>也是一样的道理，等号左边是类型，等号右边是对象——当然这么写没什么实际作用啊，单例你就直接用就行了。</p><p>所以在结构上，<code>Unit</code> 并没有任何的特别之处，它就只是一个 Kotlin 的 <code>object</code> 而已。除了对于函数返回值类型和返回值的自动补充之外，Kotlin 对它没有再施加任何的魔法了。它的特殊之处，更多的是在于语义和用途的角度：它是个由官方规定出来的、用于「什么也不返回」的场景的返回值类型。但这只是它被规定的用法而已，而本质上它真就是个实实在在的类型。也就是在 Kotlin 里，并不存在真正没有返回值的函数，所有「没有返回值」的函数实质上的返回值类型都是 <code>Unit</code>，而返回值也都是 <code>Unit</code> 这个单例对象，这是 <code>Unit</code> 和 Java 的 <code>void</code> 在本质上的不同。</p><h2 id="unit-的价值所在" tabindex="-1"><a class="header-anchor" href="#unit-的价值所在" aria-hidden="true">#</a> <code>Unit</code> 的价值所在</h2><p>那么接下来的问题就是：这么做的意义在哪？</p><p>意义就在于，<code>Unit</code> 去掉了无返回值的函数的特殊性，消除了有返回值和无返回值的函数的本质区别，这样很多事做起来就会更简单了。</p><h3 id="例-有返回值的函数在重写时没有返回值" tabindex="-1"><a class="header-anchor" href="#例-有返回值的函数在重写时没有返回值" aria-hidden="true">#</a> 例：有返回值的函数在重写时没有返回值</h3><p>比如？</p><p>比如在 Java 里面，由于 <code>void</code> 并不是一种真正的类型，所以任何有返回值的方法在子类里的重写方法也都必须有返回值，而不能写成 <code>void</code>，不管你用不用泛型都是一样的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> Maker <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> Object <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> AppleMaker extends Maker <span class="token punctuation">{</span>
  <span class="token comment">// 合法</span>
  <span class="token annotation builtin">@Override</span>
  <span class="token keyword">public</span> Apple <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> new <span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> NewWorldMaker extends Maker <span class="token punctuation">{</span>
  <span class="token comment">// 非法</span>
  <span class="token annotation builtin">@Override</span>
  <span class="token keyword">public</span> void <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    world<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images0c50c2a1f3bd2.jpg" alt=""></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> Maker<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">abstract</span> T <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> AppleMaker extends Maker<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 合法</span>
  Override
  <span class="token keyword">public</span> Apple <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> new <span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> NewWorldMaker extends Maker<span class="token operator">&lt;</span>void<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 非法</span>
  Override
  <span class="token keyword">public</span> void <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    world<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagesdcb2ba053445b.jpg" alt=""></p><p>你只能去写一行 <code>return null</code> 来手动实现接近于「什么都不返回」的效果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewWorldMaker</span> <span class="token keyword">extends</span> <span class="token class-name">Maker</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    world<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/imagese4df0a679b4dd.jpg" alt=""></p><p>而且如果你用的是泛型，可能还需要用一个专门的虚假类型来让效果达到完美：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewWorldMaker</span> <span class="token keyword">extends</span> <span class="token class-name">Maker</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    world<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images563198558e7af.jpg" alt=""></p><p>而在 Kotlin 里，<code>Unit</code> 是一种真实存在的类型，所以直接写就行了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> Maker <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Any
<span class="token punctuation">}</span>

<span class="token keyword">class</span> AppleMaker <span class="token operator">:</span> <span class="token function">Maker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Apple <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> NewWorldMaker <span class="token operator">:</span> <span class="token function">Maker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    world<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> Maker<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> T
<span class="token punctuation">}</span>

<span class="token keyword">class</span> AppleMaker <span class="token operator">:</span> Maker<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Apple <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> NewWorldMaker <span class="token operator">:</span> Maker<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    world<span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是 <code>Unit</code> 的去特殊性——或者说通用性——所给我们带来的便利。</p><h3 id="例-函数类型的函数参数" tabindex="-1"><a class="header-anchor" href="#例-函数类型的函数参数" aria-hidden="true">#</a> 例：函数类型的函数参数</h3><p>同样的，这种去特殊性对于 Kotlin 的函数式编程也提供了方便。一个函数的函数类型的参数，在函数调用的时候填入的实参，只要符合声明里面的返回值类型，它是可以有返回值，也可以没有返回值的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">runTask</span><span class="token punctuation">(</span>task<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Any<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Unit <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;result is Unit&quot;</span></span><span class="token punctuation">)</span>
    String <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;result is a String: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">else</span> <span class="token operator">-&gt;</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;result is an unknown type&quot;</span></span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token operator">..</span><span class="token punctuation">.</span>

runTask <span class="token punctuation">{</span> <span class="token punctuation">}</span> <span class="token comment">// () -&gt; Unit</span>
runTask <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;完成！&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token comment">// () -&gt; String</span>
runTask <span class="token punctuation">{</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token comment">// () -&gt; Int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Java 不支持把方法当做对象来传递，所以我们没法跟 Java 做对比；但如果 Kotlin 不是像现在这样用了 <code>Unit</code>，而是照抄了 Java 的 <code>void</code> 关键字，我们就肯定没办法这样写。</p><h3 id="小结-去特殊化" tabindex="-1"><a class="header-anchor" href="#小结-去特殊化" aria-hidden="true">#</a> 小结：去特殊化</h3><p>这就是我刚才所说的，对于无返回值的函数的「去特殊化」，是 <code>Unit</code> 最核心的价值。它相当于是对 Java 的 <code>void</code> 进行了缺陷的修复，让本来有的问题现在没有了。而对于实际开发，它的作用是属于润物细无声的，你不需要懂我说的这一大堆东西，也不影响你享受 <code>Unit</code> 的这些好处。</p><p>…………</p><p>那我出这期视频干嘛？</p><p>——开个玩笑。了解各种魔法背后的实质，对于我们掌握和正确地使用一门语言是很有必要的。</p><h2 id="延伸-当做纯粹的单例对象来使用" tabindex="-1"><a class="header-anchor" href="#延伸-当做纯粹的单例对象来使用" aria-hidden="true">#</a> 延伸：当做纯粹的单例对象来使用</h2><p>比如，知道 <code>Unit</code> 是什么之后，你就能理解为什么它能作为函数的参数去被使用。</p><p>Compose 里的协程函数 <code>LaunchedEffect()</code> 要求我们填入至少一个 <code>key</code> 参数，来让协程在界面状态变化时可以自动重启：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">LaunchedEffect</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xxxx
  xxxxxx
  xxx
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果我们没有自动重启的需求，就可以在参数里填上一个 <code>Unit</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">LaunchedEffect</span><span class="token punctuation">(</span>Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  xxxx
  xxxxxx
  xxx
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>Unit</code> 是不变的，所以把它填进参数里，这个协程就不会自动重启了。这招用着非常方便，Compose 的官方示例里也有这样的代码。不过这个和 <code>Unit</code> 自身的定位已经无关了，而仅仅是在使用它「单例」的性质。实际上，你在括号里把它换成任何的常量，效果都是完全一样的，比如 <code>true</code>、比如 <code>false</code>、比如 <code>1</code>、比如 <code>0</code>、比如 <code>你好</code>，都是可以的。所以如果你什么时候想「随便拿个对象过来」，或者「随便拿个单例对象过来」，也可以使用 <code>Unit</code>，它和你自己创建一个 <code>object</code> 然后去使用，效果是一样的。</p>`,68),d={href:"https://rengwuxian.com/kotlin-unit/",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("本文转自 "),s("a",d,[n("https://rengwuxian.com/kotlin-unit/"),c(a)]),n("，如有侵权，请联系删除。")])])}const b=e(l,[["render",r],["__file","Kotlin_Unitxiangjie.html.vue"]]);export{b as default};
