import{_ as e,r as t,o as i,c as p,b as a,d as n,e as l,a as o}from"./app-e8f85126.js";const c={},d=o(`<h2 id="初识-mainactivity-kt" tabindex="-1"><a class="header-anchor" href="#初识-mainactivity-kt" aria-hidden="true">#</a> 初识 MainActivity.kt</h2><p>前面我们提到，如果新建的项目是基于 Kotlin 的，IDE 会帮我们创建好 <code>MainActivity</code>，它其实是有一个 <code>.kt</code> 的文件后缀名（打开的时候可以看到）。</p><blockquote><p>Kotlin 文件都是以 <code>.kt</code> 结尾的，就像 Java 文件是以 <code>.java</code> 结尾。</p></blockquote><p>我们看看这个 <code>MainActivity.kt</code> 里到底有些什么：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> org<span class="token punctuation">.</span>kotlinmaster
  👆
<span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle
  👆
<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>appcompat<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity
                  👇
<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  👆
       👇    👇                            👇     👇
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>
        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>乍一看，「👆」标注的 <code>package</code> <code>import</code> <code>class</code> 这些 Java 里的东西，Kotlin 也有；但是也有一些以「👇」标注的在 Java 里是没见过的。</p><p>为了暂时避开这些干扰，我们自己新建一个文件。</p><ul><li>在新建 Java Class 的入口下面可以看见一个叫 「Kotlin File/Class」 的选项，这就是我们新建 Kotlin 文件的入口</li><li>New Kotlin File/Class <ul><li>Name: Sample</li><li>Kind: Class</li></ul></li></ul><p>创建完成后的 <code>Sample.kt</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">package</span> org<span class="token punctuation">.</span>kotlinmaster

<span class="token keyword">class</span> Sample <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个类仅包含 <code>package</code> 和 <code>class</code> 两个关键字，我们暂时先看成和 Java 差不多（其实真的就是差不多）的概念，这样就都是我们熟悉的东西了。</p><p>接下来，让我们开始学习基础语法吧。</p><hr><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><h3 id="变量的声明与赋值" tabindex="-1"><a class="header-anchor" href="#变量的声明与赋值" aria-hidden="true">#</a> 变量的声明与赋值</h3><blockquote><p>这里讲一个 Java 和 Kotlin 命名由来的小插曲。</p><p>我们知道 Java 就是著名的爪哇岛，爪哇岛盛产咖啡，据说就是一群研究出 Java 语言的牛人们在为它命名时由于闻到香浓的咖啡味，遂决定采用此名称。</p><p>Kotlin 来源于芬兰湾中的 Kotlin 岛。</p><p>因此，我们在代码段的开头以「☕️」来表示 Java 代码段，「🏝️」来表示 Kotlin 代码段。</p></blockquote><p>我们回忆下 Java 里声明一个 View 类型的变量的写法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token class-name">View</span> v<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin 里声明一个变量的格式是这样的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> v<span class="token operator">:</span> View
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有几处不同：</p><ul><li>有一个 <code>var</code> 关键字</li><li>类型和变量名位置互换了</li><li>中间是用冒号分隔的</li><li>结尾没有分号（对，Kotlin 里面不需要分号）</li></ul><p>看上去只是语法格式有些不同，但如果真这么写，IDE 会报错：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> Sample <span class="token punctuation">{</span>
    <span class="token keyword">var</span> v<span class="token operator">:</span> View
    <span class="token comment">// 👆这样写 IDE 会报如下错误</span>
    <span class="token comment">// Property must be initialized or be abstract</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个提示是在说，属性需要在声明的同时初始化，除非你把它声明成抽象的。</p><ul><li>那什么是属性呢？这里我们可以简单类比 Java 的 field 来理解 Kotlin 的 Property，虽然它们其实有些不一样，Kotlin 的 Property 功能会多些。</li><li>变量居然还能声明成抽象的？嗯，这是 Kotlin 的功能，不过这里先不理它，后面会讲到。</li></ul><p>属性为什么要求初始化呢？因为 Kotlin 的变量是没有默认值的，这点不像 Java，Java 的 field 有默认值：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// 👈默认值是 null</span>
<span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment">// 👈默认值是 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这些 Kotlin 是没有的。不过其实，Java 也只是 field 有默认值，局部变量也是没有默认值的，如果不给它初始值也会报错：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> count<span class="token punctuation">;</span>
    count<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token comment">// 👆IDE 报错，Variable &#39;count&#39; might not have been initialized</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>既然这样，那我们就给它一个默认值 null 吧，遗憾的是你会发现仍然报错。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> Sample <span class="token punctuation">{</span>
    <span class="token keyword">var</span> v<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">// 👆这样写 IDE 仍然会报错，Null can not be a value of a non-null type View</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>又不行，IDE 告诉我需要赋一个非空的值给它才行，怎么办？Java 的那套不管用了。</p><p>其实这都是 Kotlin 的空安全设计相关的内容。很多人尝试上手 Kotlin 之后快速放弃，就是因为搞不明白它的空安全设计，导致代码各种拒绝编译，最终只能放弃。所以咱先别急，我先来给你讲一下 Kotlin 的空安全设计。</p><h3 id="kotlin-的空安全设计" tabindex="-1"><a class="header-anchor" href="#kotlin-的空安全设计" aria-hidden="true">#</a> Kotlin 的空安全设计</h3><p>简单来说就是通过 IDE 的提示来避免调用 null 对象，从而避免 NullPointerException。其实在 androidx 里就有支持的，用一个注解就可以标记变量是否可能为空，然后 IDE 会帮助检测和提示，我们来看下面这段 Java 代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token annotation punctuation">@NonNull</span>
<span class="token class-name">View</span> view <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token comment">// 👆IDE 会提示警告，&#39;null&#39; is assigned to a variable that is annotated with @NotNull</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而到了 Kotlin 这里，就有了语言级别的默认支持，而且提示的级别从 warning 变成了 error（拒绝编译）：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token comment">// 👆IDE 会提示错误，Null can not be a value of a non-null type View</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Kotlin 里面，所有的变量默认都是不允许为空的，如果你给它赋值 null，就会报错，像上面那样。</p><p>这种有点强硬的要求，其实是很合理的：既然你声明了一个变量，就是要使用它对吧？那你把它赋值为 null 干嘛？要尽量让它有可用的值啊。Java 在这方面很宽松，我们成了习惯，但 Kotlin 更强的限制其实在你熟悉了之后，是会减少很多运行时的问题的。</p><p>不过，还是有些场景，变量的值真的无法保证空与否，比如你要从服务器取一个 JSON 数据，并把它解析成一个 User 对象：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> User <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 👈这样写会报错，但该变量无法保证空与否</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候，空值就是有意义的。对于这些可以为空值的变量，你可以在类型右边加一个 <code>?</code> 号，解除它的非空限制：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> User <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>加了问号之后，一个 Kotlin 变量就像 Java 变量一样没有非空的限制，自由自在了。</p><p>你除了在初始化的时候可以给它赋值为空值，在代码里的任何地方也都可以：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mike&quot;</span></span>
<span class="token operator">..</span><span class="token punctuation">.</span>
name <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token comment">// 👈原来不是空值，赋值为空值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种类型之后加 <code>?</code> 的写法，在 Kotlin 里叫<strong>可空类型</strong>。</p><p>不过，当我们使用了可空类型的变量后，会有新的问题：</p><p>由于对空引用的调用会导致空指针异常，所以 Kotlin 在可空变量直接调用的时候 IDE 会报错：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> view<span class="token operator">:</span> View<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
view<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>
<span class="token comment">// 👆这样写会报错，Only safe (?.) or non-null asserted (!!.) calls are allowed on a nullable receiver of type View?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>「可能为空」的变量，Kotlin 不允许用。那怎么办？我们尝试用之前检查一下，但似乎 IDE 不接受这种做法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">if</span> <span class="token punctuation">(</span>view <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    view<span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>
    <span class="token comment">// 👆这样写会报错，Smart cast to &#39;View&#39; is impossible, because &#39;view&#39; is a mutable property that could have been changed by this time</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个报错的意思是即使你检查了非空也不能保证下面调用的时候就是非空，因为在多线程情况下，其他线程可能把它再改成空的。</p><p>那么 Kotlin 里是这么解决这个问题的呢？它用的不是 <code>.</code> 而是 <code>?.</code>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
view<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个写法同样会对变量做一次非空确认之后再调用方法，这是 Kotlin 的写法，并且它可以做到线程安全，因此这种写法叫做「<strong>safe call</strong>」。</p><p>另外还有一种双感叹号的用法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
view<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">setBackgroundColor</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>RED<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>意思是告诉编译器，我保证这里的 view 一定是非空的，编译器你不要帮我做检查了，有什么后果我自己承担。这种「肯定不会为空」的断言式的调用叫做 「<strong>non-null asserted call</strong>」。一旦用了非空断言，实际上和 Java 就没什么两样了，但也就享受不到 Kotlin 的空安全设计带来的好处（在编译时做检查，而不是运行时抛异常）了。</p><p>以上就是 Kotlin 的空安全设计。</p><p>理解了它之后再来看变量声明，跟 Java 虽然完全不一样，只是写法上不同而已。</p><p>很多人在上手的时候都被变量声明搞懵，原因就是 Kotlin 的空安全设计所导致的这些报错：</p><ul><li>变量需要手动初始化，如果不初始化的话会报错；</li><li>变量默认非空，所以初始化赋值 null 的话报错，之后再次赋值为 null 也会报错；</li><li>变量用 <code>?</code> 设置为可空的时候，使用的时候因为「可能为空」又报错。</li></ul><p>明白了空安全设计的原理后，就很容易能够解决上面的问题了。</p><p>关于空安全，最重要的是记住一点：所谓「可空不可空」，关注的全都是使用的时候，即「这个变量在使用时是否可能为空」。</p><p>另外，Kotlin 的这种空安全设计在与 Java 的互相调用上是完全兼容的，这里的兼容指：</p><ul><li>Java 里面的 @Nullable 注解，在 Kotlin 里调用时同样需要使用 <code>?.</code>。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token annotation punctuation">@Nullable</span>
<span class="token class-name">String</span> name<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
name<span class="token operator">?</span><span class="token punctuation">.</span>length
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Java 里面的 @Nullable 和 @NonNull 注解，在转换成 Kotlin 后对应的就是可空变量和不可空变量，至于怎么将 Java 代码转换为 Kotlin，Android Studio 给我们提供了很方便的工具（但并不完美），后面会讲。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token annotation punctuation">@Nullable</span>
<span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token annotation punctuation">@NonNull</span>
<span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> name<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">var</span> value<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;hello&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>空安全我们讲了这么多，但是有些时候我们声明一个变量是不会让它为空的，比如 view，其实在实际场景中我们希望它一直是非空的，可空并没有业务上的实际意义，使用 <code>?.</code> 影响代码可读性。</p><p>但如果你在 <code>MainActivity</code> 里这么写：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    👇
    <span class="token keyword">var</span> view<span class="token operator">:</span> View <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvContent<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然编译器不会报错，但程序一旦运行起来就 crash 了，原因是 findViewById() 是在 onCreate 之后才能调用。</p><p>那怎么办呢？其实我们很想告诉编译器「我很确定我用的时候绝对不为空，但第一时间我没法给它赋值」。</p><p>Kotlin 给我们提供了一个选项：延迟初始化。</p><h3 id="延迟初始化" tabindex="-1"><a class="header-anchor" href="#延迟初始化" aria-hidden="true">#</a> 延迟初始化</h3><p>具体是这么写的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">lateinit</span> <span class="token keyword">var</span> view<span class="token operator">:</span> View
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个 <code>lateinit</code> 的意思是：告诉编译器我没法第一时间就初始化，但我肯定会在使用它之前完成初始化的。</p><p>它的作用就是让 IDE 不要对这个变量检查初始化和报错。换句话说，加了这个 <code>lateinit</code> 关键字，这个变量的初始化就全靠你自己了，编译器不帮你检查了。</p><p>然后我们就可以在 onCreate 中进行初始化了：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
👇
<span class="token keyword">lateinit</span> <span class="token keyword">var</span> view<span class="token operator">:</span> View
<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
    👇
    view <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvContent<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>哦对了，延迟初始化对变量的赋值次数没有限制，你仍然可以在初始化之后再赋其他的值给 <code>view</code>。</p><h3 id="类型推断" tabindex="-1"><a class="header-anchor" href="#类型推断" aria-hidden="true">#</a> 类型推断</h3><p>Kotlin 有个很方便的地方是，如果你在声明的时候就赋值，那不写变量类型也行：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mike&quot;</span></span>
👇
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mike&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个特性叫做「类型推断」，它跟动态类型是不一样的，我们不能像使用 Groovy 或者 JavaScript 那样使用在 Kotlin 里这么写：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mike&quot;</span></span>
name <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// 👆会报错，The integer literal does not conform to the expected type String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code><span class="token comment">// Groovy</span>
<span class="token keyword">def</span> a <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">&quot;haha&quot;</span></span>
a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">// 👆这种先赋值字符串再赋值数字的方式在 Groovy 里是可以的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>「动态类型」是指变量的类型在运行时可以改变；而「类型推断」是你在代码里不用写变量类型，编译器在编译的时候会帮你补上。因此，Kotlin 是一门静态语言。</p><p>除了变量赋值这个场景，类型推断的其他场景我们之后也会遇到。</p><h3 id="val-和-var" tabindex="-1"><a class="header-anchor" href="#val-和-var" aria-hidden="true">#</a> val 和 var</h3><p>声明变量的方式也不止 var 一种，我们还可以使用 val：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">val</span> size <span class="token operator">=</span> <span class="token number">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>val 是 Kotlin 在 Java 的「变量」类型之外，又增加的一种变量类型：只读变量。它只能赋值一次，不能修改。而 var 是一种可读可写变量。</p><blockquote><p>var 是 variable 的缩写，val 是 value 的缩写。</p></blockquote><p>val 和 Java 中的 final 类似：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">final</span> <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>不过其实它们还是有些不一样的，这个我们之后再讲。总之直接进行重新赋值是不行的。</p><h3 id="可见性" tabindex="-1"><a class="header-anchor" href="#可见性" aria-hidden="true">#</a> 可见性</h3><p>看到这里，我们似乎都没有在 Kotlin 里看到类似 Java 里的 public、protected、private 这些表示变量可见性的修饰符，因为在 Kotlin 里变量默认就是 <strong>public</strong> 的，而对于其他可见性修饰符，我们之后会讲，这里先不用关心。</p><p>至此，我相信你对变量这部分已经了解得差不多了，可以根据前面的例子动手尝试尝试。</p><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>Kotlin 除了变量声明外，函数的声明方式也和 Java 的方法不一样。Java 的方法（method）在 Kotlin 里叫函数（function），其实没啥区别，或者说其中的区别我们可以忽略掉。对任何编程语言来讲，变量就是用来存储数据，而函数就是用来处理数据。</p><h3 id="函数的声明" tabindex="-1"><a class="header-anchor" href="#函数的声明" aria-hidden="true">#</a> 函数的声明</h3><p>我们先来看看 Java 里的方法是怎么写的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token class-name">Food</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而到了 Kotlin，函数的声明是这样：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
👇                      👇
<span class="token keyword">fun</span> <span class="token function">cook</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> Food <span class="token punctuation">{</span>
    <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>以 fun 关键字开头</li><li>返回值写在了函数和参数后面</li></ul><p>那如果没有返回值该怎么办？Java 里是返回 void：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin 里是返回 Unit，并且可以省略：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
            👇
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">// Unit 返回类型可以省略</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数参数也可以有可空的控制，根据前面说的空安全设计，在传递时需要注意：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token comment">// 👇可空变量传给不可空参数，报错</span>
<span class="token keyword">var</span> myName <span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;rengwuxian&quot;</span></span>
<span class="token keyword">fun</span> <span class="token function">cook</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> Food <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">cook</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span>
  
<span class="token comment">// 👇可空变量传给可空参数，正常运行</span>
<span class="token keyword">var</span> myName <span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;rengwuxian&quot;</span></span>
<span class="token keyword">fun</span> <span class="token function">cook</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">:</span> Food <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">cook</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span>

<span class="token comment">// 👇不可空变量传给不可空参数，正常运行</span>
<span class="token keyword">var</span> myName <span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;rengwuxian&quot;</span></span>
<span class="token keyword">fun</span> <span class="token function">cook</span><span class="token punctuation">(</span>name<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> Food <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token function">cook</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="可见性-1" tabindex="-1"><a class="header-anchor" href="#可见性-1" aria-hidden="true">#</a> 可见性</h3><p>函数如果不加可见性修饰符的话，默认的可见范围和变量一样也是 public 的，但有一种情况例外，这里简单提一下，就是遇到了 <code>override</code> 关键字的时候，下面会讲到。</p><h3 id="属性的-getter-setter-函数" tabindex="-1"><a class="header-anchor" href="#属性的-getter-setter-函数" aria-hidden="true">#</a> 属性的 getter/setter 函数</h3><p>我们知道，在 Java 里面的 field 经常会带有 getter/setter 函数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它们的作用就是可以自定义函数内部实现来达到「钩子」的效果，比如下面这种：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot; nb&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Cute &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Kotlin 里，这种 getter / setter 是怎么运作的呢？</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> User <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mike&quot;</span></span>
    <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mary&quot;</span></span>
        <span class="token comment">// 👆的写法实际上是👇这么调用的</span>
        <span class="token comment">// setName(&quot;Mary&quot;)</span>
        <span class="token comment">// 建议自己试试，IDE 的代码补全功能会在你打出 setn 的时候直接提示 name 而不是 setName</span>
        
        <span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        <span class="token comment">// 👆的写法实际上是👇这么调用的</span>
        <span class="token comment">// print(getName())</span>
        <span class="token comment">// IDE 的代码补全功能会在你打出 getn 的时候直接提示 name 而不是 getName</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么我们如何来操作前面提到的「钩子」呢？看下面这段代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> User <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mike&quot;</span></span>
        👇
        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> field <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot; nb&quot;</span></span>
        <span class="token punctuation">}</span>
        👇   👇 
        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            field <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Cute &quot;</span></span> <span class="token operator">+</span> value
        <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>格式上和 Java 有一些区别：</p><ul><li>getter / setter 函数有了专门的关键字 get 和 set</li><li>getter / setter 函数位于 var 所声明的变量下面</li><li>setter 函数参数是 value</li></ul><p>除此之外还多了一个叫 field 的东西。这个东西叫做「<strong>Backing Field</strong>」，中文翻译是<strong>幕后字段</strong>或<strong>后备字段</strong>（马云背后的女人😝）。具体来说，你的这个代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> Kotlin <span class="token punctuation">{</span>
  <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;kaixue.io&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在编译后的字节码大致等价于这样的 Java 代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Kotlin</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@NotNull</span>
   <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;kaixue.io&quot;</span><span class="token punctuation">;</span>

   <span class="token annotation punctuation">@NotNull</span>
   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的那个 <code>String name</code> 就是 Kotlin 帮我们自动创建的一个 Java field。这个 field 对编码的人不可见，但会自动应用于 getter 和 setter，因此它被命名为「Backing Field」（backing 的意思是在背后进行支持，例如你闯了大祸，我动用能量来保住你的人头，我就是在 back you）。</p><p>所以，虽然 Kotlin 的这个 <code>field</code> 本质上确实是一个 Java 中的 field，但对于 Kotlin 的语法来讲，它和 Java 里面的 field 完全不是一个概念。在 Kotlin 里，它相当于每一个 var 内部的一个变量。</p><p>我们前面讲过 val 是只读变量，只读的意思就是说 val 声明的变量不能进行重新赋值，也就是说不能调用 setter 函数，因此，val 声明的变量是不能重写 setter 函数的，但它可以重写 getter 函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">val</span> name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Mike&quot;</span></span>
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> field <span class="token operator">+</span> <span class="token string-literal singleline"><span class="token string">&quot; nb&quot;</span></span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>val 所声明的只读变量，在取值的时候仍然可能被修改，这也是和 Java 里的 final 的不同之处。</p><p>关于「钩子」的作用，除了修改取值和赋值，也可以加一些自己的逻辑，就像我们在 Activity 的生命周期函数里做的事情一样。</p><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p>讲完了变量和函数，接下来我们可以系统性地学习下 Kotlin 里的类型。</p><h3 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h3><p>在 Kotlin 中，所有东西都是对象，Kotlin 中使用的基本类型有：数字、字符、布尔值、数组与字符串。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> number<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 👈还有 Double Float Long Short Byte 都类似</span>
<span class="token keyword">var</span> c<span class="token operator">:</span> Char <span class="token operator">=</span> <span class="token char">&#39;c&#39;</span>
<span class="token keyword">var</span> b<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">var</span> array<span class="token operator">:</span> IntArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 👈类似的还有 FloatArray DoubleArray CharArray 等，intArrayOf 是 Kotlin 的 built-in 函数</span>
<span class="token keyword">var</span> str<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;string&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有两个地方和 Java 不太一样：</p><ul><li><p>Kotlin 里的 Int 和 Java 里的 int 以及 Integer 不同，主要是在装箱方面不同。</p><p>Java 里的 int 是 unbox 的，而 Integer 是 box 的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 👈会被自动装箱 autoboxing</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin 里，Int 是否装箱根据场合来定：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> a<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// unbox</span>
<span class="token keyword">var</span> b<span class="token operator">:</span> Int<span class="token operator">?</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token comment">// box</span>
<span class="token keyword">var</span> list<span class="token operator">:</span> List<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// box</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin 在语言层面简化了 Java 中的 int 和 Integer，但是我们对是否装箱的场景还是要有一个概念，因为这个牵涉到程序运行时的性能开销。</p><p>因此在日常的使用中，对于 Int 这样的基本类型，尽量用不可空变量。</p></li><li><p>Java 中的数组和 Kotlin 中的数组的写法也有区别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Kotlin 里，上面的写法是这样的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">var</span> array<span class="token operator">:</span> IntArray <span class="token operator">=</span> <span class="token function">intArrayOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment">// 👆这种也是 unbox 的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>简单来说，原先在 Java 里的基本类型，类比到 Kotlin 里面，条件满足如下之一就不装箱：</p><ul><li><p>不可空类型。</p></li><li><p>使用 IntArray、FloatArray 等。</p></li></ul><h3 id="类和对象" tabindex="-1"><a class="header-anchor" href="#类和对象" aria-hidden="true">#</a> 类和对象</h3><p>现在可以来看看我们的老朋友 <code>MainActivity</code> 了，重新认识下它：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以对比 Java 的代码来看有哪些不同：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>首先是类的可见性，Java 中的 public 在 Kotlin 中可以省略，Kotlin 的类默认是 public 的。</p></li><li><p>类的继承的写法，Java 里用的是 <code>extends</code>，而在 Kotlin 里使用 <code>:</code>，但其实 <code>:</code> 不仅可以表示继承，还可以表示 Java 中的 <code>implement</code>。</p><p>举个例子，假设我们有一个 interface 叫 Imple：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">interface</span> Impl <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Kotlin 里定义一个 interface 和 Java 没什么区别。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main2Activity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token keyword">implements</span> <span class="token class-name">Impl</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Impl <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>构造方法的写法不同。</p><ul><li><p>Java 里省略了默认的构造函数：</p></li><li><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  ☕️
  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>
      <span class="token comment">// 👇默认构造函数</span>
      <span class="token keyword">public</span> <span class="token class-name">MainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Kotlin 里我们注意到 AppCompatActivity 后面的 <code>()</code>，这其实也是一种省略的写法，等价于：</p></li><li><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>  🏝️                   
  <span class="token keyword">class</span> MainActivity <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                          👆
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过其实更像 Java 的写法是这样的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token comment">// 👇注意这里 AppCompatActivity 后面没有 &#39;()&#39;</span>
<span class="token keyword">class</span> MainActivity <span class="token operator">:</span> AppCompatActivity <span class="token punctuation">{</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin 把构造函数单独用了一个 <code>constructor</code> 关键字来和其他的 <code>fun</code> 做区分。</p></li></ul></li><li><p>override 的不同</p><ul><li>Java 里面 <code>@Override</code> 是注解的形式。</li><li>Kotlin 里的 <code>override</code> 变成了关键字。</li><li>Kotlin 省略了 <code>protected</code> 关键字，也就是说，Kotlin 里的 <code>override</code> 函数的可见性是继承自父类的。</li></ul></li></ul><p>除了以上这些明显的不同之外，还有一些不同点从上面的代码里看不出来，但当你写一个类去继承 <code>MainActivity</code> 时就会发现：</p><ul><li><p>Kotlin 里的 MainActivity 无法继承：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token comment">// 👇写法会报错，This type is final, so it cannot be inherited from</span>
<span class="token keyword">class</span> NewActivity<span class="token operator">:</span> <span class="token function">MainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因是 Kotlin 里的类默认是 final 的，而 Java 里只有加了 <code>final</code> 关键字的类才是 final 的。</p><p>那么有什么办法解除 final 限制么？我们可以使用 <code>open</code> 来做这件事：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">open</span> <span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，我们就可以继承了。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> NewActivity<span class="token operator">:</span> <span class="token function">MainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是要注意，此时 NewActivity 仍然是 final 的，也就是说，<code>open</code> 没有父类到子类的遗传性。</p><p>而刚才说到的 <code>override</code> 是有遗传性的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> NewActivity <span class="token operator">:</span> <span class="token function">MainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 👇onCreate 仍然是 override 的</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要关闭 <code>override</code> 的遗传性，只需要这样即可：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">open</span> <span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 👇加了 final 关键字，作用和 Java 里面一样，关闭了 override 的遗传性</span>
    <span class="token keyword">final</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">..</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Kotlin 里除了新增了 <code>open</code> 关键字之外，也有和 Java 一样的 <code>abstract</code> 关键字，这俩关键字的区别就是 <code>abstract</code> 关键字修饰的类无法直接实例化，并且通常来说会和 <code>abstract</code> 修饰的函数一起出现，当然，也可以没有这个 <code>abstract</code> 函数。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">abstract</span> <span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是子类如果要实例化，还是需要实现这个 abstract 函数的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> NewActivity <span class="token operator">:</span> <span class="token function">MainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>当我们声明好一个类之后，我们就可以实例化它了，实例化在 Java 中使用 <code>new</code> 关键字：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Activity</span> activity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 Kotlin 中，实例化一个对象更加简单，没有 <code>new</code> 关键字：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> activity<span class="token operator">:</span> Activity <span class="token operator">=</span> <span class="token function">NewActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 <code>MainActivity</code> 的学习，我们知道了 Java 和 Kotlin 中关于类的声明主要关注以下几个方面：</p><ul><li>类的可见性和开放性</li><li>构造方法</li><li>继承</li><li>override 函数</li></ul><h3 id="类型的判断和强转" tabindex="-1"><a class="header-anchor" href="#类型的判断和强转" aria-hidden="true">#</a> 类型的判断和强转</h3><p>刚才讲的实例化的例子中，我们实际上是把子类对象赋值给父类的变量，这个概念在 Java 里叫多态，Kotlin 也有这个特性，但在实际工作中我们很可能会遇到需要使用子类才有的函数。</p><p>比如我们先在子类中定义一个函数：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">class</span> NewActivity <span class="token operator">:</span> <span class="token function">MainActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么接下来这么写是无法调用该函数的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>🏝️
fun main() {
    var activity: Activity = NewActivity()
    // 👆activity 是无法调用 NewActivity 的 action 方法的
} 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Java 里，需要先使用 <code>instanceof</code> 关键字判断类型，再通过强转来调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>☕️
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Activity</span> activity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NewActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token keyword">instanceof</span> <span class="token class-name">NewActivity</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">NewActivity</span><span class="token punctuation">)</span> activity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin 里同样有类似解决方案，使用 <code>is</code> 关键字进行「类型判断」，并且因为编译器能够进行类型推断，可以帮助我们省略强转的写法：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> activity<span class="token operator">:</span> Activity <span class="token operator">=</span> <span class="token function">NewActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>activity <span class="token keyword">is</span> NewActivity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 👇的强转由于类型推断被省略了</span>
        activity<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么能不能不进行类型判断，直接进行强转调用呢？可以使用 <code>as</code> 关键字：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> activity<span class="token operator">:</span> Activity <span class="token operator">=</span> <span class="token function">NewActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">(</span>activity <span class="token keyword">as</span> NewActivity<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种写法如果强转类型操作是正确的当然没问题，但如果强转成一个错误的类型，程序就会抛出一个异常。</p><p>我们更希望能进行安全的强转，可以更优雅地处理强转出错的情况。</p><p>这一点，Kotlin 在设计上自然也考虑到了，我们可以使用 <code>as?</code> 来解决：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>🏝️
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> activity<span class="token operator">:</span> Activity <span class="token operator">=</span> <span class="token function">NewActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 👇&#39;(activity as? NewActivity)&#39; 之后是一个可空类型的对象，所以，需要使用 &#39;?.&#39; 来调用</span>
    <span class="token punctuation">(</span>activity <span class="token keyword">as</span><span class="token operator">?</span> NewActivity<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的意思就是说如果强转成功就执行之后的调用，如果强转不成功就不执行。</p>`,184),u={href:"https://rengwuxian.com/kotlin-basic-1/",target:"_blank",rel:"noopener noreferrer"};function r(v,k){const s=t("ExternalLinkIcon");return i(),p("div",null,[d,a("p",null,[n("本文转自 "),a("a",u,[n("https://rengwuxian.com/kotlin-basic-1/"),l(s)]),n("，如有侵权，请联系删除。")])])}const b=e(c,[["render",r],["__file","Kotlindebianliang_hanshuheleixing.html.vue"]]);export{b as default};
