import{_ as p,r as i,o,c as l,b as s,d as e,e as t,a as n}from"./app-e8f85126.js";const c={},r=n(`<blockquote><p>在android 系统中，为统一管理系统的属性，设计了一个统一的属性系统。<strong>每个属性都有一个名称和值</strong>，他们都是字符串格式。属性被大量使用在Android系统中，用来记录<strong>系统设置或进程之间的信息交换</strong>。<strong>属性是在整个系统中全局可见的。每个进程可以get/set属性</strong>。在编译的过程中会将各种系统参数汇总到build.prop 以及system.prop 这两个文件中，主要属性集中在build.prop中。系统在开机后将读取配置信息并构建共享缓冲区，加快查询速度。</p></blockquote><p>系统属性简单来说是用来存储系统中某些键值对数据，具有全局性、存取灵活方便的特点。</p><h2 id="一-终端prop命令" tabindex="-1"><a class="header-anchor" href="#一-终端prop命令" aria-hidden="true">#</a> 一 终端prop命令</h2><p>在终端设备中，可以通过以下命令进行prop调试。</p><h3 id="_1-1-查看prop" tabindex="-1"><a class="header-anchor" href="#_1-1-查看prop" aria-hidden="true">#</a> 1.1 查看prop</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查看系统所有props</span>
<span class="token variable">$getprop</span>
<span class="token punctuation">..</span>.
<span class="token punctuation">[</span>persist.sys.timezone<span class="token punctuation">]</span>: <span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>   //时区
<span class="token punctuation">[</span>ro.system.build.type<span class="token punctuation">]</span>: <span class="token punctuation">[</span>userdebug<span class="token punctuation">]</span>       //系统编译类型
<span class="token punctuation">[</span>vendor.display.lcd_density<span class="token punctuation">]</span>: <span class="token punctuation">[</span><span class="token number">320</span><span class="token punctuation">]</span>       //屏幕密度
<span class="token punctuation">..</span>.

<span class="token comment">#获取时区属性persist.sys.timezone的值</span>
<span class="token variable">$getprop</span> persist.sys.timezone
Asia/Shanghai

<span class="token comment">#过滤属性名或属性值含有关键字&quot;timezone&quot;的属性</span>
<span class="token variable">$getprop</span> <span class="token operator">|</span> <span class="token function">grep</span> timezone
<span class="token punctuation">[</span>persist.sys.timezone<span class="token punctuation">]</span>: <span class="token punctuation">[</span>Asia/Shanghai<span class="token punctuation">]</span>

<span class="token comment">#获取不存在的属性时结果为空</span>
<span class="token variable">$getprop</span> hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-设置prop" tabindex="-1"><a class="header-anchor" href="#_1-2-设置prop" aria-hidden="true">#</a> 1.2 设置prop</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$getprop</span> my.prop.test    //属性my.prop.test为空
<span class="token variable">$setprop</span> my.prop.test <span class="token number">123</span>    //设置属性my.prop.test为123
<span class="token variable">$getprop</span> my.prop.test    //获取属性my.prop.test为123
<span class="token number">123</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>setprop 可以给属性设置int、bool、string等基本类型</p><h3 id="_1-3-监听prop" tabindex="-1"><a class="header-anchor" href="#_1-3-监听prop" aria-hidden="true">#</a> 1.3 监听prop</h3><p>显示属性值发生变化的值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$watchprops</span>
<span class="token punctuation">[</span>my.prop.test<span class="token punctuation">]</span>: <span class="token punctuation">[</span><span class="token number">123456</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二-get和set-prop代码流程" tabindex="-1"><a class="header-anchor" href="#二-get和set-prop代码流程" aria-hidden="true">#</a> 二 get和set prop代码流程</h2><h3 id="_2-1-get和set-prop代码流程图" tabindex="-1"><a class="header-anchor" href="#_2-1-get和set-prop代码流程图" aria-hidden="true">#</a> 2.1 get和set prop代码流程图</h3><p>涉及的代码路径汇总如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>frameworks\\base\\core\\java\\android\\os\\SystemProperties.java
frameworks\\base\\core\\jni\\android_os_SystemProperties.cpp
system\\core\\base\\properties.cpp
system\\core\\init\\main.cpp
system\\core\\init\\init.cpp
system\\core\\init\\property_service.cpp
system\\core\\property_service\\libpropertyinfoparser\\property_info_parser.cpp
bionic\\libc\\include\\sys\\_system_properties.h
bionic\\libc\\include\\sys\\system_properties.h
bionic\\libc\\bionic\\system_property_set.cpp
bionic\\libc\\bionic\\system_property_api.cpp
bionic\\libc\\system_properties\\contexts_serialized.cpp
bionic\\libc\\system_properties\\system_properties.cpp
bionic\\libc\\system_properties\\prop_area.cpp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码流程整体时序图如下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/a3159d07668b4678965a9ede49b5ef3c.jpeg" alt="img"></p><p>系统属性架构设计如下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/7eb0bbd2d4694a09bf43c66c81f33b67.png" alt="img"></p><h3 id="_2-2-代码流程介绍" tabindex="-1"><a class="header-anchor" href="#_2-2-代码流程介绍" aria-hidden="true">#</a> 2.2 代码流程介绍</h3>`,21),d={href:"https://blog.csdn.net/supernova_TOP/article/details/125971945?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"},u=n('<h2 id="三-代码中使用属性" tabindex="-1"><a class="header-anchor" href="#三-代码中使用属性" aria-hidden="true">#</a> 三 代码中使用属性</h2><h3 id="_3-1-java代码中使用prop" tabindex="-1"><a class="header-anchor" href="#_3-1-java代码中使用prop" aria-hidden="true">#</a> 3.1 java代码中使用prop</h3><p>在java代码中使用prop需满足以下两点：</p><ul><li>import android.os.Systemproperties;</li><li>具有system权限： <ol><li>在AndroidManifest.xml中，配置android:sharedUserId=“android.uid.system”</li><li>在Android.mk中，配置LOCAL_CERTIFICATE :=platform</li></ol></li></ul>',4),v={href:"https://blog.csdn.net/Jason_Lee155/article/details/118498580",target:"_blank",rel:"noopener noreferrer"},m=n(`<p>Systemproperties部分源码如下： frameworks\\base\\core\\java\\android\\os\\SystemProperties.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SystemProperties</span> <span class="token punctuation">{</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token comment">//获取属性key的值，如果没有该属性则返回默认值def</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> def<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TRACK_KEY_ACCESS</span><span class="token punctuation">)</span> <span class="token function">onKeyAccess</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> <span class="token function">native_get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
   <span class="token comment">//设置属性key的值为val</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>val<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;ro.&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token constant">PROP_VALUE_MAX</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;value of system property &#39;&quot;</span> <span class="token operator">+</span> key
                   <span class="token operator">+</span> <span class="token string">&quot;&#39; is longer than &quot;</span> <span class="token operator">+</span> <span class="token constant">PROP_VALUE_MAX</span> <span class="token operator">+</span> <span class="token string">&quot; characters: &quot;</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">TRACK_KEY_ACCESS</span><span class="token punctuation">)</span> <span class="token function">onKeyAccess</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token function">native_set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>get和set pro以ActivityManagerService.java代码为例： frameworks\\base\\services\\core\\java\\com\\android\\server\\am\\ActivityManagerService.java</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">finishBooting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">//设置开机完成标志属性sys.boot_completed</span>
  <span class="token class-name">SystemProperties</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;sys.boot_completed&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">maybePruneOldTraces</span><span class="token punctuation">(</span><span class="token class-name">File</span> tracesDir<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token comment">//获取tombstoned.max_anr_count属性值</span>
  <span class="token keyword">final</span> <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">SystemProperties</span><span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;tombstoned.max_anr_count&quot;</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取属性值可以根据值的类型使用合适返回值类型的方法如getInt()、getBoolean()、getLong()，SystemProperties.get()获取的值为String。</p><h3 id="_3-3-特殊属性" tabindex="-1"><a class="header-anchor" href="#_3-3-特殊属性" aria-hidden="true">#</a> 3.3 特殊属性</h3><h4 id="_3-3-1-ro只读属性" tabindex="-1"><a class="header-anchor" href="#_3-3-1-ro只读属性" aria-hidden="true">#</a> 3.3.1 ro只读属性</h4><p>ro即read only这类属性通常是系统默认属性，在系统编译或初始化时设置的。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ getprop ro.vendor.build.version.release
<span class="token number">10</span>
$ setprop ro.vendor.build.version.release <span class="token number">9</span>
setprop: failed to <span class="token builtin class-name">set</span> property <span class="token string">&#39;ro.vendor.build.version.release&#39;</span> to <span class="token string">&#39;9&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-2-persist持久属性" tabindex="-1"><a class="header-anchor" href="#_3-3-2-persist持久属性" aria-hidden="true">#</a> 3.3.2 persist持久属性</h4><p>设置persist开头的属性，断电后仍能保存，值写入/data/property/proper。其他前缀的属性被设置后，只是保存在内存中而已，并没有保存到磁盘，所有重启后就恢复默认值了。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ getprop persist.hello.test  //属性为空
$ setprop persist.hello.test abc //设置属性persist.hello.test值为abc
$ getprop persist.hello.test abc //属性get正常
abc
<span class="token variable">$reboot</span> //重启设备
$ getprop persist.hello.test //属性为abc
abc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-3-ctl-控制属性" tabindex="-1"><a class="header-anchor" href="#_3-3-3-ctl-控制属性" aria-hidden="true">#</a> 3.3.3 ctl 控制属性</h4><p>属性名称以”ctl.”开头，用来启动和停止服务。每一项服务必须在 init.rc 中定义。init 一旦收到设置 ctl.start 属性的请求，属性服务将使用该属性值作为服务名找到该服务，启动该服务。这项服务的启动结果将会放入 init.svc.&lt;服务名&gt; 属性中。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$setprop</span> ctl.start xxx //启动某服务
<span class="token variable">$setprop</span> ctl.stop xxx  //关闭某服务
<span class="token variable">$setprop</span> ctl.restart xxx  //重启某服务
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-4-sys-powerctl属性" tabindex="-1"><a class="header-anchor" href="#_3-3-4-sys-powerctl属性" aria-hidden="true">#</a> 3.3.4 sys.powerctl属性</h4><p>sys.powerctl属性可控制设备重启关机</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$setprop</span> sys.powerctl <span class="token function">shutdown</span> //设备关机
<span class="token variable">$setprop</span> sys.powerctl <span class="token function">reboot</span> //设备重启
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-5-普通属性" tabindex="-1"><a class="header-anchor" href="#_3-3-5-普通属性" aria-hidden="true">#</a> 3.3.5 普通属性</h4><p>设置其他格式开头的属性，断电后不能保存</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ getprop hello.test  //属性为空
$ setprop hello.test <span class="token number">123</span>//设置属性persist.hello.test值为abc
$ getprop hello.test <span class="token number">123</span>//属性get正常
<span class="token number">123</span>
<span class="token variable">$reboot</span> //重启设备
$ getprop hello.test //属性为空
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4-添加系统默认属性" tabindex="-1"><a class="header-anchor" href="#_3-4-添加系统默认属性" aria-hidden="true">#</a> 3.4 添加系统默认属性</h3><p>从前面的介绍中我们知道系统开机时会load *.prop属性配置文件中的属性，因此开机后就有了默认属性。</p><p>在customer/default/tt_build.prop 中定义具体的系统属性 (另外，如果是添加以toptech_开头的 系统属性，则还需要去tt_config.mk中去添加一下要配置的系统属性)</p><blockquote><p>在tt_build.prop中添加完成之后，必须要提交(git add tt_build.prop), 否则会被脚本中执行的 git checkout 给清除掉</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加自己的系统默认属性</span>
<span class="token assign-left variable">persist.hello.world</span><span class="token operator">=</span>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：这里添加的属性前缀必须是在kernel/android/R/device/realtek/common/sepolicy/property_contexts中被定义过的</p><p>make android后在out/target/product/xxx/system/build.prop 或out/target/product/xxx/vendor/build.prop可找到添加的属性persist.hello.world，则说明基本添加成功，烧录img验证即可。</p></blockquote><p>然后再去 customer/scripts/init.sh 添加变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">config_world</span><span class="token operator">=</span>hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-5-添加属性前缀" tabindex="-1"><a class="header-anchor" href="#_3-5-添加属性前缀" aria-hidden="true">#</a> 3.5 添加属性前缀</h3><p>在R/device/realtek/common/sepolicy/property_contexts文件中定义系统属性的前缀，第二列也就相当于赋给这个前缀可使用的权限，当然也不止这一个文件，sepolicy目录下面的基本上都是用来做te规则的，也就是设置权限的</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/image-20220824114131243.png" alt="image-20220824114131243"></p><h2 id="组织结构" tabindex="-1"><a class="header-anchor" href="#组织结构" aria-hidden="true">#</a> 组织结构</h2><p>系统启动的时候会从几个配置文件中加载属性的默认值，大概有以下几个文件， 在不同Android版本系统上可能不一样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/default.prop 或者是 /prop.default，
/vendor/default.prop
/system/build.prop
/vendor/build.prop
/data/local.prop
/data/property/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>系统会按先后顺序依次加载以上文件，后加载的属性将覆盖原先的值。default.prop 的值是通过 build/tools 目录下的 buildinfo.sh 和 vendor_buildinfo.sh 生成的。</p>`,36);function b(k,h){const a=i("ExternalLinkIcon");return o(),l("div",null,[r,s("p",null,[s("a",d,[e("见博客Android 系统属性（SystemProperties）介绍"),t(a)])]),u,s("p",null,[s("a",v,[e("见博客android:sharedUserId作用"),t(a)])]),m])}const y=p(c,[["render",b],["__file","xitongshuxing.html.vue"]]);export{y as default};
