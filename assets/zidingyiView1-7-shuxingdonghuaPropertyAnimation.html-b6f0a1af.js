import{_ as t,r as p,o as e,c as o,b as a,d as n,e as c,a as l}from"./app-e8f85126.js";const u={},i=l(`<p>上期的内容，对于大多数简单的属性动画场景已经够用了。这期的内容主要针对两个方面：</p><ol><li>针对特殊类型的属性来做属性动画；</li><li>针对复杂的属性关系来做属性动画。</li></ol><h2 id="typeevaluator" tabindex="-1"><a class="header-anchor" href="#typeevaluator" aria-hidden="true">#</a> TypeEvaluator</h2><p>关于 ObjectAnimator，上期讲到可以用 <code>ofInt()</code> 来做整数的属性动画和用 <code>ofFloat()</code> 来做小数的属性动画。这两种属性类型是属性动画最常用的两种，不过在实际的开发中，可以做属性动画的类型还是有其他的一些类型。当需要对其他类型来做属性动画的时候，就需要用到 <code>TypeEvaluator</code> 了。</p><h2 id="argbevaluator" tabindex="-1"><a class="header-anchor" href="#argbevaluator" aria-hidden="true">#</a> ArgbEvaluator</h2><p>如视频中的例子，<code>TypeEvaluator</code> 最经典的用法是使用 <code>ArgbEvaluator</code> 来做颜色渐变的动画。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObjectAnimator</span> animator <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token number">0xffff0000</span><span class="token punctuation">,</span> <span class="token number">0xff00ff00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animator<span class="token punctuation">.</span><span class="token function">setEvaluator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArgbEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fjfftvcj1jg309i06q45c.gif" alt=""></p><p>另外，在 Android 5.0 （API 21） 加入了新的方法 <code>ofArgb()</code>，所以如果你的 <code>minSdk</code> 大于或者等于 21（哈哈哈哈哈哈哈哈），你可以直接用下面这种方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObjectAnimator</span> animator <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofArgb</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token number">0xffff0000</span><span class="token punctuation">,</span> <span class="token number">0xff00ff00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="自定义-evaluator" tabindex="-1"><a class="header-anchor" href="#自定义-evaluator" aria-hidden="true">#</a> 自定义 Evaluator</h2><p>如果你对 <code>ArgbEvaluator</code> 的效果不满意，或者你由于别的什么原因希望写一个自定义的 <code>TypeEvaluator</code>，你可以这样写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自定义 HslEvaluator</span>
<span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">HsvEvaluator</span> <span class="token keyword">implements</span> <span class="token class-name">TypeEvaluator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
   <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> startHsv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> endHsv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> outHsv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">float</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">float</span> fraction<span class="token punctuation">,</span> <span class="token class-name">Integer</span> startValue<span class="token punctuation">,</span> <span class="token class-name">Integer</span> endValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token comment">// 把 ARGB 转换成 HSV</span>
       <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">colorToHSV</span><span class="token punctuation">(</span>startValue<span class="token punctuation">,</span> startHsv<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">colorToHSV</span><span class="token punctuation">(</span>endValue<span class="token punctuation">,</span> endHsv<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token comment">// 计算当前动画完成度（fraction）所对应的颜色值</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>endHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> startHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">180</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           endHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">360</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>endHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> startHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">180</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           endHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">360</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       outHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> startHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> startHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> fraction<span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>outHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">360</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           outHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">360</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>outHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           outHsv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">360</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       outHsv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> startHsv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endHsv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> startHsv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> fraction<span class="token punctuation">;</span>
       outHsv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> startHsv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endHsv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> startHsv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> fraction<span class="token punctuation">;</span>

       <span class="token comment">// 计算当前动画完成度（fraction）所对应的透明度</span>
       <span class="token keyword">int</span> alpha <span class="token operator">=</span> startValue <span class="token operator">&gt;&gt;</span> <span class="token number">24</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>endValue <span class="token operator">&gt;&gt;</span> <span class="token number">24</span> <span class="token operator">-</span> startValue <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">*</span> fraction<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token comment">// 把 HSV 转换回 ARGB 返回</span>
       <span class="token keyword">return</span> <span class="token class-name">Color<span class="token punctuation">.</span>HSVToColor</span><span class="token punctuation">(</span>alpha<span class="token punctuation">,</span> outHsv<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">ObjectAnimator</span> animator <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">&quot;color&quot;</span><span class="token punctuation">,</span> <span class="token number">0xff00ff00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用自定义的 HslEvaluator</span>
animator<span class="token punctuation">.</span><span class="token function">setEvaluator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HsvEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fjfga1rw4fg309i06q0zj.gif" alt=""></p><h2 id="ofobject" tabindex="-1"><a class="header-anchor" href="#ofobject" aria-hidden="true">#</a> ofObject()</h2><p>借助于 <code>TypeEvaluator</code>，属性动画就可以通过 <code>ofObject()</code> 来对不限定类型的属性做动画了。方式很简单：</p><ol><li>为目标属性写一个自定义的 <code>TypeEvaluator</code></li><li>使用 <code>ofObject()</code> 来创建 <code>Animator</code>，并把自定义的 <code>TypeEvaluator</code> 作为参数填入</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">PointFEvaluator</span> <span class="token keyword">implements</span> <span class="token class-name">TypeEvaluator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PointF</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
   <span class="token class-name">PointF</span> newPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PointF</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token class-name">PointF</span> <span class="token function">evaluate</span><span class="token punctuation">(</span><span class="token keyword">float</span> fraction<span class="token punctuation">,</span> <span class="token class-name">PointF</span> startValue<span class="token punctuation">,</span> <span class="token class-name">PointF</span> endValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">float</span> x <span class="token operator">=</span> startValue<span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token punctuation">(</span>fraction <span class="token operator">*</span> <span class="token punctuation">(</span>endValue<span class="token punctuation">.</span>x <span class="token operator">-</span> startValue<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">float</span> y <span class="token operator">=</span> startValue<span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token punctuation">(</span>fraction <span class="token operator">*</span> <span class="token punctuation">(</span>endValue<span class="token punctuation">.</span>y <span class="token operator">-</span> startValue<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       newPoint<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token keyword">return</span> newPoint<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token class-name">ObjectAnimator</span> animator <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofObject</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string">&quot;position&quot;</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">PointFEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PointF</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PointF</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fjfgi5uusng30ci07yabn.gif" alt=""></p><p>另外在 API 21 中，已经自带了 <code>PointFEvaluator</code> 这个类，所以如果你的 <code>minSdk</code> 大于或者等于 21（哈哈哈哈哈哈哈哈），上面这个类你就不用写了，直接用就行了。</p><h2 id="ofmultiint-ofmultifloat" tabindex="-1"><a class="header-anchor" href="#ofmultiint-ofmultifloat" aria-hidden="true">#</a> ofMultiInt() ofMultiFloat()</h2><p>在 API 引入的新的方法还有 <code>ofMultiInt()</code> 和 <code>ofMultiFloat()</code> 等，用法也很简单，不过实用性就低了一些。你有兴趣的话可以去做一下了解，这里不在多做介绍。</p><p>以上这些就是对 <code>TypeEvaluator</code> 的介绍。它的作用是让你可以对同样的属性有不同的解析方式，对本来无法解析的属性也可以打造出你需要的解析方式。有了 <code>TypeEvaluator</code>，你的属性动画就有了更大的灵活性，从而有了无限的可能。</p><p><code>TypeEvaluator</code> 是本期的第一部分内容：针对特殊的属性来做属性动画，它可以让你「做到本来做不到的动画」。接下来是本期的第二部分内容：针对复杂的属性关系来做动画，它可以让你「能做到的动画做起来更简单」。</p><h2 id="propertyvaluesholder-同一个动画中改变多个属性" tabindex="-1"><a class="header-anchor" href="#propertyvaluesholder-同一个动画中改变多个属性" aria-hidden="true">#</a> PropertyValuesHolder 同一个动画中改变多个属性</h2><p>很多时候，你在同一个动画中会需要改变多个属性，例如在改变透明度的同时改变尺寸。如果使用 <code>ViewPropertyAnimator</code>，你可以直接用连写的方式来在一个动画中同时改变多个属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>view<span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">scaleX</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">scaleY</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">alpha</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fjfirzt0kog30bc0a0wja.gif" alt=""></p><p>而对于 <code>ObjectAnimator</code>，是不能这么用的。不过你可以使用 <code>PropertyValuesHolder</code> 来同时在一个动画中改变多个属性。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PropertyValuesHolder</span> holder1 <span class="token operator">=</span> <span class="token class-name">PropertyValuesHolder</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">&quot;scaleX&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PropertyValuesHolder</span> holder2 <span class="token operator">=</span> <span class="token class-name">PropertyValuesHolder</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">&quot;scaleY&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PropertyValuesHolder</span> holder3 <span class="token operator">=</span> <span class="token class-name">PropertyValuesHolder</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token string">&quot;alpha&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ObjectAnimator</span> animator <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofPropertyValuesHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> holder1<span class="token punctuation">,</span> holder2<span class="token punctuation">,</span> holder3<span class="token punctuation">)</span>
animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>PropertyValuesHolder</code> 的意思从名字可以看出来，它是一个属性值的批量存放地。所以你如果有多个属性需要修改，可以把它们放在不同的 <code>PropertyValuesHolder</code> 中，然后使用 <code>ofPropertyValuesHolder()</code> 统一放进 <code>Animator</code>。这样你就不用为每个属性单独创建一个 <code>Animator</code> 分别执行了。</p><h2 id="animatorset-多个动画配合执行" tabindex="-1"><a class="header-anchor" href="#animatorset-多个动画配合执行" aria-hidden="true">#</a> AnimatorSet 多个动画配合执行</h2><p>有的时候，你不止需要在一个动画中改变多个属性，还会需要多个动画配合工作，比如，在内容的大小从 0 放大到 100% 大小后开始移动。这种情况使用 <code>PropertyValuesHolder</code> 是不行的，因为这些属性如果放在同一个动画中，需要共享动画的开始时间、结束时间、Interpolator 等等一系列的设定，这样就不能有先后次序地执行动画了。</p><p>这就需要用到 <code>AnimatorSet</code> 了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObjectAnimator</span> animator1 <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animator1<span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LinearInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ObjectAnimator</span> animator2 <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofInt</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
animator2<span class="token punctuation">.</span><span class="token function">setInterpolator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DecelerateInterpolator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">AnimatorSet</span> animatorSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimatorSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 两个动画依次执行</span>
animatorSet<span class="token punctuation">.</span><span class="token function">playSequentially</span><span class="token punctuation">(</span>animator1<span class="token punctuation">,</span> animator2<span class="token punctuation">)</span><span class="token punctuation">;</span>
animatorSet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fjfiuualxyg30gi09iwqa.gif" alt=""></p><p>使用 <code>playSequentially()</code>，就可以让两个动画依次播放，而不用为它们设置监听器来手动为他们监管协作。</p><p><code>AnimatorSet</code> 还可以这么用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 两个动画同时执行</span>
animatorSet<span class="token punctuation">.</span><span class="token function">playTogether</span><span class="token punctuation">(</span>animator1<span class="token punctuation">,</span> animator2<span class="token punctuation">)</span><span class="token punctuation">;</span>
animatorSet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以及这么用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用 AnimatorSet.play(animatorA).with/before/after(animatorB)</span>
<span class="token comment">// 的方式来精确配置各个 Animator 之间的关系</span>
animatorSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>animator1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>animator2<span class="token punctuation">)</span><span class="token punctuation">;</span>
animatorSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>animator1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>animator2<span class="token punctuation">)</span><span class="token punctuation">;</span>
animatorSet<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span>animator1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">after</span><span class="token punctuation">(</span>animator2<span class="token punctuation">)</span><span class="token punctuation">;</span>
animatorSet<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有了 <code>AnimatorSet</code> ，你就可以对多个 <code>Animator</code> 进行统一规划和管理，让它们按照要求的顺序来工作。它的使用比较简单，具体的用法我写在讲义里，你可以看一下。</p><h2 id="propertyvaluesholders-ofkeyframe-把同一个属性拆分" tabindex="-1"><a class="header-anchor" href="#propertyvaluesholders-ofkeyframe-把同一个属性拆分" aria-hidden="true">#</a> PropertyValuesHolders.ofKeyframe() 把同一个属性拆分</h2><p>除了合并多个属性和调配多个动画，你还可以在 <code>PropertyValuesHolder</code> 的基础上更进一步，通过设置 <code>Keyframe</code> （关键帧），把同一个动画属性拆分成多个阶段。例如，你可以让一个进度增加到 100% 后再「反弹」回来。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在 0% 处开始</span>
<span class="token class-name">Keyframe</span> keyframe1 <span class="token operator">=</span> <span class="token class-name">Keyframe</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 时间经过 50% 的时候，动画完成度 100%</span>
<span class="token class-name">Keyframe</span> keyframe2 <span class="token operator">=</span> <span class="token class-name">Keyframe</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token number">0.5f</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 时间见过 100% 的时候，动画完成度倒退到 80%，即反弹 20%</span>
<span class="token class-name">Keyframe</span> keyframe3 <span class="token operator">=</span> <span class="token class-name">Keyframe</span><span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">PropertyValuesHolder</span> holder <span class="token operator">=</span> <span class="token class-name">PropertyValuesHolder</span><span class="token punctuation">.</span><span class="token function">ofKeyframe</span><span class="token punctuation">(</span><span class="token string">&quot;progress&quot;</span><span class="token punctuation">,</span> keyframe1<span class="token punctuation">,</span> keyframe2<span class="token punctuation">,</span> keyframe3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">ObjectAnimator</span> animator <span class="token operator">=</span> <span class="token class-name">ObjectAnimator</span><span class="token punctuation">.</span><span class="token function">ofPropertyValuesHolder</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> holder<span class="token punctuation">)</span><span class="token punctuation">;</span>
animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fjfig8edhmg30ck07046i.gif" alt=""></p><p>第二部分，「关于复杂的属性关系来做动画」，就这么三种：</p><ol><li>使用 <code>PropertyValuesHolder</code> 来对多个属性同时做动画；</li><li>使用 <code>AnimatorSet</code> 来同时管理调配多个动画；</li><li><code>PropertyValuesHolder</code> 的进阶使用：使用 <code>PropertyValuesHolder.ofKeyframe()</code> 来把一个属性拆分成多段，执行更加精细的属性动画。</li></ol><h2 id="valueanimator-最基本的轮子" tabindex="-1"><a class="header-anchor" href="#valueanimator-最基本的轮子" aria-hidden="true">#</a> ValueAnimator 最基本的轮子</h2><p>额外简单说一下 <code>ValuesAnimator</code>。很多时候，你用不到它，只是在你使用一些第三方库的控件，而你想要做动画的属性却没有 setter / getter 方法的时候，会需要用到它。</p><p>除了 ViewPropertyAnimator 和 ObjectAnimator，还有第三个选择是 ValueAnimator。ValueAnimator 并不常用，因为它的功能太基础了。ValueAnimator 是 ObjectAnimator 的父类，实际上，ValueAnimator 就是一个不能指定目标对象版本的 ObjectAnimator。ObjectAnimator 是自动调用目标对象的 setter 方法来更新目标属性的值，以及很多的时候还会以此来改变目标对象的 UI，而 ValueAnimator 只是通过渐变的方式来改变一个独立的数据，这个数据不是属于某个对象的，至于在数据更新后要做什么事，全都由你来定，你可以依然是去调用某个对象的 setter 方法（别这么为难自己），也可以做其他的事，不管要做什么，都是要你自己来写的，ValueAnimator 不会帮你做。功能最少、最不方便，但有时也是束缚最少、最灵活。比如有的时候，你要给一个第三方控件做动画，你需要更新的那个属性没有 setter 方法，只能直接修改，这样的话 ObjectAnimator 就不灵了啊。怎么办？这个时候你就可以用 ValueAnimator，在它的 onUpdate() 里面更新这个属性的值，并且手动调用 invalidate()。</p><p>所以你看，ViewPropertyAnimator、ObjectAnimator、ValueAnimator 这三种 Animator，它们其实是一种递进的关系：从左到右依次变得更加难用，也更加灵活。但我要说明一下，它们的性能是一样的，因为 ViewPropertyAnimator 和 ObjectAnimator 的内部实现其实都是 ValueAnimator，ObjectAnimator 更是本来就是 ValueAnimator 的子类，它们三个的性能并没有差别。它们的差别只是使用的便捷性以及功能的灵活性。所以在实际使用时候的选择，只要遵循一个原则就行：尽量用简单的。能用 View.animate() 实现就不用 ObjectAnimator，能用 ObjectAnimator 就不用 ValueAnimator。</p>`,52),r={href:"https://rengwuxian.com/ui-1-7/",target:"_blank",rel:"noopener noreferrer"};function k(d,m){const s=p("ExternalLinkIcon");return e(),o("div",null,[i,a("p",null,[n("本文转自 "),a("a",r,[n("https://rengwuxian.com/ui-1-7/"),c(s)]),n("，如有侵权，请联系删除。")])])}const b=t(u,[["render",k],["__file","zidingyiView1-7-shuxingdonghuaPropertyAnimation.html.vue"]]);export{b as default};
