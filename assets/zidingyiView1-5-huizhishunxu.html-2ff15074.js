import{_ as e,r as o,o as p,c,b as a,d as n,e as t,a as i}from"./app-e8f85126.js";const d={},l=i(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>前面几期讲的是「术」，是「用哪些 API 可以绘制什么内容」。到上一期为止，「术」已经讲完了，接下来要讲的是「道」，是「怎么去安排这些绘制」。</p><p>这期是「道」的第一期：绘制顺序。</p><p>Android 里面的绘制都是按顺序的，先绘制的内容会被后绘制的盖住。比如你在重叠的位置先画圆再画方，和先画方再画圆所呈现出来的结果肯定是不同的：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images52eb2279ly1fih13fd4o9j20f207fmxa.jpg" alt=""></p><p>而在实际的项目中，绘制内容相互遮盖的情况是很普遍的，那么怎么实现自己需要的遮盖关系，就是这期要讲的内容。</p><h2 id="_1-super-ondraw-前-or-后" tabindex="-1"><a class="header-anchor" href="#_1-super-ondraw-前-or-后" aria-hidden="true">#</a> 1 super.onDraw() 前 or 后？</h2><p>前几期我写的自定义绘制，全都是直接继承 <code>View</code> 类，然后重写它的 <code>onDraw()</code> 方法，把绘制代码写在里面，就像这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppView</span> <span class="token keyword">extends</span> <span class="token class-name">View</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 自定义绘制代码</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是自定义绘制最基本的形态：继承 <code>View</code> 类，在 <code>onDraw()</code> 中完全自定义它的绘制。</p><p>在之前的样例中，我把绘制代码全都写在了 <code>super.onDraw()</code> 的下面。不过其实，绘制代码写在 <code>super.onDraw()</code> 的上面还是下面都无所谓，甚至，你把 <code>super.onDraw()</code> 这行代码删掉都没关系，效果都是一样的——因为在 <code>View</code> 这个类里，<code>onDraw()</code> 本来就是空实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 在 View.java 的源码中，onDraw() 是空的</span>
<span class="token comment">// 所以直接继承 View 的类，它们的 super.onDraw() 什么也不会做</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">View</span> <span class="token keyword">implements</span> <span class="token class-name">Drawable<span class="token punctuation">.</span>Callback</span><span class="token punctuation">,</span>
        <span class="token class-name">KeyEvent<span class="token punctuation">.</span>Callback</span><span class="token punctuation">,</span> <span class="token class-name">AccessibilityEventSource</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token doc-comment comment">/**
     * Implement this to do your drawing.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">canvas</span> the canvas on which the background will be drawn
     */</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而，除了继承 <code>View</code> 类，自定义绘制更为常见的情况是，继承一个具有某种功能的控件，去重写它的 <code>onDraw()</code> ，在里面<strong>添加</strong>一些绘制代码，做出一个「进化版」的控件：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images52eb2279ly1fih1idlluej20jw075mxx.jpg" alt=""></p><blockquote><p>基于 <code>EditText</code>，在它的基础上增加了顶部的 Hint Text 和底部的字符计数。</p></blockquote><p>而这种基于已有控件的自定义绘制，就不能不考虑 <code>super.onDraw()</code> 了：你需要根据自己的需求，判断出你绘制的内容需要盖住控件原有的内容还是需要被控件原有的内容盖住，从而确定你的绘制代码是应该写在 <code>super.onDraw()</code> 的上面还是下面。</p><h3 id="写在-super-ondraw-的下面" tabindex="-1"><a class="header-anchor" href="#写在-super-ondraw-的下面" aria-hidden="true">#</a> 写在 super.onDraw() 的下面</h3><p>把绘制代码写在 <code>super.onDraw()</code> 的下面，由于绘制代码会在原有内容绘制结束之后才执行，所以绘制内容就会盖住控件原来的内容。</p><p>这是最为常见的情况：为控件增加点缀性内容。比如，在 Debug 模式下绘制出 ImageView 的图像尺寸信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppImageView</span> <span class="token keyword">extends</span> <span class="token class-name">ImageView</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">DEBUG</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 在 debug 模式下绘制出 drawable 的尺寸信息</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images52eb2279ly1fih2ihfxpxj207306q40e.jpg" alt=""></p><blockquote><p>这招很好用的，试过吗？</p></blockquote><p>当然，除此之外还有其他的很多用法，具体怎么用就取决于你的需求、经验和想象力了。</p><h3 id="写在-super-ondraw-的上面" tabindex="-1"><a class="header-anchor" href="#写在-super-ondraw-的上面" aria-hidden="true">#</a> 写在 super.onDraw() 的上面</h3><p>如果把绘制代码写在 <code>super.onDraw()</code> 的上面，由于绘制代码会执行在原有内容的绘制之前，所以绘制的内容会被控件的原内容盖住。</p><p>相对来说，这种用法的场景就会少一些。不过只是少一些而不是没有，比如你可以通过在文字的下层绘制纯色矩形来作为「强调色」：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTextView</span> <span class="token keyword">extends</span> <span class="token class-name">TextView</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 在 super.onDraw() 绘制文字之前，先绘制出被强调的文字的背景</span>

        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images52eb2279ly1fih2i89d63j20fk0abmyy.jpg" alt=""></p><h2 id="_2-dispatchdraw-绘制子-view-的方法" tabindex="-1"><a class="header-anchor" href="#_2-dispatchdraw-绘制子-view-的方法" aria-hidden="true">#</a> 2 dispatchDraw()：绘制子 View 的方法</h2><p>讲了这几期，到目前为止我只提到了 <code>onDraw()</code> 这一个绘制方法。但其实绘制方法不是只有一个的，而是有好几个，其中 <code>onDraw()</code> 只是负责自身主体内容绘制的。而有的时候，你想要的遮盖关系无法通过 <code>onDraw()</code> 来实现，而是需要通过别的绘制方法。</p><p>例如，你继承了一个 <code>LinearLayout</code>，重写了它的 <code>onDraw()</code> 方法，在 <code>super.onDraw()</code> 中插入了你自己的绘制代码，使它能够在内部绘制一些斑点作为点缀：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpottedLinearLayout</span> <span class="token keyword">extends</span> <span class="token class-name">LinearLayout</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 绘制斑点</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images52eb2279ly1fih3a2izowj205e06cmx3.jpg" alt=""></p><p>看起来没问题对吧？</p><p>但是你会发现，当你添加了子 View 之后，你的斑点不见了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token class-name">SpottedLinearLayout</span>
    android<span class="token operator">:</span>orientation<span class="token operator">=</span><span class="token string">&quot;vertical&quot;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token class-name">ImageView</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token class-name">TextView</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">/</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token class-name">SpottedLinearLayout</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images52eb2279ly1fih3qaplxjj20d508cn0c.jpg" alt=""></p><p>造成这种情况的原因是 Android 的绘制顺序：在绘制过程中，每一个 ViewGroup 会先调用自己的 <code>onDraw()</code> 来绘制完自己的主体之后再去绘制它的子 View。对于上面这个例子来说，就是你的 <code>LinearLayout</code> 会在绘制完斑点后再去绘制它的子 View。那么在子 View 绘制完成之后，先前绘制的斑点就被子 View 盖住了。</p><p>具体来讲，这里说的「绘制子 View」是通过另一个绘制方法的调用来发生的，这个绘制方法叫做：<code>dispatchDraw()</code>。也就是说，在绘制过程中，每个 View 和 ViewGroup 都会先调用 <code>onDraw()</code> 方法来绘制主体，再调用 <code>dispatchDraw()</code> 方法来绘制子 View。</p><blockquote><p>注：虽然 <code>View</code> 和 <code>ViewGroup</code> 都有 <code>dispatchDraw()</code> 方法，不过由于 View 是没有子 View 的，所以一般来说 <code>dispatchDraw()</code> 这个方法只对 <code>ViewGroup</code>（以及它的子类）有意义。</p></blockquote><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fihvzlek5ej30e304qwek.jpg" alt=""></p><p>回到刚才的问题：怎样才能让 <code>LinearLayout</code> 的绘制内容盖住子 View 呢？只要让它的绘制代码在子 View 的绘制之后再执行就好了。</p><h3 id="写在-super-dispatchdraw-的下面" tabindex="-1"><a class="header-anchor" href="#写在-super-dispatchdraw-的下面" aria-hidden="true">#</a> 写在 super.dispatchDraw() 的下面</h3><p>只要重写 <code>dispatchDraw()</code>，并在 <code>super.dispatchDraw()</code> 的下面写上你的绘制代码，这段绘制代码就会发生在子 View 的绘制之后，从而让绘制内容盖住子 View 了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpottedLinearLayout</span> <span class="token keyword">extends</span> <span class="token class-name">LinearLayout</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token comment">// 把 onDraw() 换成了 dispatchDraw()</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">dispatchDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchDraw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 绘制斑点</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fihvsxhkblj305l072glu.jpg" alt=""></p><blockquote><p>好萌的蝙蝠侠啊</p></blockquote><h3 id="写在-super-dispatchdraw-的上面" tabindex="-1"><a class="header-anchor" href="#写在-super-dispatchdraw-的上面" aria-hidden="true">#</a> 写在 super.dispatchDraw() 的上面</h3><p>同理，把绘制代码写在 <code>super.dispatchDraw()</code> 的上面，这段绘制就会在 <code>onDraw()</code> 之后、 <code>super.dispatchDraw()</code> 之前发生，也就是绘制内容会出现在主体内容和子 View 之间。而这个……</p><p>其实和前面 1.1 讲的，重写 <code>onDraw()</code> 并把绘制代码写在 <code>super.onDraw()</code> 之后的做法，效果是一样的。</p><p>能想明白为什么吧？图就不上了。</p><h2 id="_3-绘制过程简述" tabindex="-1"><a class="header-anchor" href="#_3-绘制过程简述" aria-hidden="true">#</a> 3 绘制过程简述</h2><p>绘制过程中最典型的两个部分是上面讲到的主体和子 View，但它们并不是绘制过程的全部。除此之外，绘制过程还包含一些其他内容的绘制。具体来讲，一个完整的绘制过程会依次绘制以下几个内容：</p><ol><li>背景</li><li>主体（<code>onDraw()</code>）</li><li>子 View（<code>dispatchDraw()</code>）</li><li>滑动边缘渐变和滑动条</li><li>前景</li></ol><p>一般来说，一个 View（或 ViewGroup）的绘制不会这几项全都包含，但必然逃不出这几项，并且一定会严格遵守这个顺序。例如通常一个 <code>LinearLayout</code> 只有背景和子 View，那么它会先绘制背景再绘制子 View；一个 <code>ImageView</code> 有主体，有可能会再加上一层半透明的前景作为遮罩，那么它的前景也会在主体之后进行绘制。需要注意，前景的支持是在 Android 6.0（也就是 API 23）才加入的；之前其实也有，不过只支持 <code>FrameLayout</code>，而直到 6.0 才把这个支持放进了 <code>View</code> 类里。</p><p>这其中的第 2、3 两步，前面已经讲过了；第 1 步——背景，它的绘制发生在一个叫 <code>drawBackground()</code> 的方法里，但这个方法是 <code>private</code> 的，不能重写，你如果要设置背景，只能用自带的 API 去设置（xml 布局文件的 <code>android:background</code> 属性以及 Java 代码的 <code>View.setBackgroundXxx()</code> 方法，这个每个人都用得很 6 了），而不能自定义绘制；而第 4、5 两步——滑动边缘渐变和滑动条以及前景，这两部分被合在一起放在了 <code>onDrawForeground()</code> 方法里，这个方法是可以重写的。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tKfTcly1fiiwb2nr63j30ga0bddgg.jpg" alt=""></p><p>滑动边缘渐变和滑动条可以通过 xml 的 <code>android:scrollbarXXX</code> 系列属性或 Java 代码的 <code>View.setXXXScrollbarXXX()</code> 系列方法来设置；前景可以通过 xml 的 <code>android:foreground</code> 属性或 Java 代码的 <code>View.setForeground()</code> 方法来设置。而重写 <code>onDrawForeground()</code> 方法，并在它的 <code>super.onDrawForeground()</code> 方法的上面或下面插入绘制代码，则可以控制绘制内容和滑动边缘渐变、滑动条以及前景的遮盖关系。</p><h2 id="_4-ondrawforeground" tabindex="-1"><a class="header-anchor" href="#_4-ondrawforeground" aria-hidden="true">#</a> 4 onDrawForeground()</h2><blockquote><p>首先，再说一遍，这个方法是 API 23 才引入的，所以在重写这个方法的时候要确认你的 <code>minSdk</code> 达到了 23，不然低版本的手机装上你的软件会没有效果。</p></blockquote><p>在 <code>onDrawForeground()</code> 中，会依次绘制滑动边缘渐变、滑动条和前景。所以如果你重写 <code>onDrawForeground()</code> ：</p><h3 id="写在-super-ondrawforeground-的下面" tabindex="-1"><a class="header-anchor" href="#写在-super-ondrawforeground-的下面" aria-hidden="true">#</a> 写在 super.onDrawForeground() 的下面</h3><p>如果你把绘制代码写在了 <code>super.onDrawForeground()</code> 的下面，绘制代码会在滑动边缘渐变、滑动条和前景之后被执行，那么绘制内容将会盖住滑动边缘渐变、滑动条和前景。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppImageView</span> <span class="token keyword">extends</span> <span class="token class-name">ImageView</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDrawForeground</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDrawForeground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 绘制「New」标签</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 使用半透明的黑色作为前景，这是一种很常见的处理 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token class-name">AppImageView</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    android<span class="token operator">:</span>foreground<span class="token operator">=</span><span class="token string">&quot;#88000000&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fihyhundspj30g008ggma.jpg" alt=""></p><blockquote><p>左上角的标签并没有被黑色遮罩盖住，而是保持了原有的颜色。</p></blockquote><h3 id="写在-super-ondrawforeground-的上面" tabindex="-1"><a class="header-anchor" href="#写在-super-ondrawforeground-的上面" aria-hidden="true">#</a> 写在 super.onDrawForeground() 的上面</h3><p>如果你把绘制代码写在了 <code>super.onDrawForeground()</code> 的上面，绘制内容就会在 <code>dispatchDraw()</code> 和 <code>super.onDrawForeground()</code> 之间执行，那么绘制内容会盖住子 View，但被滑动边缘渐变、滑动条以及前景盖住：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppImageView</span> <span class="token keyword">extends</span> <span class="token class-name">ImageView</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDrawForeground</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 绘制「New」标签</span>

       <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDrawForeground</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tNc79ly1fihyqsu2x3j30fn084js1.jpg" alt=""></p><blockquote><p>由于被半透明黑色遮罩盖住，左上角的标签明显变暗了。</p></blockquote><p>这种写法，和前面 2.1 讲的，重写 <code>dispatchDraw()</code> 并把绘制代码写在 <code>super.dispatchDraw()</code> 的下面的效果是一样的：绘制内容都会盖住子 View，但被滑动边缘渐变、滑动条以及前景盖住。</p><h3 id="想在滑动边缘渐变、滑动条和前景之间插入绘制代码" tabindex="-1"><a class="header-anchor" href="#想在滑动边缘渐变、滑动条和前景之间插入绘制代码" aria-hidden="true">#</a> 想在滑动边缘渐变、滑动条和前景之间插入绘制代码？</h3><p>很简单：不行。</p><p>虽然这三部分是依次绘制的，但它们被一起写进了 <code>onDrawForeground()</code> 方法里，所以你要么把绘制内容插在它们之前，要么把绘制内容插在它们之后。而想往它们之间插入绘制，是做不到的。</p><h2 id="_5-draw-总调度方法" tabindex="-1"><a class="header-anchor" href="#_5-draw-总调度方法" aria-hidden="true">#</a> 5 draw() 总调度方法</h2><p>除了 <code>onDraw()</code> <code>dispatchDraw()</code> 和 <code>onDrawForeground()</code> 之外，还有一个可以用来实现自定义绘制的方法： <code>draw()</code>。</p><p>draw() 是绘制过程的总调度方法。一个 View 的整个绘制过程都发生在 <code>draw()</code> 方法里。前面讲到的背景、主体、子 View 、滑动相关以及前景的绘制，它们其实都是在 <code>draw()</code> 方法里的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// View.java 的 draw() 方法的简化版大致结构（是大致结构，不是源码哦）：</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token function">drawBackground</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制背景（不能重写）</span>
    <span class="token function">onDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制主体</span>
    <span class="token function">dispatchDraw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制子 View</span>
    <span class="token function">onDrawForeground</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 绘制滑动相关和前景</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码可以看出，<code>onDraw()</code> <code>dispatchDraw()</code> <code>onDrawForeground()</code> 这三个方法在 <code>draw()</code> 中被依次调用，因此它们的遮盖关系也就像前面所说的——<code>dispatchDraw()</code> 绘制的内容盖住 <code>onDraw()</code> 绘制的内容；<code>onDrawForeground()</code> 绘制的内容盖住 <code>dispatchDraw()</code> 绘制的内容。而在它们的外部，则是由 <code>draw()</code> 这个方法作为总的调度。所以，你也可以重写 <code>draw()</code> 方法来做自定义的绘制。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tKfTcly1fiix28rb6mj30ru0c8jsb.jpg" alt=""></p><h3 id="写在-super-draw-的下面" tabindex="-1"><a class="header-anchor" href="#写在-super-draw-的下面" aria-hidden="true">#</a> 写在 super.draw() 的下面</h3><p>由于 <code>draw()</code> 是总调度方法，所以如果把绘制代码写在 <code>super.draw()</code> 的下面，那么这段代码会在其他所有绘制完成之后再执行，也就是说，它的绘制内容会盖住其他的所有绘制内容。</p><p>它的效果和重写 <code>onDrawForeground()</code>，并把绘制代码写在 <code>super.onDrawForeground()</code> 下面时的效果是一样的：都会盖住其他的所有内容。</p><blockquote><p>当然了，虽说它们效果一样，但如果你既重写 <code>draw()</code> 又重写 <code>onDrawForeground()</code> ，那么 <code>draw()</code> 里的内容还是会盖住 <code>onDrawForeground()</code> 里的内容的。所以严格来讲，它们的效果还是有一点点不一样的。</p><p>但这属于抬杠……</p></blockquote><h3 id="写在-super-draw-的上面" tabindex="-1"><a class="header-anchor" href="#写在-super-draw-的上面" aria-hidden="true">#</a> 写在 super.draw() 的上面</h3><p>同理，由于 <code>draw()</code> 是总调度方法，所以如果把绘制代码写在 <code>super.draw()</code> 的上面，那么这段代码会在其他所有绘制之前被执行，所以这部分绘制内容会被其他所有的内容盖住，包括背景。是的，背景也会盖住它。</p><p>是不是觉得没用？觉得怎么可能会有谁想要在背景的下面绘制内容？别这么想，有的时候它还真的有用。</p><p>例如我有一个 <code>EditText</code>：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tKfTcly1fii503vailj30dz03ajrd.jpg" alt=""></p><p>它下面的那条横线，是 <code>EditText</code> 的背景。所以如果我想给这个 <code>EditText</code> 加一个绿色的底，我不能使用给它设置绿色背景色的方式，因为这就相当于是把它的背景替换掉，从而会导致下面的那条横线消失：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token class-name">EditText</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    android<span class="token operator">:</span>background<span class="token operator">=</span><span class="token string">&quot;#66BB6A&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tKfTcly1fii56ecfwqj30a602kq2x.jpg" alt=""></p><blockquote><p><code>EditText</code>：我到底是个 <code>EditText</code> 还是个 <code>TextView</code>？傻傻分不清楚。</p></blockquote><p>在这种时候，你就可以重写它的 <code>draw()</code> 方法，然后在 <code>super.draw()</code> 的上方插入代码，以此来在所有内容的底部涂上一片绿色：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AppEditText</span> <span class="token keyword">extends</span> <span class="token class-name">EditText</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        canvas<span class="token punctuation">.</span><span class="token function">drawColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token function">parseColor</span><span class="token punctuation">(</span><span class="token string">&quot;#66BB6A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 涂上绿色</span>

        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>canvas<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tKfTcly1fii53vch7mj30ag02l3yk.jpg" alt=""></p><p>当然，这种用法并不常见，事实上我也并没有在项目中写过这样的代码。但我想说的是，我们作为工程师，是无法预知将来会遇到怎样的需求的。我们能做的只能是尽量地去多学习一些、多掌握一些，尽量地了解我们能够做什么、怎么做，然后在需求到来的时候，就可以多一些自如，少一些束手无策。</p><h2 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h2><p>关于绘制方法，有两点需要注意一下：</p><ol><li>出于效率的考虑，<code>ViewGroup</code> 默认会绕过 <code>draw()</code> 方法，换而直接执行 <code>dispatchDraw()</code>，以此来简化绘制流程。所以如果你自定义了某个 <code>ViewGroup</code> 的子类（比如 <code>LinearLayout</code>）并且需要在它的除 <code>dispatchDraw()</code> 以外的任何一个绘制方法内绘制内容，你<strong>可能</strong>会需要调用 <code>View.setWillNotDraw(false)</code> 这行代码来切换到完整的绘制流程（是「可能」而不是「必须」的原因是，有些 ViewGroup 是已经调用过 <code>setWillNotDraw(false)</code> 了的，例如 <code>ScrollView</code>）。</li><li>有的时候，一段绘制代码写在不同的绘制方法中效果是一样的，这时你可以选一个自己喜欢或者习惯的绘制方法来重写。但有一个例外：如果绘制代码既可以写在 <code>onDraw()</code> 里，也可以写在其他绘制方法里，那么优先写在 <code>onDraw()</code> ，因为 Android 有相关的优化，可以在不需要重绘的时候自动跳过 <code>onDraw()</code> 的重复执行，以提升开发效率。享受这种优化的只有 <code>onDraw()</code> 一个方法。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>今天的内容就是这些：使用不同的绘制方法，以及在重写的时候把绘制代码放在 <code>super.绘制方法()</code> 的上面或下面不同的位置，以此来实现需要的遮盖关系。下面用一张图和一个表格总结一下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tKfTcly1fiix28rb6mj30ru0c8jsb.jpg" alt=""></p><blockquote><p>嗯，上面这张图在前面已经贴过了，不用比较了完全一样的。</p></blockquote><p><img src="https://raw.githubusercontent.com/shug666/image/main/images006tKfTcly1fii5jk7l19j30q70e0di5.jpg" alt=""></p><p>另外别忘了上面提到的那两个注意事项：</p><ol><li>在 <code>ViewGroup</code> 的子类中重写除 <code>dispatchDraw()</code> 以外的绘制方法时，可能需要调用 <code>setWillNotDraw(false)</code>；</li><li>在重写的方法有多个选择时，优先选择 <code>onDraw()</code>。</li></ol>`,109),u={href:"https://rengwuxian.com/ui-1-5/",target:"_blank",rel:"noopener noreferrer"};function r(k,v){const s=o("ExternalLinkIcon");return p(),c("div",null,[l,a("p",null,[n("本文转自 "),a("a",u,[n("https://rengwuxian.com/ui-1-5/"),t(s)]),n("，如有侵权，请联系删除。")])])}const w=e(d,[["render",r],["__file","zidingyiView1-5-huizhishunxu.html.vue"]]);export{w as default};
