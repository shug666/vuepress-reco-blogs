import{_ as p,r as c,o,c as i,b as s,d as n,e as t,a as e}from"./app-e8f85126.js";const l={},u=e(`<h2 id="用法" tabindex="-1"><a class="header-anchor" href="#用法" aria-hidden="true">#</a> 用法</h2><p>传入Context参数与想要判断是否位于前台的App的包名,会返回ture或者false表示App是否位于前台</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//六种方法任选其一</span>

<span class="token comment">//使用方法一</span>
<span class="token class-name">Boolean</span> isForeground <span class="token operator">=</span> <span class="token class-name">BackgroundUtil</span><span class="token punctuation">.</span><span class="token function">getRunningTask</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用方法二</span>
<span class="token class-name">Boolean</span> isForeground <span class="token operator">=</span> <span class="token class-name">BackgroundUtil</span><span class="token punctuation">.</span><span class="token function">getRunningAppProcesses</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用方法三</span>
<span class="token class-name">Boolean</span> isForeground <span class="token operator">=</span> <span class="token class-name">BackgroundUtil</span><span class="token punctuation">.</span><span class="token function">getApplicationValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用方法四</span>
<span class="token class-name">Boolean</span> isForeground <span class="token operator">=</span> <span class="token class-name">BackgroundUtil</span><span class="token punctuation">.</span><span class="token function">queryUsageStats</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用方法五</span>
<span class="token class-name">Boolean</span> isForeground <span class="token operator">=</span> <span class="token class-name">BackgroundUtil</span><span class="token punctuation">.</span><span class="token function">getFromAccessibilityService</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//使用方法六</span>
<span class="token class-name">Boolean</span> isForeground <span class="token operator">=</span> <span class="token class-name">BackgroundUtil</span><span class="token punctuation">.</span><span class="token function">getLinuxCoreInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> packageName<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六种方法的区别" tabindex="-1"><a class="header-anchor" href="#六种方法的区别" aria-hidden="true">#</a> 六种方法的区别</h3><table><thead><tr><th>方法</th><th>判断原理</th><th>需要权限</th><th>可以判断其他应用位于前台</th><th>特点</th></tr></thead><tbody><tr><td>方法一</td><td>RunningTask</td><td>否</td><td>Android4.0系列可以,5.0以上机器不行</td><td>5.0此方法被废弃</td></tr><tr><td>方法二</td><td>RunningProcess</td><td>否</td><td>当App存在后台常驻的Service时失效</td><td>无</td></tr><tr><td>方法三</td><td>ActivityLifecycleCallbacks</td><td>否</td><td>否</td><td>简单有效,代码最少</td></tr><tr><td>方法四</td><td>UsageStatsManager</td><td>是</td><td>是</td><td>需要用户手动授权</td></tr><tr><td>方法五</td><td>通过Android无障碍功能实现</td><td>否</td><td>是</td><td>需要用户手动授权</td></tr><tr><td>方法六</td><td>读取/proc目录下的信息</td><td>否</td><td>是</td><td>当proc目录下文件夹过多时,过多的IO操作会引起耗时</td></tr><tr><td>方法七</td><td></td><td></td><td></td><td></td></tr><tr><td>使用 ProcessLifecycleOwner 监听应用程序的生命周期</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>| 否 | 是 | 使用Jetpack组件 |</p><h2 id="方法一-通过runningtask" tabindex="-1"><a class="header-anchor" href="#方法一-通过runningtask" aria-hidden="true">#</a> 方法一：通过RunningTask</h2><p><strong>原理</strong></p><blockquote><p>当一个App处于前台的时候，会处于RunningTask的这个栈的栈顶，所以我们可以取出RunningTask的栈顶的任务进程，看他与我们的想要判断的App的包名是否相同，来达到效果</p></blockquote><p><strong>缺点</strong></p><blockquote><p>getRunningTask方法在Android5.0以上已经被废弃，只会返回自己和系统的一些不敏感的task，不再返回其他应用的task，用此方法来判断自身App是否处于后台，仍然是有效的，但是无法判断其他应用是否位于前台，因为不再能获取信息</p></blockquote><h2 id="方法二-通过runningprocess" tabindex="-1"><a class="header-anchor" href="#方法二-通过runningprocess" aria-hidden="true">#</a> 方法二：通过RunningProcess</h2><p><strong>原理</strong></p><blockquote><p>通过runningProcess获取到一个当前正在运行的进程的List，我们遍历这个List中的每一个进程，判断这个进程的一个importance 属性是否是前台进程，并且包名是否与我们判断的APP的包名一样，如果这两个条件都符合，那么这个App就处于前台</p></blockquote><p><strong>缺点</strong>：</p><blockquote><p>在聊天类型的App中，常常需要常驻后台来不间断的获取服务器的消息，这就需要我们把Service设置成START_STICKY，kill 后会被重启（等待5秒左右）来保证Service常驻后台。如果Service设置了这个属性，这个App的进程就会被判断是前台，代码上的表现就是appProcess.importance的值永远是 ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND，这样就永远无法判断出到底哪个是前台了。</p></blockquote><h2 id="方法三-通过activitylifecyclecallbacks" tabindex="-1"><a class="header-anchor" href="#方法三-通过activitylifecyclecallbacks" aria-hidden="true">#</a> 方法三：通过ActivityLifecycleCallbacks</h2><p><strong>原理</strong></p><p>AndroidSDK14在Application类里增加了ActivityLifecycleCallbacks，我们可以通过这个Callback拿到App所有Activity的生命周期回调。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ActivityLifecycleCallbacks</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token function">onActivityCreated</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">onActivityStarted</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">onActivityResumed</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">onActivityPaused</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">onActivityStopped</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">onActivitySaveInstanceState</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">,</span> <span class="token class-name">Bundle</span> outState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">void</span> <span class="token function">onActivityDestroyed</span><span class="token punctuation">(</span><span class="token class-name">Activity</span> activity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>知道这些信息，我们就可以用更官方的办法来解决问题，当然还是利用方案二里的Activity生命周期的特性，我们只需要在Application的onCreate()里去注册上述接口，然后由Activity回调回来运行状态即可。</p><p>可能还有人在纠结，我用back键切到后台和用Home键切到后台，一样吗？以上方法适用吗？在Android应用开发中一般认为back键是可以捕获的，而Home键是不能捕获的（除非修改framework）,但是上述方法从Activity生命周期着手解决问题，虽然这两种方式的Activity生命周期并不相同，但是二者都会执行onStop（）；所以并不关心到底是触发了哪个键切入后台的。另外,Application是否被销毁,都不会影响判断的正确性</p><h2 id="方法四-通过使用usagestatsmanager获取" tabindex="-1"><a class="header-anchor" href="#方法四-通过使用usagestatsmanager获取" aria-hidden="true">#</a> 方法四:通过使用UsageStatsManager获取</h2><p><strong>原理</strong></p><blockquote><p>通过使用UsageStatsManager获取，此方法是Android5.0之后提供的新API，可以获取一个时间段内的应用统计信息，但是必须满足一下要求</p></blockquote><p><strong>使用前提</strong></p><p>1.此方法只在android5.0以上有效</p><p>2.AndroidManifest中加入此权限</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/tools<span class="token punctuation">&quot;</span></span>    
 <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.PACKAGE_USAGE_STATS<span class="token punctuation">&quot;</span></span>   
  <span class="token attr-name"><span class="token namespace">tools:</span>ignore</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>ProtectedPermissions<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.打开手机设置，点击安全-高级，在有权查看使用情况的应用中，为这个App打上勾</p><p><img src="https://img-blog.csdnimg.cn/img_convert/80cb0d0c2d6ba12aac0e1d07e72799c7.png" alt="enter image description here"></p><h2 id="方法五-通过android自带的无障碍功能" tabindex="-1"><a class="header-anchor" href="#方法五-通过android自带的无障碍功能" aria-hidden="true">#</a> 方法五：通过Android自带的无障碍功能</h2>`,32),r={href:"https://link.jianshu.com/?t=http://weibo.com/hatewx?refer_flag=1005050005_",target:"_blank",rel:"noopener noreferrer"},d={href:"https://link.jianshu.com/?t=http://effmx.com/articles/tong-guo-android-fu-zhu-gong-neng-accessibility-service-jian-ce-ren-yi-qian-tai-jie-mian/",target:"_blank",rel:"noopener noreferrer"},k=e('<p>此方法无法直观的通过下拉通知视图来进行前后台的观察，请到LogCat中进行观察即可，以下是LogCat中打印的信息</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b7a3b149328e11409a3d1f3bca573299.png" alt=""></p><p><strong>原理</strong></p><blockquote><p>Android 辅助功能(AccessibilityService) 为我们提供了一系列的事件回调，帮助我们指示一些用户界面的状态变化。 我们可以派生辅助功能类，进而对不同的 AccessibilityEvent 进行处理。 同样的，这个服务就可以用来判断当前的前台应用</p></blockquote><p><strong>优势</strong></p><blockquote><ol><li>AccessibilityService 有非常广泛的 ROM 覆盖，特别是非国产手机，从 Android API Level 8(Android 2.2) 到 Android Api Level 23(Android 6.0)</li></ol></blockquote><ol><li>AccessibilityService 不再需要轮询的判断当前的应用是不是在前台，系统会在窗口状态发生变化的时候主动回调，耗时和资源消耗都极小</li><li>不需要权限请求</li><li>它是一个稳定的方法，与 “方法6”读取 /proc 目录不同，它并非利用 Android 一些设计上的漏洞，可以长期使用的可能很大</li><li>可以用来判断任意应用甚至 Activity, PopupWindow, Dialog 对象是否处于前台</li></ol><p><strong>劣势</strong></p><blockquote><ol><li>需要要用户开启辅助功能</li></ol></blockquote><ol><li>辅助功能会伴随应用被“强行停止”而剥夺</li></ol><h2 id="方法六-读取linux系统内核保存在-proc目录下的process进程信息" tabindex="-1"><a class="header-anchor" href="#方法六-读取linux系统内核保存在-proc目录下的process进程信息" aria-hidden="true">#</a> 方法六：读取Linux系统内核保存在/proc目录下的process进程信息</h2>',11),v={href:"https://link.jianshu.com/?t=https://github.com/jaredrummler/AndroidProcesses",target:"_blank",rel:"noopener noreferrer"},m=e(`<p><strong>原理</strong></p><blockquote><p>无意中看到乌云上有人提的一个漏洞，Linux系统内核会把process进程信息保存在/proc目录下，Shell命令去获取的他，再根据进程的属性判断是否为前台</p></blockquote><p><strong>优点</strong></p><blockquote><ol><li>不需要任何权限</li></ol></blockquote><ol><li>可以判断任意一个应用是否在前台，而不局限在自身应用</li></ol><p><strong>缺点</strong></p><blockquote><ol><li>当/proc下文件夹过多时,此方法是耗时操作</li></ol></blockquote><p><strong>用法</strong><br> 获取一系列正在运行的App的进程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AndroidAppProcess</span><span class="token punctuation">&gt;</span></span> processes <span class="token operator">=</span> <span class="token class-name">ProcessManager</span><span class="token punctuation">.</span><span class="token function">getRunningAppProcesses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>获取任一正在运行的App进程的详细信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">AndroidAppProcess</span> process <span class="token operator">=</span> processes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> processName <span class="token operator">=</span> process<span class="token punctuation">.</span>name<span class="token punctuation">;</span>

<span class="token class-name">Stat</span> stat <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> pid <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">getPid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> parentProcessId <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">ppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> startTime <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">stime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> policy <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">policy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> state <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Statm</span> statm <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">statm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> totalSizeOfProcess <span class="token operator">=</span> statm<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">long</span> residentSetSize <span class="token operator">=</span> statm<span class="token punctuation">.</span><span class="token function">getResidentSetSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">PackageInfo</span> packageInfo <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">getPackageInfo</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> appName <span class="token operator">=</span> packageInfo<span class="token punctuation">.</span>applicationInfo<span class="token punctuation">.</span><span class="token function">loadLabel</span><span class="token punctuation">(</span>pm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断是否在前台</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ProcessManager</span><span class="token punctuation">.</span><span class="token function">isMyProcessInTheForeground</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// do stuff</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取一系列正在运行的App进程的详细信息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ActivityManager<span class="token punctuation">.</span>RunningAppProcessInfo</span><span class="token punctuation">&gt;</span></span> processes <span class="token operator">=</span> <span class="token class-name">ProcessManager</span><span class="token punctuation">.</span><span class="token function">getRunningAppProcessInfo</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="方法七-使用-processlifecycleowner-监听应用程序的生命周期" tabindex="-1"><a class="header-anchor" href="#方法七-使用-processlifecycleowner-监听应用程序的生命周期" aria-hidden="true">#</a> 方法七：使用 ProcessLifecycleOwner 监听应用程序的生命周期</h2><p>具有生命周期的组件除了 Activity、Fragment 和 Service 外，还有 Application。ProcessLifecycleOwner 就是用来监听整个应用程序的生命周期情况。</p><p>具体使用方法：</p><p><strong>第一步：添加依赖项：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>implementation <span class="token string">&quot;androidx.lifecycle:lifecycle-process:2.2.0&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>第二步：定义一个 ApplicationObserver，实现 LifecycleObserver 接口。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationObserver</span> <span class="token keyword">implements</span> <span class="token class-name">LifecycleObserver</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 在应用程序的整个生命周期中只会被调用一次
     */</span>
    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_CREATE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;Lifecycle.Event.ON_CREATE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_START</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;Lifecycle.Event.ON_START&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_RESUME</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onResume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;Lifecycle.Event.ON_RESUME&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_PAUSE</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;Lifecycle.Event.ON_PAUSE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_STOP</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;Lifecycle.Event.ON_STOP&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 永远不会被调用，系统不会分发调用 ON_DESTROY 事件
     */</span>
    <span class="token annotation punctuation">@OnLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_DESTROY</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span><span class="token string">&quot;Lifecycle.Event.ON_DESTROY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>第三步：在 Application 中关联 ApplicationObserver。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ProcessLifecycleOwner</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项：</strong></p><ol><li>ProcessLifecycleOwner 是针对整个应用程序的监听，与 Activity 的数量无关。</li><li>Lifecycle.Event.ON_CREATE 只会被调用一次，而 Lifecycle.Event.ON_DESTROY 永远不会被调用。</li><li>Lifecycle.Event.ON_PAUSE 和 Lifecycle.Event.ON_STOP 的调用会有一定的延后，因为系统需要为“屏幕旋转，由于配置发生变化而导致的 Activity 重新创建” 的情况预留一些时间。</li></ol>`,26),g={href:"https://blog.csdn.net/cpcpcp123/article/details/115609614",target:"_blank",rel:"noopener noreferrer"};function b(f,y){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,s("p",null,[n("非常感谢"),s("a",r,[n("@EffectiveMatrix"),t(a)]),n("大神带来的新的判断前后台的方法")]),s("p",null,[n("此方法属于他原创，具体的博文参照这里"),s("a",d,[n("http://effmx.com/articles/tong-guo-android-fu-zhu-gong-neng-accessibility-service-jian-ce-ren-yi-qian-tai-jie-mian/"),t(a)])]),k,s("p",null,[n("此方法并非我原创，原作者是国外的大神，"),s("a",v,[n("GitHub项目在这里"),t(a)]),n("，也一并加入到工程中，供大家做全面的参考选择")]),m,s("p",null,[n("本文转自 "),s("a",g,[n("https://blog.csdn.net/cpcpcp123/article/details/115609614"),t(a)]),n("，如有侵权，请联系删除。")])])}const A=p(l,[["render",b],["__file","AndroidpanduanAppweiyuqiantaihuozhehoutaide6zhongfangfa.html.vue"]]);export{A as default};
