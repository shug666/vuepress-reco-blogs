import{_ as p,r as e,o,c,b as s,d as n,e as l,a}from"./app-e8f85126.js";const i={},u=a(`<h2 id="文件" tabindex="-1"><a class="header-anchor" href="#文件" aria-hidden="true">#</a> 文件</h2><h3 id="什么是aidl" tabindex="-1"><a class="header-anchor" href="#什么是aidl" aria-hidden="true">#</a> 什么是AIDL</h3><p>AIDL 是Android Interface Definition Language (Android 接口定义语言)的缩写。</p><h3 id="创建aidl-文件" tabindex="-1"><a class="header-anchor" href="#创建aidl-文件" aria-hidden="true">#</a> 创建AIDL 文件</h3><p>Android Studio本身支持创建AIDL文件，先创建名为IMyServer 的AIDL文件。<br> 在Module上右键单击：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-e132c7af2975b4e3.png" alt=""></p><p>输入名字</p><p>确定后生成 IMyServer.aidl文件：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-e0d53300bdda29ec.png" alt=""></p><p>可以看出，由于是第一次创建AIDL文件，因此还创建了aidl文件夹并添加了包名作为目录结构，其总体结构如下：</p><blockquote><p>src/main/aidl/com/fish/myapplication/IMyServer.aidl</p></blockquote><p>其中/aidl目录与/java、/res目录平级，都在main目录下：</p><blockquote><p>app/src/main/<br> app/src/aidl/<br> app/src/res</p></blockquote><h3 id="aidl-文件内容" tabindex="-1"><a class="header-anchor" href="#aidl-文件内容" aria-hidden="true">#</a> AIDL 文件内容</h3><p>生成IMyServer.aidl内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//包名</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">IMyServer</span> <span class="token punctuation">{</span>
    <span class="token comment">//aidl 支持的基本数据类型</span>
    <span class="token comment">//默认生成的方法，可以去掉</span>
    <span class="token keyword">void</span> <span class="token function">basicTypes</span><span class="token punctuation">(</span><span class="token keyword">int</span> anInt<span class="token punctuation">,</span> <span class="token keyword">long</span> aLong<span class="token punctuation">,</span> <span class="token keyword">boolean</span> aBoolean<span class="token punctuation">,</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">,</span>
            <span class="token keyword">double</span> aDouble<span class="token punctuation">,</span> <span class="token class-name">String</span> aString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中basicTypes(xx)方法是自动生成的，用来指导我们如何编写方法，可以去掉。<br> IMyServer 接口里声明的方法为Server端暴露给外部调用的方法，先为Server添加方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token comment">//包名</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">IMyServer</span> <span class="token punctuation">{</span>
    <span class="token comment">//只有一个参数，并且没有返回值</span>
    <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">//有两个参数，并且返回int</span>
    <span class="token keyword">int</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后编译工程。</p><h3 id="aidl-编译产物" tabindex="-1"><a class="header-anchor" href="#aidl-编译产物" aria-hidden="true">#</a> AIDL 编译产物</h3><p>编译成功后，切换到Project模式，搜索IMyServer.java：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-69a296fe9c2614a0.png" alt=""></p><p>可以看出，编写的AIDL文件，最终根据一定的规则映射生成Java文件，接着来看看IMyServer.java内容。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/*
 * This file is auto-generated.  DO NOT MODIFY.
 */</span>
<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMyServer</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IInterface</span>
<span class="token punctuation">{</span>
  <span class="token comment">//默认类实现接口，可以不用关注</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Default</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span>
  <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> word<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> word<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>


  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Stub</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Binder</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span>
  <span class="token punctuation">{</span>
    <span class="token comment">//描述符</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token constant">DESCRIPTOR</span> <span class="token operator">=</span> <span class="token string">&quot;com.fish.myapplication.IMyServer&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token comment">//调用Binder方法，将Binder与IInterface 关联起来</span>
      <span class="token comment">//也就是说Binder持有IInterface引用</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attachInterface</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//通过Binder找到关联的IInterface</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span> <span class="token function">asInterface</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> obj<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IInterface</span> iin <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">queryLocalInterface</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iin<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>iin <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//IBinder引用与调用者同一进程，直接返回IInterface</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span><span class="token punctuation">)</span>iin<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">//不同进程则返回Proxy，并传入Binder</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer<span class="token punctuation">.</span>Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//返回自身</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//重写onTransact(xx)</span>
    <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTransact</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> data<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> reply<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span>
    <span class="token punctuation">{</span>
      <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> descriptor <span class="token operator">=</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">;</span>
      <span class="token keyword">switch</span> <span class="token punctuation">(</span>code<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token comment">//根据code，调用不同的方法</span>
        <span class="token keyword">case</span> <span class="token constant">INTERFACE_TRANSACTION</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
          reply<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token class-name">TRANSACTION_say</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
          data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> _arg0<span class="token punctuation">;</span>
          <span class="token comment">//反序列化，读取数据</span>
          _arg0 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>_arg0<span class="token punctuation">)</span><span class="token punctuation">;</span>
          reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">case</span> <span class="token class-name">TRANSACTION_tell</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
          data<span class="token punctuation">.</span><span class="token function">enforceInterface</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> _arg0<span class="token punctuation">;</span>
          _arg0 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> _arg1<span class="token punctuation">;</span>
          _arg1 <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> _result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span>_arg0<span class="token punctuation">,</span> _arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
          reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//写入回复</span>
          reply<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>_result<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTransact</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> data<span class="token punctuation">,</span> reply<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span>
    <span class="token punctuation">{</span>
      <span class="token keyword">private</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> mRemote<span class="token punctuation">;</span>
      <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> remote<span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        mRemote <span class="token operator">=</span> remote<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span> <span class="token function">asBinder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mRemote<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> <span class="token function">getInterfaceDescriptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">DESCRIPTOR</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> word<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span>
      <span class="token punctuation">{</span>
        <span class="token comment">//构造序列化数据</span>
        <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _data <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _reply <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//写入序列化</span>
          _data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//mRemote为远程的IBinder</span>
          <span class="token keyword">boolean</span> _status <span class="token operator">=</span> mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token class-name">Stub<span class="token punctuation">.</span>TRANSACTION_say</span><span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token comment">//阻塞等待transact(xx)调用结果</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_status <span class="token operator">&amp;&amp;</span> <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span> <span class="token punctuation">{</span>
          _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      <span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> word<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span>
      <span class="token punctuation">{</span>
        <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _data <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span> _reply <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcel</span><span class="token punctuation">.</span><span class="token function">obtain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> _result<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          _data<span class="token punctuation">.</span><span class="token function">writeInterfaceToken</span><span class="token punctuation">(</span><span class="token constant">DESCRIPTOR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          _data<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
          _data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">boolean</span> _status <span class="token operator">=</span> mRemote<span class="token punctuation">.</span><span class="token function">transact</span><span class="token punctuation">(</span><span class="token class-name">Stub<span class="token punctuation">.</span>TRANSACTION_tell</span><span class="token punctuation">,</span> _data<span class="token punctuation">,</span> _reply<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>_status <span class="token operator">&amp;&amp;</span> <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          _reply<span class="token punctuation">.</span><span class="token function">readException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          _result <span class="token operator">=</span> _reply<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">finally</span> <span class="token punctuation">{</span>
          _reply<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          _data<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> _result<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span> sDefaultImpl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">TRANSACTION_say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span><span class="token punctuation">.</span><span class="token constant">FIRST_CALL_TRANSACTION</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">TRANSACTION_tell</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>IBinder</span><span class="token punctuation">.</span><span class="token constant">FIRST_CALL_TRANSACTION</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">setDefaultImpl</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span> impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">.</span>sDefaultImpl <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> impl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">.</span>sDefaultImpl <span class="token operator">=</span> impl<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span></span>IMyServer</span> <span class="token function">getDefaultImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Stub<span class="token punctuation">.</span>Proxy</span><span class="token punctuation">.</span>sDefaultImpl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">//声明的公共方法</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> word<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> word<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>RemoteException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,24),k={href:"https://www.jianshu.com/p/9927f04a36d0",target:"_blank",rel:"noopener noreferrer"},r=a(`<p>提取重点分析上面的代码。<br><strong>定义接口</strong><br> 定义了IMyServer 接口，该接口里的方法就是根据IMyServer.aidl里声明的方法生成的。</p><p><strong>两个静态类</strong><br> Stub是抽象类。<br> 继承了Binder，重写了onTransact(xx)方法。<br> 实现了IMyServer 接口，并没有实现里面的方法，这些方法待服务端实现。<br> 当onTransact(xx)被调用的时候，根据不同的code调用相应的方法。<br> 在上篇文章里分析的时候，onTransact(xx)与IMyServer 接口是分离的，我们需要手动在onTransact(xx)里调用IMyServer 方法。而此时Stub将两者结合起来了，完成了服务端与Binder驱动的联动。</p><p>Proxy虽然没有继承自Binder，但是持有IBinder引用：mRemote。<br> 实现了IMyServer，并且实现了其所有方法，每个方法里最终都通过mRemote调用transact(xx)完成了客户端与Binder驱动联动。</p><p>至此，通过这两个类，分别完成了服务端、客户端与Binder的联动。<br> 继续引用上篇的图：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-c622733747a59b67.png" alt=""></p><p>可以看出，有了AIDL自动生成的类后：</p><blockquote><p>1、繁杂的switch case 不用自己编写了<br> 2、序列化反序列化也不用编写了<br> 3、不再需要编写transact(xx)与onTransact(xx)了</p></blockquote><p>极大解放了生产力。</p><h2 id="如何使用aidl" tabindex="-1"><a class="header-anchor" href="#如何使用aidl" aria-hidden="true">#</a> 如何使用AIDL</h2><p>既然IMyServer.java 已经生成了，继续来看看如何使用它。</p><h3 id="编写server端业务" tabindex="-1"><a class="header-anchor" href="#编写server端业务" aria-hidden="true">#</a> 编写Server端业务</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">&quot;IPC&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//构造内部类</span>
    <span class="token keyword">private</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span> stub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;receive say content:&quot;</span> <span class="token operator">+</span> word <span class="token operator">+</span> <span class="token string">&quot; in server&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">tell</span><span class="token punctuation">(</span><span class="token class-name">String</span> word<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;receive tell content:&quot;</span> <span class="token operator">+</span> word <span class="token operator">+</span> <span class="token string">&quot; age:&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot; in server&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//Stub 继承自Binder，因此是IBinder类型</span>
        <span class="token keyword">return</span> stub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先实现业务接口。<br> 其次在onBind(xx)里将Binder返回给客户端。<br> 业务逻辑实现了，等待客户端调用。</p><h3 id="编写客户端业务" tabindex="-1"><a class="header-anchor" href="#编写客户端业务" aria-hidden="true">#</a> 编写客户端业务</h3><p>先定义ServiceConnection:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">ServiceConnection</span> serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">IMyServer</span> iMyServer <span class="token operator">=</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                iMyServer<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">&quot;how are you?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> result <span class="token operator">=</span> iMyServer<span class="token punctuation">.</span><span class="token function">tell</span><span class="token punctuation">(</span><span class="token string">&quot;how are you?&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token string">&quot;IPC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;receive return content:&quot;</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">&quot; in client&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>service 为IBinder引用，该引用从服务端经过Binder驱动传递而来(不一定是同一个引用)。<br> IMyServer.Stub.asInterface(service) 用来寻找该IBinder对应的服务端提供的接口。</p><blockquote><p>1、当IBinder与调用者同一进程，则IBinder为Binder类型，即为自身定义的Stub。<br> 2、当IBinder与调用者不是同一进程，则IBinder为BinderProxy类型(为什么是这个类型，后续文章会分析)。</p></blockquote><p>此处测试的是两个不同的进程，因此IBinder service指向BinderProxy。<br> 在ServiceConnection里，当绑定成功后调用Proxy里的方法，其内部通过BinderProxy调用transact(xx)。</p><p>上面的逻辑都写了，最后当然需要绑定Service:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bindService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Intent</span> intent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Intent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">MyService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">bindService</span><span class="token punctuation">(</span>intent<span class="token punctuation">,</span> serviceConnection<span class="token punctuation">,</span> <span class="token constant">BIND_AUTO_CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>来看看打印结果：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-d7bf722eb6dd0e75.png" alt=""></p><p>可以看出通信成功了。</p><p>需要注意的是：</p><blockquote><p>以上Demo都是同一个工程里编写的，因此客户端、服务端都能访问IMyServer.Stub，若是在不同的进程，需要写同样的IMyServer.aidl文件。</p></blockquote><p>让Service在不同的进程运行只需要在AndroidManifest.xml添加如下字段：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>service</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.MyService<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">android:</span>process</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>:aidl<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>service</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>绑定后，运行的两个进程如下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-a1cc050352d70af5.png" alt=""></p><h3 id="总结aidl用法" tabindex="-1"><a class="header-anchor" href="#总结aidl用法" aria-hidden="true">#</a> 总结AIDL用法</h3><p>通过以上Demo可以看出，通过编写AIDL实现IPC。<br> 服务端仅需要两步：<br><strong>第一步</strong><br> 实现接口对应方法的业务逻辑</p><p><strong>第二步</strong><br> 在onBind(xx)里将接口关联的Binder返回</p><p>同样的客户端调用服务端仅仅只需要两步：<br><strong>第一步</strong><br> 通过Stub拿到服务端的接口</p><p><strong>第二步</strong><br> 拿到接口后调用对应的方法</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-4155d512d0924d50.png" alt=""></p><p>明显的，IMyServer.java 已经为我们实现了连接Binder的功能，屏蔽了对接的Binder细节。客户端调用服务端的方法(Proxy)与服务端进行通信，就像是&quot;直接&quot;调用一般，符合Java一贯的面向对象的思维。</p><p>结合上一篇文章对Binder应用的分析，以及本篇AIDL的分析，我们知道：</p><blockquote><ul><li>AIDL 并不是我们熟知的Java、C++语言，而是一种规范。按此规范编写的AIDL文件最终生成对应的.java文件，该文件里实现了客户端调用transact(xx)以及调用服务端的onTransact(xx)，通过.java文件就能实现进程间通信。</li><li>.java文件里将工作分为了两部分：一是客户端的逻辑封装在Proxy里，而服务端的逻辑封装在Stub里，典型的Proxy-Stub(代理-桩)模式。</li><li>进程间通信的核心是Binder，AIDL本身并不能实现进程间通信，仅仅是简化了编码的流程。</li></ul></blockquote><p>接下来将重点分析AIDL 传递自定义数据类型以及定向Tag相关问题。</p><h2 id="aidl-传递非基本数据类型" tabindex="-1"><a class="header-anchor" href="#aidl-传递非基本数据类型" aria-hidden="true">#</a> AIDL 传递非基本数据类型</h2><p>在上篇文章中定义AIDL文件时，方法形参都是使用基本参数，实际需求里不仅仅只传递基本参数。比如客户端想从服务端获取学生信息，包括姓名、年龄等。</p><h3 id="自定义数据类型" tabindex="-1"><a class="header-anchor" href="#自定义数据类型" aria-hidden="true">#</a> 自定义数据类型</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Parcelable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//从序列化里解析成员变量</span>
        name <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        age <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token constant">CREATOR</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Creator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">createFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//构造新对象</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">newArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">describeContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">writeToParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> dest<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//将成员变量写入到序列化对象里</span>
        dest<span class="token punctuation">.</span><span class="token function">writeString</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        dest<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>声明了Student类，该类里有学生的信息：姓名、年龄。<br> 跨进程传递对象需要序列化数据，因此采用Parcelable 进行序列化，实现Parcelable需要实现其方法：describeContents()与writeToParcel(xx)，并且还需要添加静态类：CREATOR，用来反序列化数据。<br> Parcelable序列化都是标准样式，实际上就做了两件事：</p><blockquote><p>1、将Student数据分别写入到序列化对象Parcel里<br> 2、从序列化对象Parcel里构建出Student对象</p></blockquote><h3 id="aidl-使用自定义数据类型" tabindex="-1"><a class="header-anchor" href="#aidl-使用自定义数据类型" aria-hidden="true">#</a> AIDL 使用自定义数据类型</h3><p>准备好了数据类型，接着来看看如何使用它。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span><span class="token comment">//----------------(1)</span>
<span class="token keyword">interface</span> <span class="token class-name">IMyServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> in <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//------------(2)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>(1)</strong><br> 与平时一致，引入一个新的类型，要将其类名import 出来。</p><p><strong>(2)</strong><br> getStudentInfo(xx)有个形参类型为：Student student，并且前边还有个&quot;in&quot; 标记(这个后续说)</p><h3 id="自定义数据类型关联的aidl" tabindex="-1"><a class="header-anchor" href="#自定义数据类型关联的aidl" aria-hidden="true">#</a> 自定义数据类型关联的AIDL</h3><p>上面的代码是无法编译通过的，还需要在AIDL里声明自定义数据类型关联的AIDL。<br> 新建名为：Student 的AIDL 文件，默认内容如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">basicTypes</span><span class="token punctuation">(</span><span class="token keyword">int</span> anInt<span class="token punctuation">,</span> <span class="token keyword">long</span> aLong<span class="token punctuation">,</span> <span class="token keyword">boolean</span> aBoolean<span class="token punctuation">,</span> <span class="token keyword">float</span> aFloat<span class="token punctuation">,</span>
            <span class="token keyword">double</span> aDouble<span class="token punctuation">,</span> <span class="token class-name">String</span> aString<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将以上内容删除，改造成如下内容：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>
parcelable <span class="token class-name">Student</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这么改造后，Student.aidl生成的Student.java 文件内容为空。<br> 修改后，编译成功。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><p><strong>包名类名一致</strong><br> Student.aidl和自定义数据类型Student.java 需要保持包名类名一致。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-1c21b86c305a5180.png" alt=""></p><p>如上图，Student.java 包名为：com.fish.myapplication.service</p><p>再看Student.aidl 结构：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-432bd35affc680b1.png" alt=""></p><p>如上图，Student.aidl 包名为：com.fish.myapplication.service</p><p>可以看出，两者包名一致。</p><p><strong>解决类重复问题</strong><br> 编写过程中可能会遇到类重复问题：<br> 先定义了Student.java，当再定义Student.aidl 时，若两者处于同一包下，那么将无法创建Student.aidl文件。<br> 分两种方法解决：</p><blockquote><p>第一种：先定义Student.aidl，并将其内容改造，最后定义Student.java。<br> 第二种：先定义Student.java 在与Student.aidl不同的包名下，然后再定义Student.aidl，并改造内容，最后将Student.aidl 移动至与Student.java 同一包名下。</p></blockquote><h3 id="客户端-服务端处理自定义数据类型" tabindex="-1"><a class="header-anchor" href="#客户端-服务端处理自定义数据类型" aria-hidden="true">#</a> 客户端/服务端处理自定义数据类型</h3><p><strong>服务端业务</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token keyword">extends</span> <span class="token class-name">Service</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TAG</span> <span class="token operator">=</span> <span class="token string">&quot;IPC&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">//构造内部类</span>
    <span class="token keyword">private</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span> stub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in server&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">IBinder</span> <span class="token function">onBind</span><span class="token punctuation">(</span><span class="token class-name">Intent</span> intent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//Stub 继承自Binder，因此是IBinder类型</span>
        <span class="token keyword">return</span> stub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获取传递过来的Student，并打印其姓名。</p><p><strong>客户端业务</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">ServiceConnection</span> serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">IMyServer</span> iMyServer <span class="token operator">=</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                iMyServer<span class="token punctuation">.</span><span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="总结aidl-使用自定义数据类型步骤" tabindex="-1"><a class="header-anchor" href="#总结aidl-使用自定义数据类型步骤" aria-hidden="true">#</a> 总结AIDL 使用自定义数据类型步骤</h3><blockquote><p>1、构造自定义数据类型同名.aidl文件<br> 2、构造自定义数据类型.java文件<br> 3、在AIDL 接口里使用自定义数据类型</p></blockquote><h2 id="aidl-数据流方向" tabindex="-1"><a class="header-anchor" href="#aidl-数据流方向" aria-hidden="true">#</a> AIDL 数据流方向</h2><h3 id="什么是数据流" tabindex="-1"><a class="header-anchor" href="#什么是数据流" aria-hidden="true">#</a> 什么是数据流</h3><p>回顾一下常用的方法调用方式:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;modify&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>形参为：int 类型；Student类型；<br> 在同一进程里，当调用该方法时，传入Student引用，方法里对Student成员变量进行了更改，方法调用结束后，调用者持有的Student引用所指向的对象其内容已经更改了。而对于int 类型，方法里却无法更改。<br> 上述涉及到了经典问题：传值与传址。</p><p>而对于不同的进程，当客户端调用getStudentInfo(xx)方法时，虽然看起来是直接调用服务端的方法，实际上是底层中转了数据，因此当初传入Student，返回来的已经不是同一个Student引用。<br> 因此，AIDL 规定了数据流方向。</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-0c78b9d63b41216b.png" alt=""></p><h3 id="数据流具体使用" tabindex="-1"><a class="header-anchor" href="#数据流具体使用" aria-hidden="true">#</a> 数据流具体使用</h3><p>从上图可以看出，数据流方向有三种：</p><blockquote><p>in<br> out<br> inout</p></blockquote><p>为测试它们的差异，分别写三个方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">Student</span></span><span class="token punctuation">;</span>
<span class="token keyword">interface</span> <span class="token class-name">IMyServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">getStudentInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> in <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">getStudentInfo2</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> out <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">getStudentInfo3</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> inout <span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>基本数据类型如 int、String 默认是数据流类型是: in，不用刻意标注。</p><p><strong>服务端实现方法：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span> stub <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudentInfoIn</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in server in getStudentInfoIn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;change name getStudentInfoIn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudentInfoOut</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in server in getStudentInfoOut&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;change name getStudentInfoOut&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudentInfoInout</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in server in getStudentInfoInout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            student<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;change name getStudentInfoInout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将Student name 打印出来，并更改name 内容。<br><strong>客户端调用服务端方法：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token class-name">ServiceConnection</span> serviceConnection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServiceConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceConnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">,</span> <span class="token class-name">IBinder</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">IMyServer</span> iMyServer <span class="token operator">=</span> <span class="token class-name">IMyServer<span class="token punctuation">.</span>Stub</span><span class="token punctuation">.</span><span class="token function">asInterface</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in client before getStudentInfoIn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                iMyServer<span class="token punctuation">.</span><span class="token function">getStudentInfoIn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in client after getStudentInfoIn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


                <span class="token class-name">Student</span> student2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in client before getStudentInfoOut&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                iMyServer<span class="token punctuation">.</span><span class="token function">getStudentInfoOut</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> student2<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in client after getStudentInfoOut&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token class-name">Student</span> student3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;xiaoming&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in client before getStudentInfoInout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                iMyServer<span class="token punctuation">.</span><span class="token function">getStudentInfoInout</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> student3<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;student name:&quot;</span> <span class="token operator">+</span> student3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; in client after getStudentInfoInout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServiceDisconnected</span><span class="token punctuation">(</span><span class="token class-name">ComponentName</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造Student 对象，并分别打印调用服务端方法前后Student name名字。<br> 当编译的时候，发现编译不过，还需要在Student.java 里添加方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readFromParcel</span><span class="token punctuation">(</span><span class="token class-name">Parcel</span> parcel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> parcel<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> parcel<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后结果如下：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images/19073098-96ff16f4d71269e5.png" alt=""></p><p>总结一下规律：</p><blockquote><p>1、使用 in 修饰Student，服务端收到Student的内容，更改name后，客户端收到Student，其name 并没有改变。表示数据流只能从客户端往服务端传递。<br> 2、使用 out 修饰Student，服务端并没有收到Student的内容，更改name后，客户端收到Student，其name 已经改变。表示数据流只能从服务端往客户端传递。<br> 3、使用 inout 修饰Student，服务端收到Student的内容，更改name后，客户端收到Student，其name 已经改变。表示数据流能在服务端和客户端间传递。</p></blockquote><h3 id="数据流在代码里的实现" tabindex="-1"><a class="header-anchor" href="#数据流在代码里的实现" aria-hidden="true">#</a> 数据流在代码里的实现</h3><p>AIDL 文件最终生成.java 文件，因此在该文件里找答案。<br><strong>当使用 in 修饰时：</strong><br> 对于客户端，将Student数据写入序列化对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>student<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            _data<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            student<span class="token punctuation">.</span><span class="token function">writeToParcel</span><span class="token punctuation">(</span>_data<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于服务端，并没有将Student写入回复的序列化对象。<br><strong>当使用 out 修饰时</strong><br> 对于客户端，没有将Student数据写入序列化对象。<br> 对于服务端，将Student写入回复的序列化对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>          _arg1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fish<span class="token punctuation">.</span>myapplication<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span>Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getStudentInfoOut</span><span class="token punctuation">(</span>_arg0<span class="token punctuation">,</span> _arg1<span class="token punctuation">)</span><span class="token punctuation">;</span>
          reply<span class="token punctuation">.</span><span class="token function">writeNoException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>_arg1<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            reply<span class="token punctuation">.</span><span class="token function">writeInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//写入reply</span>
            _arg1<span class="token punctuation">.</span><span class="token function">writeToParcel</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>os<span class="token punctuation">.</span></span>Parcelable</span><span class="token punctuation">.</span><span class="token constant">PARCELABLE_WRITE_RETURN_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>当使用 inout 修饰时</strong><br> 实际上就是 in out 的结合。</p>`,104);function d(v,m){const t=e("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("代码不长，但是初看起来云里雾里的，如果不怎么熟悉以上内容，强烈建议先阅读上篇文章："),s("a",k,[n("Android IPC 之Binder应用"),l(t)]),n("，再看这篇就很容易了。")]),r])}const y=p(i,[["render",d],["__file","android-IPC-zhiAIDLyingyong.html.vue"]]);export{y as default};
