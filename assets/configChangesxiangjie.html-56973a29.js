import{_ as o,r as p,o as c,c as i,b as n,d as a,e as t,a as e}from"./app-e8f85126.js";const l={},u={href:"https://blog.csdn.net/weixin_42600398/article/details/122525304",target:"_blank",rel:"noopener noreferrer"},r={href:"https://blog.csdn.net/zxd_Android/article/details/86713240",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,"如果要在android源码确认是否是configChanges导致了Activity重启，建议把ActivityThread.DEBUG_CONFIGURATION改为true。",-1),k=n("li",null,"Activity无法内部消化此次配置改变时，会调用relaunchActivityLocked方法。不同的是，如果此Activity正在前台，那立即调用；在后台的，则等切到前台后再调用",-1),v=e(`<h2 id="configchanges作用" tabindex="-1"><a class="header-anchor" href="#configchanges作用" aria-hidden="true">#</a> configChanges作用</h2><ul><li><strong>newConfig</strong>：新的设备配置信息</li></ul><p>Android程序在运行时，一些设备的配置可能会改变，如：横竖屏的切换、软键盘的弹出等。这些事件一旦发生，当前活动的Activity会重新启动，其中的过程是：在销毁之前会先调用onSaveInstanceState()方法去保存你应用中的一些数据，然后调用onDestroy()方法，最后调用onCreate()、onStart()、onResume()等方法启动一个新的Activity。</p><p><strong>如果想让某些配置在发生改变的时候不重启Activity，需要为Activity添加android:configChanges属性</strong>，该属性可以设置多个值，用&quot;|&quot;隔开，例如：“locale|navigation|orientation。设置了android:configChanges属性后，当指定的属性发生变化时，不会去重新启动Activity，而是通知程序去调用Activity的onConfigurationChanged()方法。</p><p>简言之，在Activity中添加了android:configChanges属性，目的是当android:configChanges所设置的属性值对应的配置属性发生改变时，通知程序调用 onConfigurationChanged()函数，而不会重启Activity。</p><h2 id="获取变化的configchanges" tabindex="-1"><a class="header-anchor" href="#获取变化的configchanges" aria-hidden="true">#</a> 获取变化的configChanges</h2><p>系统的配置在Configuration类中（package android.content.res;）实现了Parcelable,和Comparable<code>&lt;Configuration&gt;</code></p><p>在<code>android/U/frameworks/base/services/core/java/com/android/server/wm/ActivityRecord.java</code>中调用<code>configurationDiffToString</code>方法，打印出当前变化的configChanges</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">ensureActivityConfiguration</span><span class="token punctuation">(</span><span class="token keyword">int</span> globalChanges<span class="token punctuation">,</span> <span class="token keyword">boolean</span> preserveWindow<span class="token punctuation">,</span>
            <span class="token keyword">boolean</span> ignoreVisibility<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isRequestedOrientationChanged<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token class-name">ProtoLog</span><span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span><span class="token constant">WM_DEBUG_CONFIGURATION</span><span class="token punctuation">,</span> <span class="token string">&quot;Configuration changes for %s, &quot;</span>
                <span class="token operator">+</span> <span class="token string">&quot;allChanges=%s&quot;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token class-name">Configuration</span><span class="token punctuation">.</span><span class="token function">configurationDiffToString</span><span class="token punctuation">(</span>changes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configchanges设置取值" tabindex="-1"><a class="header-anchor" href="#configchanges设置取值" aria-hidden="true">#</a> configChanges设置取值</h2><p>以下是根据图片中的文字文本提取的表格内容，并以表格的形式排版输出：</p><table><thead><tr><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>mcc(0x0001)</td><td>IMS移动国家/地区代码（MCC）发生了变化-检测到了SIM并更新了MCC。</td></tr><tr><td>mnc(0x0002)</td><td>IMSI移动网络代码（MNC）发生了变化-检测到了SIM并更新了MNC。</td></tr><tr><td>locale(0x0004)</td><td>语言区域发生了变化-用户为文本选择了新的显示语言。</td></tr><tr><td>touchscreen(0x0008)</td><td>触摸屏发生了变化。（这种情况通常永远不会发生。）</td></tr><tr><td>keyboard(0x0010)</td><td>键盘类型发生了变化-例如，用户插入了一个外置键盘。</td></tr><tr><td>keyboardHidden(0x0020)</td><td>键盘无障碍功能发生了变化-例如，用户显示了硬件键盘。</td></tr><tr><td>navigation(0x0040)</td><td>导航类型（轨迹球/方向键）发生了变化。（这种情况通常永远不会发生。）</td></tr><tr><td>screenLayout(0x0100)</td><td>屏幕布局发生了变化-这可能是由激活了其他显示方式所致。</td></tr><tr><td>fontScale(0x40000000)</td><td>字体缩放系数发生了变化-用户选择了新的全局字号。</td></tr><tr><td>uiMode(0x0200)</td><td>用户界面模式发生了变化-这可能是因用户将设备放入桌面/车载基座或夜间模式发生变化所致。请参阅UiModeManager。此项为API级别8中新增配置。</td></tr><tr><td>orientation(0x0080)</td><td>屏幕方向发生了变化-用户旋转了设备。（注）如果您的应用面向API级别13或更高级别，则还应声明“screenSize”配置，因为当设备在横向与纵向之间切换时，该配置也会发生变化。</td></tr><tr><td>screenSize(0x0400)</td><td>当前可用屏幕尺寸发生了变化。它表示当前可用尺寸相对于当前纵横比的变化，因此会在用户在横向与纵向之间切换时发生变化。不过，如果您的应用面向API级别12或更低级别，则Activity始终会自行处理此配置变更。此项为API级别13中新增配置。</td></tr><tr><td>smallestScreenSize(0x0800)</td><td>物理屏幕尺寸发生了变化。它表示与方向无关的尺寸变化，因此只有在实际物理屏幕尺寸发生变化（如切换到外部显示器）时才会变化。对此配置的变更对应于smallestwidth配置的变化。不过，如果您的应用面向API级别12或更低级别，则Activity始终会自行处理此配置变更。此项为API级别13中新增配置。</td></tr><tr><td>layoutDirection(0x2000)</td><td>布局方向发生了变化。例如，从从左至右（LTR）更改为从右至左（RTL）。此项为API级别17中新增配置。</td></tr></tbody></table><h2 id="横竖屏切换" tabindex="-1"><a class="header-anchor" href="#横竖屏切换" aria-hidden="true">#</a> 横竖屏切换</h2><p>**注意：**横竖屏切换的属性是 orientation。如果 targetSdkVersion 的值大于等于13，则如下配置才会回调 onConfigurationChanged 方法：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>android:configChanges=&quot;orientation|screenSize&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果targetSdkVersion的值小于13，则只要配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>android:configChanges=&quot;orientation&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>网上有很多文章写说横竖屏切换时 onConfigurationChanged方法 没有调用，使用如下的配置：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>android:configChanges=&quot;orientation|keyboard|keyboardHidden&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是，其实查官方文档，只要配置 android:configChanges=&quot;orientation|screenSize&quot; 就可以了。</p><h2 id="外设键盘" tabindex="-1"><a class="header-anchor" href="#外设键盘" aria-hidden="true">#</a> 外设键盘</h2><p>**扩展：**当用户接入一个外设键盘时，默认软键盘会自动隐藏，系统自动使用外设键盘。这个过程Activity的销毁和隐藏执行了两次。并且 onConfigurationChanged() 不会调用。</p><p>但是在配置文件中设置 <strong>android:configChanges=&quot;keyboardHidden|keyboard&quot;</strong>。当接入外设键盘或者拔出外设键盘时，调用的周期是先调用onConfigurationChanged()周期后销毁重建。</p><p><strong>在这里有一个疑点，为什么有两次的销毁重建？</strong></p><p>其中一次的销毁重建可以肯定是因为外设键盘的插入和拔出。当设置 android:configChanges=&quot;keyboardHidden|keyboard&quot; 之后，就不会销毁重建，而是调用onConfigurationChanged()方法。</p><p><strong>但是还有一次销毁重建一直存在。</strong></p><p>经过测试，当接入外设键盘时，除了键盘类型的改变，触摸屏也发生了变化。因为使用外设键盘，触摸屏不能使用了。</p><p><strong>总结：如果是键盘类型发生了改变，则 configChanges属性 配置如下Activity才不会销毁重建，且回调 onConfigurationChanged方法：</strong></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>android:configChanges=&quot;touchscreen|keyboard|keyboardHidden&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>note:</strong> 这里的外置物理键盘可以是游戏手柄、扫描枪、键盘等等。</p><p>官方文档：</p><blockquote><p>https://developer.android.com/guide/topics/manifest/activity-element.html</p></blockquote><p>小楠篇</p><p>在手机APP开发的时候，一般默认会适配竖屏，游戏开发除外。但是在Android平板电脑开发中，屏幕旋转的问题比较突出，可以这样说，平板电脑的最初用意就是横屏使用的，比较方便，用户会经常旋转我们设备的屏幕。</p><blockquote><p><strong>屏幕旋转的适配问题以及遇到的一些坑</strong></p><p>http://www.jianshu.com/p/19393bb08e4f</p></blockquote><h2 id="关于官方文档" tabindex="-1"><a class="header-anchor" href="#关于官方文档" aria-hidden="true">#</a> <strong>关于官方文档</strong></h2><p>我们知道，在 Activity、View（ViewGroup）、Fragment、Service、Content Provider 等等在设备的配置发生变化的时候，会回调 onConfigurationChanged 的方法。实质上主要是 Activity 中收到 AMS 的通知，回调，然后把事件分发到 Window、Fragment、ActionBar 等。</p><p>下面我们可以通过 Activity的onConfigurationChanged方法 源码可以看到：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> newConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mCalled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 分发到Activity中的所有Fragment</span>
    mFragments<span class="token punctuation">.</span><span class="token function">dispatchConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 分发到Activity的Window对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mWindow <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Pass the configuration changed event to the window</span>
        mWindow<span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 分发到Activity的ActionBar</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>mActionBar <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mActionBar<span class="token punctuation">.</span><span class="token function">onConfigurationChanged</span><span class="token punctuation">(</span>newConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们讨论的是为什么当我们的界面在设备配置发生变化的时候（屏幕旋转），有时候并不会回调 onConfigurationChanged 呢？</p><p>关于Activity的官方文档有下面一句话：</p><p><img src="https://raw.githubusercontent.com/shug666/image/main/images0" alt=""></p><p>也就是说，在设备配置发生变化的时候，会回调 onConfigurationChanged，但是前提条件是当你的 Activity（组件）还在运行的时候。</p><p>这就很明显了，说明一旦你的界面暂停以后就不会回调这个方法了。但是这样会导致一个问题，就是你的界面跳转到其他界面的时候（当前界面暂停），然后发生了一次屏幕旋转，再返回的时候，你的界面虽然旋转了，但是并没有回调 onConfigurationChanged 方法，并没有执行你的UI适配代码。</p><h2 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析" aria-hidden="true">#</a> <strong>源码分析</strong></h2>`,45),g={href:"https://mp.weixin.qq.com/s?__biz=MzA5MzI3NjE2MA==&mid=2650238917&idx=1&sn=d13fceb5aab551258c64f6aa9e03b9ff&chksm=88639eaabf1417bc470ef3c4240b6b78388959dfb2911f4e4b7e341798a42bdc33151a83dedc&scene=27",target:"_blank",rel:"noopener noreferrer"},m=e(`<h2 id="frameworks处理流程" tabindex="-1"><a class="header-anchor" href="#frameworks处理流程" aria-hidden="true">#</a> frameworks处理流程</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>aosp<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>frameworks<span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>wm<span class="token operator">/</span><span class="token class-name">ActivityRecord</span><span class="token punctuation">.</span>java
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ActivityRecord</span> <span class="token keyword">extends</span> <span class="token class-name">WindowToken</span> <span class="token keyword">implements</span> <span class="token class-name">WindowManagerService<span class="token punctuation">.</span>AppFreezeListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">ensureActivityConfiguration</span><span class="token punctuation">(</span><span class="token keyword">int</span> globalChanges<span class="token punctuation">,</span> <span class="token keyword">boolean</span> preserveWindow<span class="token punctuation">,</span>
            <span class="token keyword">boolean</span> ignoreVisibility<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// changes类型是int，存储着此次发生的配置改变。举个例子：修改语言后，changes是0x2004。</span>
        <span class="token comment">// shouldRelaunchLocked用于判断Activify是否可以内部消化掉changes指示的改变 </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldRelaunchLocked</span><span class="token punctuation">(</span>changes<span class="token punctuation">,</span> mTmpConfig<span class="token punctuation">)</span> <span class="token operator">||</span> forceNewConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 重启分支。Activify无法消化此次改变，或强制要求重启(forceNewConfig==true)</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mState <span class="token operator">==</span> <span class="token constant">PAUSING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token comment">// 如果Activity此时为Pause状态，先设置一个标志位</span>
                deferRelaunchUntilPaused <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                preserveWindowOnDeferredRelaunch <span class="token operator">=</span> preserveWindow<span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token function">relaunchActivityLocked</span><span class="token punctuation">(</span>preserveWindow<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// All done...  tell the caller we weren&#39;t able to keep this activity around.</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token punctuation">}</span>  

    shouldRelaunchLocked用于判断app是否可以内部消化掉changes指定的改变
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldRelaunchLocked</span><span class="token punctuation">(</span><span class="token keyword">int</span> changes<span class="token punctuation">,</span> <span class="token class-name">Configuration</span> changesConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> configChanged <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">getRealConfigChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// changes存储着此次发生的配置改变。</span>
        <span class="token comment">// configChanged存储着此个Activity在android:configChanges写的View的可视区域及裁剪可消化改变。</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>changes<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>configChanged<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设用户在“设置”修改了语言，像从英文改为中文，这时android会依次调用各个正运行着的Activity的ensureActivityConfiguration。一个ActivityRecord对象对应一个Activity，成员变量packageName存储着此Activity归属app的Application ID，像com.kos.launcher，成员函数ensureActivityConfiguration也就对应一个Activity的处理过程。</p><p>在ensureActivityConfiguration，首先得到此次发生的配置改变值0x2004，值存储在变量changes，然后调用shouldRelaunchLocked，判断是否能内部消化掉这次改变。shouldRelaunchLocked逻辑分两步，第一步调用info.getRealConfigChanged()读出android:configChanges写的那改变值0x00C4，值存储在configChanged，第二步用“(changes&amp;(~configChanged)) != 0”判断此次发生的改变(changes)是否有的不在configChanged。如果有，像示例的0x2004和0x00C4，shouldRelaunchLocked返回true，表示内部没法消化掉此次改变，否则返回false。</p><p>如果内部没法消化掉，或调用者要求一定要重启(forceNewConfig==true)，那进入重启分支。在这分支，如果此app的生命周期正处于暂停状态，像运行在后台，则把deferRelaunchUntilPaused设为true。否则立即调用relaunchActivityLocked。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>aosp<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>frameworks<span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>wm<span class="token operator">/</span><span class="token class-name">TaskFragment</span><span class="token punctuation">.</span>java
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
    <span class="token keyword">void</span> <span class="token function">completePause</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> resumeNext<span class="token punctuation">,</span> <span class="token class-name">ActivityRecord</span> resuming<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>finishing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span><span class="token function">hasProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>deferRelaunchUntilPaused<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
                    <span class="token comment">// 这里是关键，如果deferRelaunchUntilPaused为true，调用重启</span>
                    prev<span class="token punctuation">.</span><span class="token function">relaunchActivityLocked</span><span class="token punctuation">(</span>prev<span class="token punctuation">.</span>preserveWindowOnDeferredRelaunch<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
            <span class="token punctuation">}</span>
            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当Activity从Pause到Resume状态过渡时，像从后台切到前台，一旦发现deferRelaunchUntilPaused是true，会调用relaunchActivityLocked。综上所述：<strong>Activity无法内部消化此次配置改变时，会调用relaunchActivityLocked方法。不同的是，如果此Activity正在前台，那立即调用；在后台的，则等切到前台后再调用</strong>。</p><p>relaunchActivityLocked执行着重启流程。内中如何转的就不分析了，最终会调用handleRelaunchActivityInner。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>aosp<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>frameworks<span class="token operator">/</span>base<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>android<span class="token operator">/</span>app<span class="token operator">/</span><span class="token class-name">ActivityThread</span><span class="token punctuation">.</span>java
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleRelaunchActivityInner</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> configChanges<span class="token punctuation">,</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResultInfo</span><span class="token punctuation">&gt;</span></span> pendingResults<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReferrerIntent</span><span class="token punctuation">&gt;</span></span> pendingIntents<span class="token punctuation">,</span>
            <span class="token class-name">PendingTransactionActions</span> pendingActions<span class="token punctuation">,</span> <span class="token keyword">boolean</span> startsNotResumed<span class="token punctuation">,</span>
            <span class="token class-name">Configuration</span> overrideConfig<span class="token punctuation">,</span> <span class="token class-name">String</span> reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// 销毁此个Activity</span>
        <span class="token function">handleDestroyActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> configChanges<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token comment">// 启动此个Activity</span>
        <span class="token function">handleLaunchActivity</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> pendingActions<span class="token punctuation">,</span> customIntent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="确保配置改变不会导致重启activity" tabindex="-1"><a class="header-anchor" href="#确保配置改变不会导致重启activity" aria-hidden="true">#</a> 确保配置改变不会导致重启Activity</h2><p>按上面规则，只要在android:configChanges写上所有可能的配置改变，那无论配置怎么改变都不会导致该Activity重启。那这里为什么还要提这个问题呢？——我不知道如何写android:configChanges才能包含所有配置改变。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>aosp<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>frameworks<span class="token operator">/</span>base<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>android<span class="token operator">/</span>content<span class="token operator">/</span>pm<span class="token operator">/</span><span class="token class-name">ActivityInfo</span><span class="token punctuation">.</span>java
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CONFIG_ASSETS_PATHS</span> <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CONFIG_WINDOW_CONFIGURATION</span> <span class="token operator">=</span> <span class="token number">0x20000000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在Android-12，不知道如何写android:configChanges才能包含以上这两个配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>aosp<span class="token punctuation">&gt;</span></span><span class="token operator">/</span>frameworks<span class="token operator">/</span>base<span class="token operator">/</span>services<span class="token operator">/</span>core<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>android<span class="token operator">/</span>server<span class="token operator">/</span>wm<span class="token operator">/</span><span class="token class-name">ActivityRecord</span><span class="token punctuation">.</span>java
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">shouldRelaunchLocked</span><span class="token punctuation">(</span><span class="token keyword">int</span> changes<span class="token punctuation">,</span> <span class="token class-name">Configuration</span> changesConfig<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>packageName <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> packageName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;com.kos.launcher&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>changes<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>configChanged<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果android:configChanges无法包含所有改变，但又要确保配置改变不会导致重启Activity，可以修改shouldRelaunchLocked。发现是白名单中的app时，强制返回false，即认为内部能消化掉，不必重启此Activity。</p>`,15),h={href:"https://www.cswamp.com/post/176",target:"_blank",rel:"noopener noreferrer"};function b(f,y){const s=p("ExternalLinkIcon");return c(),i("div",null,[n("ul",null,[n("li",null,[a("参考文章："),n("a",u,[a("android:configChanges属性解析"),t(s)]),a("、"),n("a",r,[a("项目疑难杂症记录(四)：Activity被重新创建的原因分析"),t(s)])]),d,k]),v,n("p",null,[n("a",g,[a("跳转链接"),t(s)])]),m,n("p",null,[a("本文转自 "),n("a",h,[a("https://www.cswamp.com/post/176"),t(s)]),a("，如有侵权，请联系删除。")])])}const w=o(l,[["render",b],["__file","configChangesxiangjie.html.vue"]]);export{w as default};
