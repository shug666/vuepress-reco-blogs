import{_ as p,r as i,o,c as l,b as n,d as a,e,a as t}from"./app-e8f85126.js";const c={},d=t(`<h2 id="gradle简介" tabindex="-1"><a class="header-anchor" href="#gradle简介" aria-hidden="true">#</a> Gradle简介</h2><p>Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化构建工具。它使用一种基于Groovy的特定领域语言（DSL）来声明项目设置，但Gradle本身是用Java编写的，确保了跨平台的兼容性和高效性。Gradle支持多种编程语言，包括Java、Kotlin、Android等，并且允许通过插件机制扩展其功能。</p><h2 id="gradle基础语法" tabindex="-1"><a class="header-anchor" href="#gradle基础语法" aria-hidden="true">#</a> Gradle基础语法</h2><h3 id="_1-项目结构" tabindex="-1"><a class="header-anchor" href="#_1-项目结构" aria-hidden="true">#</a> 1. 项目结构</h3><p>Gradle项目通常包含一个或多个子项目（也称为模块）。每个项目都有一个<code>build.gradle</code>文件，用于定义该项目的构建逻辑。在Android项目中，通常会有一个项目级别的<code>build.gradle</code>文件和一个或多个模块级别的<code>build.gradle</code>文件。</p><h3 id="_2-插件应用" tabindex="-1"><a class="header-anchor" href="#_2-插件应用" aria-hidden="true">#</a> 2. 插件应用</h3><p>在Gradle中，插件用于扩展其功能。在Android项目中，你需要应用<code>com.android.application</code>或<code>com.android.library</code>插件来配置Android构建过程。这通常在模块级别的<code>build.gradle</code>文件中完成，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>apply plugin<span class="token operator">:</span> &#39;com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>application&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者，对于Kotlin DSL（如果你使用的是Kotlin来编写Gradle脚本）：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>plugins <span class="token punctuation">{</span>
    id &#39;com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>application&#39;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-仓库与依赖" tabindex="-1"><a class="header-anchor" href="#_3-仓库与依赖" aria-hidden="true">#</a> 3. 仓库与依赖</h3><p>Gradle通过仓库来查找和下载依赖项。在Android项目中，你通常会配置Maven Central、JCenter或Google的Maven仓库。依赖项在<code>build.gradle</code>文件的<code>dependencies</code>块中声明，如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>dependencies <span class="token punctuation">{</span>
    implementation &#39;com<span class="token punctuation">.</span>android<span class="token punctuation">.</span>support<span class="token operator">:</span>appcompat<span class="token operator">-</span>v7<span class="token operator">:</span><span class="token number">28.0</span><span class="token number">.0</span>&#39;
    testImplementation &#39;junit<span class="token operator">:</span>junit<span class="token operator">:</span><span class="token number">4.12</span>&#39;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-任务-tasks" tabindex="-1"><a class="header-anchor" href="#_4-任务-tasks" aria-hidden="true">#</a> 4. 任务（Tasks）</h3><p>Gradle中的任务（Tasks）是构建过程中的最小工作单元。你可以定义自己的任务，也可以使用Gradle提供的内置任务。任务之间可以定义依赖关系，以确保它们按正确的顺序执行。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>task hello <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        println &#39;<span class="token class-name">Hello</span><span class="token punctuation">,</span> <span class="token class-name">Gradle</span><span class="token operator">!</span>&#39;
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

task <span class="token function">greet</span><span class="token punctuation">(</span>dependsOn<span class="token operator">:</span> hello<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        println &#39;<span class="token class-name">How</span> are you<span class="token operator">?</span>&#39;
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gradle在android项目中的深入应用" tabindex="-1"><a class="header-anchor" href="#gradle在android项目中的深入应用" aria-hidden="true">#</a> Gradle在Android项目中的深入应用</h2><h3 id="_1-构建变体-build-variants" tabindex="-1"><a class="header-anchor" href="#_1-构建变体-build-variants" aria-hidden="true">#</a> 1. 构建变体（Build Variants）</h3><p>在Android Gradle插件中，构建变体是构建过程中的一个重要概念，它允许你根据不同的需求（如debug和release）来配置不同的构建类型。以下是一个配置两个构建类型（debug和release）的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>android <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    buildTypes <span class="token punctuation">{</span>
        debug <span class="token punctuation">{</span>
            minifyEnabled <span class="token boolean">false</span>
            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span>&#39;proguard<span class="token operator">-</span>android<span class="token operator">-</span>optimize<span class="token punctuation">.</span>txt<span class="token char">&#39;), &#39;</span>proguard<span class="token operator">-</span>rules<span class="token punctuation">.</span>pro&#39;
        <span class="token punctuation">}</span>
        release <span class="token punctuation">{</span>
            minifyEnabled <span class="token boolean">true</span>
            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span>&#39;proguard<span class="token operator">-</span>android<span class="token operator">-</span>optimize<span class="token punctuation">.</span>txt<span class="token char">&#39;), &#39;</span>proguard<span class="token operator">-</span>rules<span class="token punctuation">.</span>pro&#39;
            signingConfig signingConfigs<span class="token punctuation">.</span>release
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>debug</code>构建类型关闭了代码压缩（<code>minifyEnabled false</code>），而<code>release</code>构建类型则开启了代码压缩（<code>minifyEnabled true</code>）并应用了签名配置（<code>signingConfig signingConfigs.release</code>）。</p><h3 id="_2-配置签名" tabindex="-1"><a class="header-anchor" href="#_2-配置签名" aria-hidden="true">#</a> 2. 配置签名</h3><p>相关的API的时候，是需要我们填入相关的的app签名进行校验后才能进行操作，而默认我们在调试模式下使用的是AS为我们提供的android.keystore，所幸，Gradle为我们提供了相关的方法，我们可以为debug和release指定密钥文件和前面。我们需要先在app.gradle的android节点做做相关的配置。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>android<span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    signingConfigs <span class="token punctuation">{</span>
        debug <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                storeFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;../签名文件.jks&quot;</span><span class="token punctuation">)</span>
                storePassword <span class="token string">&quot;密码&quot;</span>
                keyAlias <span class="token string">&quot;别名&quot;</span>
                keyPassword <span class="token string">&quot;密码&quot;</span>
                v1SigningEnabled <span class="token boolean">true</span>
                v2SigningEnabled <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidUserDataException</span><span class="token punctuation">(</span><span class="token string">&quot;秘钥用户名或密码错误\${ex.getMessage()}&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        release <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                storeFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;../签名文件.jks&quot;</span><span class="token punctuation">)</span>
                storePassword <span class="token string">&quot;密码&quot;</span>
                keyAlias <span class="token string">&quot;别名&quot;</span>
                keyPassword <span class="token string">&quot;密码&quot;</span>
                v1SigningEnabled <span class="token boolean">true</span>
                v2SigningEnabled <span class="token boolean">false</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">catch</span> <span class="token punctuation">(</span>ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidUserDataException</span><span class="token punctuation">(</span><span class="token string">&quot;秘钥用户名或密码错误&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>signingConfigs 是处于android节点中</p><p>这里需要注意的是storeFile的路径是指当前app.gradle的相对路径。</p><p>关于v1SigningEnabled和v2SigningEnabled</p><p>APK Signature Scheme v2是Android 7.0 引入一项新的应用签名方案 APK Signature Scheme v2，它能提供更快的应用安装时间和更多针对未授权 APK 文件更改的保护。一般情况下都会选择关闭。</p></blockquote><h3 id="_3-依赖管理" tabindex="-1"><a class="header-anchor" href="#_3-依赖管理" aria-hidden="true">#</a> 3. 依赖管理</h3><p>Gradle的依赖管理功能让添加、更新和删除项目的库依赖变得简单。以下是一个在<code>build.gradle</code>文件中添加依赖项的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>dependencies <span class="token punctuation">{</span>
    <span class="token comment">// 添加Android Support库</span>
    implementation &#39;androidx<span class="token punctuation">.</span>appcompat<span class="token operator">:</span>appcompat<span class="token operator">:</span><span class="token number">1.3</span><span class="token number">.0</span>&#39;

    <span class="token comment">// 添加单元测试库</span>
    testImplementation &#39;junit<span class="token operator">:</span>junit<span class="token operator">:</span><span class="token number">4.13</span><span class="token number">.2</span>&#39;

    <span class="token comment">// 添加AndroidX的Espresso测试库</span>
    androidTestImplementation &#39;androidx<span class="token punctuation">.</span>test<span class="token punctuation">.</span>espresso<span class="token operator">:</span>espresso<span class="token operator">-</span>core<span class="token operator">:</span><span class="token number">3.3</span><span class="token number">.0</span>&#39;

    <span class="token comment">// 添加第三方库，如Retrofit进行网络请求</span>
    implementation &#39;com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>retrofit2<span class="token operator">:</span>retrofit<span class="token operator">:</span><span class="token number">2.9</span><span class="token number">.0</span>&#39;
    implementation &#39;com<span class="token punctuation">.</span>squareup<span class="token punctuation">.</span>retrofit2<span class="token operator">:</span>converter<span class="token operator">-</span>gson<span class="token operator">:</span><span class="token number">2.9</span><span class="token number">.0</span>&#39;
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们添加了Android Support库（现已迁移至AndroidX）、JUnit单元测试库、Espresso UI测试库以及Retrofit网络请求库作为项目的依赖项。</p><h3 id="自定义构建逻辑" tabindex="-1"><a class="header-anchor" href="#自定义构建逻辑" aria-hidden="true">#</a> 自定义构建逻辑</h3><p>Gradle的灵活性允许你通过编写自定义任务（Tasks）或配置现有任务来扩展构建逻辑。以下是一个自定义Gradle任务的示例，该任务用于在构建过程中打印一条自定义消息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>task printCustomMessage <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        println &#39;<span class="token class-name">This</span> is a custom message from a <span class="token class-name">Gradle</span> task<span class="token punctuation">.</span>&#39;
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 可以将这个自定义任务添加到其他任务的依赖中，以确保在它们之前或之后执行</span>
assembleDebug<span class="token punctuation">.</span>dependsOn printCustomMessage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，请注意，将自定义任务直接依赖于<code>assembleDebug</code>这样的内置任务可能不是最佳实践，因为这可能会干扰Gradle的正常构建流程。更好的做法可能是将自定义任务作为构建过程中的一个独立步骤来运行，或者使用Gradle的钩子（如<code>gradle.projectsEvaluated</code>）来在构建过程的特定阶段执行自定义逻辑。</p><h3 id="_4-自定义apk输出名称" tabindex="-1"><a class="header-anchor" href="#_4-自定义apk输出名称" aria-hidden="true">#</a> 4. 自定义apk输出名称</h3><p>本配置为Android studio3.0及以上的配置，3.0以下版本适用，下面的配置会将所有的Variants都输出。</p><p>这可以通过在<code>android</code>块中配置<code>applicationVariants</code>或<code>libraryVariants</code>（取决于你的项目类型）来实现：</p><blockquote><p><strong>注：配置到buildTypes的release和debug下面</strong></p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 便利所有的Variants，all是迭代遍历操作符，相当于for</span>
applicationVariants<span class="token punctuation">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-&gt;</span><span class="token comment">// 遍历得出所有的variant</span>
    variant<span class="token punctuation">.</span>outputs<span class="token punctuation">.</span>all <span class="token punctuation">{</span><span class="token comment">// 遍历所有的输出类型，一般是debug和replease</span>
        <span class="token comment">// 定义apk的名字，拼接variant的版本号</span>
        def apkName <span class="token operator">=</span> <span class="token string">&quot;app_\${variant.versionName}&quot;</span>
        <span class="token comment">// 判断是否为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>variant<span class="token punctuation">.</span>flavorName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            apkName <span class="token operator">+=</span> <span class="token string">&quot;_\${variant.flavorName}&quot;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 赋值属性</span>
        outputFileName <span class="token operator">=</span> apkName <span class="token operator">+</span> <span class="token string">&quot;.apk&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们遍历了所有的应用变体，并修改了每个变体生成的APK文件的名称，使其包含版本号。</p><h3 id="_5-release和debug设置全局变量" tabindex="-1"><a class="header-anchor" href="#_5-release和debug设置全局变量" aria-hidden="true">#</a> 5. release和debug设置全局变量</h3><p>写程序就会要有log，有log我们就需要在打release包的时候就需要手动的设置debug开关为false，但是在某些情况下我们可能会忘记关闭的。所以可以选择在gradle中通过buildConfigField定义变量，然后再需要的时候直接进行引用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>buildTypes <span class="token punctuation">{</span>
    release <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        buildConfigField <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;isDebug&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    debug <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        buildConfigField <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;isDebug&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上，我们在两种模式中都创建了一个叫做isDebug的布尔值的变量，根据类型不同设置值，然后需要重新编译一下。</p><p><strong>编译完成后直接调用BuildConfig.isDebug作为开关设置即可</strong></p><h3 id="_6-api地址的配置" tabindex="-1"><a class="header-anchor" href="#_6-api地址的配置" aria-hidden="true">#</a> 6. API地址的配置</h3><p>既然有了全局debug开关的设置，那么就肯定有这么一个需求：debug和release下使用不同的API请求地址，其实也就是和前面一个套路，直接通过buildConfigField定义变量。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>buildTypes <span class="token punctuation">{</span>
    release <span class="token punctuation">{</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        buildConfigField <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;isDebug&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span>
        buildConfigField <span class="token string">&quot;String&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;API&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://192.168.1.1/release&quot;</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
    debug <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        buildConfigField <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;isDebug&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span>
        buildConfigField <span class="token string">&quot;String&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;API&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;\\&quot;http://192.168.1.1/debug\\&quot;&quot;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>String类型一定要记得加双引用转义。</strong><strong>String类型一定要记得加双引用转义。</strong><strong>String类型一定要记得加双引用转义。</strong></p><h3 id="_7-执行cmd命令" tabindex="-1"><a class="header-anchor" href="#_7-执行cmd命令" aria-hidden="true">#</a> 7. 执行cmd命令</h3><p>我想在执行完成这个任务之后执行一个终端命令。在<code>build.gradle</code>中，最底下位置增加代码:</p><p>目标任务assembleRelease</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>android <span class="token punctuation">{</span>
    <span class="token comment">// 你的其他配置</span>
<span class="token punctuation">}</span>
tasks<span class="token punctuation">.</span>whenTaskAdded <span class="token punctuation">{</span> task <span class="token operator">-&gt;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;assembleRelease&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span>finalizedBy &#39;apkCopyTask&#39;
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
task apkCopyTask <span class="token punctuation">{</span>
    doLast <span class="token punctuation">{</span>
        <span class="token comment">// 在这里执行你的终端命令， 这个命令可以换自己的，例如我的alias fff</span>
        def command <span class="token operator">=</span> <span class="token string">&quot;echo &#39;Hello, World!&#39;&quot;</span>
        println <span class="token string">&quot;Executing command: $command&quot;</span>

        <span class="token comment">// 使用下列语句执行终端命令</span>
        def process <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        process<span class="token punctuation">.</span>in<span class="token punctuation">.</span>eachLine <span class="token punctuation">{</span> line <span class="token operator">-&gt;</span>
            println line
        <span class="token punctuation">}</span>
        process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样配置后，同步一次<code>Gradle</code>即可，在你每次执行<code>assembleRelease</code>的时候都会执行<code>myCustomTask</code>，但你的同事也执行这个任务也会触发定制任务。为了不影响别人，应该改成一个独立的任务，这个任务执行的时候，先执行<code>assembleRelease</code>，再执行自己的逻辑。</p><p>可以修改：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自定义任务来执行 assembleRelease</span>
task myAssembleAndRunCommand <span class="token punctuation">{</span>
    dependsOn &#39;assembleRelease&#39;  <span class="token comment">// 先执行 assembleRelease 任务</span>
    doLast <span class="token punctuation">{</span>
        <span class="token comment">// 在 assembleRelease 完成后执行你的终端命令</span>
        def command <span class="token operator">=</span> <span class="token string">&quot;echo &#39;Hello, World!&#39;&quot;</span>
        println <span class="token string">&quot;Executing command: $command&quot;</span>
        <span class="token comment">// 使用下列语句执行终端命令</span>
        def process <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        process<span class="token punctuation">.</span>in<span class="token punctuation">.</span>eachLine <span class="token punctuation">{</span> line <span class="token operator">-&gt;</span>
            println line
        <span class="token punctuation">}</span>
        process<span class="token punctuation">.</span><span class="token function">waitFor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候，<code>myAssembleAndRunCommand</code>是一个新的任务，它依赖于 <code>assembleRelease</code>。在执行<code>myAssembleAndRunCommand</code>时，<code>Gradle</code> 会先确保 <code>assembleRelease</code>已经完成。在自己需要的时候去other里面找到<code>myAssembleAndRunCommand</code>双击执行就可以，不会影响到其他人。</p><h3 id="_8-打包jar包" tabindex="-1"><a class="header-anchor" href="#_8-打包jar包" aria-hidden="true">#</a> 8. 打包jar包</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//删除任务</span>
task <span class="token function">deleteJarTask</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token class-name">Delete</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    delete &#39;build<span class="token operator">/</span>intermediates<span class="token operator">/</span>compile_library_classes_jar<span class="token operator">/</span>release<span class="token operator">/</span>bundleLibCompileToJarRelease<span class="token operator">/</span>classes<span class="token punctuation">.</span>jar&#39;
    delete &#39;build<span class="token operator">/</span>outputs<span class="token operator">/</span>aar<span class="token operator">/</span>&#39;
    delete &#39;build<span class="token operator">/</span>libs<span class="token operator">/</span>csdk<span class="token punctuation">.</span>jar&#39;
<span class="token punctuation">}</span>

task <span class="token function">makeJarTask</span><span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token class-name">Jar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//默认生成Jar包的位置</span>
    <span class="token function">from</span><span class="token punctuation">(</span>&#39;build<span class="token operator">/</span>intermediates<span class="token operator">/</span>compile_library_classes_jar<span class="token operator">/</span>release<span class="token operator">/</span>bundleLibCompileToJarRelease<span class="token operator">/</span>classes<span class="token punctuation">.</span>jar&#39;<span class="token punctuation">)</span>
    <span class="token function">into</span><span class="token punctuation">(</span><span class="token char">&#39;libs/&#39;</span><span class="token punctuation">)</span> <span class="token comment">//生成路径</span>
    <span class="token function">include</span><span class="token punctuation">(</span>&#39;classes<span class="token punctuation">.</span>jar&#39;<span class="token punctuation">)</span>
    <span class="token function">rename</span><span class="token punctuation">(</span>&#39;classes<span class="token punctuation">.</span>jar<span class="token char">&#39;, &#39;</span>mylibrary<span class="token punctuation">.</span>jar&#39;<span class="token punctuation">)</span><span class="token comment">//mylibrary.jar  生成jar包java的名称</span>
<span class="token punctuation">}</span>
makeJarTask<span class="token punctuation">.</span><span class="token function">dependsOn</span><span class="token punctuation">(</span>build<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考：</p>`,59),r={href:"https://blog.csdn.net/qq_30089721/article/details/116780955?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522285ddf75dbe226dc964208b19dd6538f%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=285ddf75dbe226dc964208b19dd6538f&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-13-116780955-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=android%20%E5%B0%86%E4%BB%A3%E7%A0%81%E6%89%93%E5%8C%85%E6%88%90Jar%E5%8C%85&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/qq_32903439/article/details/133810420",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="gradle-wrapper" tabindex="-1"><a class="header-anchor" href="#gradle-wrapper" aria-hidden="true">#</a> Gradle Wrapper</h2><p>Gradle Wrapper是Gradle提供的一个工具，它允许你在没有预先安装Gradle的情况下，通过包装器脚本来执行Gradle命令。这样做的好处是，它确保了所有开发者和构建环境都使用相同版本的Gradle来构建项目，从而避免了因Gradle版本不同而导致的构建不一致问题。</p><h3 id="gradle-wrapper的组成" tabindex="-1"><a class="header-anchor" href="#gradle-wrapper的组成" aria-hidden="true">#</a> Gradle Wrapper的组成</h3><p>Gradle Wrapper主要由以下几个文件组成：</p><ul><li><code>gradlew</code>（Unix/Linux shell 脚本）</li><li><code>gradlew.bat</code>（Windows 批处理脚本）</li><li><code>gradle/wrapper/gradle-wrapper.properties</code>（配置文件，指定Gradle的版本和其他设置）</li></ul><h3 id="使用gradle-wrapper的示例" tabindex="-1"><a class="header-anchor" href="#使用gradle-wrapper的示例" aria-hidden="true">#</a> 使用Gradle Wrapper的示例</h3><p>当你使用Gradle Wrapper时，你应该通过<code>gradlew</code>（在Unix/Linux系统上）或<code>gradlew.bat</code>（在Windows系统上）脚本来执行Gradle命令，而不是直接使用<code>gradle</code>命令。这样做会自动下载并配置指定的Gradle版本（如果尚未下载的话），然后使用它来执行命令。</p><h3 id="示例-使用gradle-wrapper构建项目" tabindex="-1"><a class="header-anchor" href="#示例-使用gradle-wrapper构建项目" aria-hidden="true">#</a> 示例：使用Gradle Wrapper构建项目</h3><p>在命令行中，你可以使用以下命令来构建你的Android项目（假设你已经在项目的根目录下）：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Unix/Linux/macOS</span>
./gradlew build

<span class="token comment"># Windows</span>
gradlew.bat build
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些命令会检查<code>gradle/wrapper/gradle-wrapper.properties</code>文件中指定的Gradle版本，如果本地没有安装该版本，Gradle Wrapper会自动下载并配置它。然后，它会使用这个版本的Gradle来执行<code>build</code>任务，构建你的Android项目。</p><h3 id="修改gradle版本" tabindex="-1"><a class="header-anchor" href="#修改gradle版本" aria-hidden="true">#</a> 修改Gradle版本</h3><p>如果你想更改项目中使用的Gradle版本，你需要编辑<code>gradle/wrapper/gradle-wrapper.properties</code>文件，并更新<code>distributionUrl</code>属性的值。例如，要将Gradle版本更改为6.7.1，你可以将<code>distributionUrl</code>属性设置为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>distributionUrl<span class="token operator">=</span>https\\<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>services<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>org<span class="token operator">/</span>distributions<span class="token operator">/</span>gradle<span class="token operator">-</span><span class="token number">6.7</span><span class="token number">.1</span><span class="token operator">-</span>bin<span class="token punctuation">.</span>zip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，更改Gradle版本后，所有开发者和构建环境都需要重新下载并使用新版本的Gradle，因此最好在团队中进行协调，并确保所有相关环境都已更新。</p>`,15),k={href:"https://blog.csdn.net/Lwjobs/article/details/140878113?ops_request_misc=%257B%2522request%255Fid%2522%253A%252263d3182ab6d063742b0aef8f6955a535%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=63d3182ab6d063742b0aef8f6955a535&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-140878113-null-null.142%5Ev100%5Epc_search_result_base8&utm_term=android%20gradle%20%E8%AF%AD%E6%B3%95&spm=1018.2226.3001.4187",target:"_blank",rel:"noopener noreferrer"};function m(b,g){const s=i("ExternalLinkIcon");return o(),l("div",null,[d,n("p",null,[n("a",r,[a("将代码打包成Jar包和aar文件"),e(s)])]),n("p",null,[n("a",u,[a("保姆级别使用android studio 生成jar包"),e(s)])]),v,n("p",null,[a("本文转自 "),n("a",k,[a("https://blog.csdn.net/Lwjobs/article/details/140878113?ops_request_misc=%257B%2522request%255Fid%2522%253A%252263d3182ab6d063742b0aef8f6955a535%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=63d3182ab6d063742b0aef8f6955a535&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-4-140878113-null-null.142^v100^pc_search_result_base8&utm_term=android%20gradle%20%E8%AF%AD%E6%B3%95&spm=1018.2226.3001.4187"),e(s)]),a("，如有侵权，请联系删除。")])])}const f=p(c,[["render",m],["__file","Gradlekaifayuyingyong.html.vue"]]);export{f as default};
